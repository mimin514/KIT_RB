
RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004728  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004834  08004834  00014834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048b8  080048b8  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  080048b8  080048b8  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048b8  080048b8  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048b8  080048b8  000148b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048bc  080048bc  000148bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  080048c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  2000009c  0800495c  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000560  0800495c  00020560  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012420  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002970  00000000  00000000  000324e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  00034e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c0  00000000  00000000  00036028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000194fe  00000000  00000000  000370e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000153cd  00000000  00000000  000505e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092a4c  00000000  00000000  000659b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f83ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dd0  00000000  00000000  000f8450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000009c 	.word	0x2000009c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800481c 	.word	0x0800481c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a0 	.word	0x200000a0
 8000148:	0800481c 	.word	0x0800481c

0800014c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f023 030f 	bic.w	r3, r3, #15
 800015c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	011b      	lsls	r3, r3, #4
 8000162:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000164:	7bfb      	ldrb	r3, [r7, #15]
 8000166:	f043 030c 	orr.w	r3, r3, #12
 800016a:	b2db      	uxtb	r3, r3
 800016c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800016e:	7bfb      	ldrb	r3, [r7, #15]
 8000170:	f043 0308 	orr.w	r3, r3, #8
 8000174:	b2db      	uxtb	r3, r3
 8000176:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000178:	7bbb      	ldrb	r3, [r7, #14]
 800017a:	f043 030c 	orr.w	r3, r3, #12
 800017e:	b2db      	uxtb	r3, r3
 8000180:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000182:	7bbb      	ldrb	r3, [r7, #14]
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	b2db      	uxtb	r3, r3
 800018a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800018c:	f107 0208 	add.w	r2, r7, #8
 8000190:	2364      	movs	r3, #100	; 0x64
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2304      	movs	r3, #4
 8000196:	2142      	movs	r1, #66	; 0x42
 8000198:	4803      	ldr	r0, [pc, #12]	; (80001a8 <lcd_send_cmd+0x5c>)
 800019a:	f002 f9a5 	bl	80024e8 <HAL_I2C_Master_Transmit>
}
 800019e:	bf00      	nop
 80001a0:	3710      	adds	r7, #16
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	20000188 	.word	0x20000188

080001ac <lcd_send_data>:

void lcd_send_data (char data)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b086      	sub	sp, #24
 80001b0:	af02      	add	r7, sp, #8
 80001b2:	4603      	mov	r3, r0
 80001b4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	f023 030f 	bic.w	r3, r3, #15
 80001bc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	011b      	lsls	r3, r3, #4
 80001c2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80001c4:	7bfb      	ldrb	r3, [r7, #15]
 80001c6:	f043 030d 	orr.w	r3, r3, #13
 80001ca:	b2db      	uxtb	r3, r3
 80001cc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	f043 0309 	orr.w	r3, r3, #9
 80001d4:	b2db      	uxtb	r3, r3
 80001d6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80001d8:	7bbb      	ldrb	r3, [r7, #14]
 80001da:	f043 030d 	orr.w	r3, r3, #13
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80001e2:	7bbb      	ldrb	r3, [r7, #14]
 80001e4:	f043 0309 	orr.w	r3, r3, #9
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80001ec:	f107 0208 	add.w	r2, r7, #8
 80001f0:	2364      	movs	r3, #100	; 0x64
 80001f2:	9300      	str	r3, [sp, #0]
 80001f4:	2304      	movs	r3, #4
 80001f6:	2142      	movs	r1, #66	; 0x42
 80001f8:	4803      	ldr	r0, [pc, #12]	; (8000208 <lcd_send_data+0x5c>)
 80001fa:	f002 f975 	bl	80024e8 <HAL_I2C_Master_Transmit>
}
 80001fe:	bf00      	nop
 8000200:	3710      	adds	r7, #16
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	20000188 	.word	0x20000188

0800020c <lcd_init>:

void lcd_init (void) {
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000210:	2033      	movs	r0, #51	; 0x33
 8000212:	f7ff ff9b 	bl	800014c <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000216:	2032      	movs	r0, #50	; 0x32
 8000218:	f7ff ff98 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 800021c:	2032      	movs	r0, #50	; 0x32
 800021e:	f001 fa1d 	bl	800165c <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000222:	2028      	movs	r0, #40	; 0x28
 8000224:	f7ff ff92 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 8000228:	2032      	movs	r0, #50	; 0x32
 800022a:	f001 fa17 	bl	800165c <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 800022e:	2001      	movs	r0, #1
 8000230:	f7ff ff8c 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 8000234:	2032      	movs	r0, #50	; 0x32
 8000236:	f001 fa11 	bl	800165c <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 800023a:	2006      	movs	r0, #6
 800023c:	f7ff ff86 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 8000240:	2032      	movs	r0, #50	; 0x32
 8000242:	f001 fa0b 	bl	800165c <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 8000246:	200c      	movs	r0, #12
 8000248:	f7ff ff80 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 800024c:	2032      	movs	r0, #50	; 0x32
 800024e:	f001 fa05 	bl	800165c <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000252:	2002      	movs	r0, #2
 8000254:	f7ff ff7a 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 8000258:	2032      	movs	r0, #50	; 0x32
 800025a:	f001 f9ff 	bl	800165c <HAL_Delay>
	HAL_Delay(50);
 800025e:	2032      	movs	r0, #50	; 0x32
 8000260:	f001 f9fc 	bl	800165c <HAL_Delay>
	lcd_send_cmd (0x80);
 8000264:	2080      	movs	r0, #128	; 0x80
 8000266:	f7ff ff71 	bl	800014c <lcd_send_cmd>
	lcd_goto_XY(1, 5);
 800026a:	2105      	movs	r1, #5
 800026c:	2001      	movs	r0, #1
 800026e:	f000 f82e 	bl	80002ce <lcd_goto_XY>
	lcd_send_string("mode:");
 8000272:	4809      	ldr	r0, [pc, #36]	; (8000298 <lcd_init+0x8c>)
 8000274:	f000 f816 	bl	80002a4 <lcd_send_string>
	lcd_goto_XY(0, 0);
 8000278:	2100      	movs	r1, #0
 800027a:	2000      	movs	r0, #0
 800027c:	f000 f827 	bl	80002ce <lcd_goto_XY>
	lcd_send_string("time1:");
 8000280:	4806      	ldr	r0, [pc, #24]	; (800029c <lcd_init+0x90>)
 8000282:	f000 f80f 	bl	80002a4 <lcd_send_string>
	lcd_goto_XY(0, 9);
 8000286:	2109      	movs	r1, #9
 8000288:	2000      	movs	r0, #0
 800028a:	f000 f820 	bl	80002ce <lcd_goto_XY>
	lcd_send_string("time2:");
 800028e:	4804      	ldr	r0, [pc, #16]	; (80002a0 <lcd_init+0x94>)
 8000290:	f000 f808 	bl	80002a4 <lcd_send_string>
}
 8000294:	bf00      	nop
 8000296:	bd80      	pop	{r7, pc}
 8000298:	08004834 	.word	0x08004834
 800029c:	0800483c 	.word	0x0800483c
 80002a0:	08004844 	.word	0x08004844

080002a4 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80002ac:	e006      	b.n	80002bc <lcd_send_string+0x18>
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	1c5a      	adds	r2, r3, #1
 80002b2:	607a      	str	r2, [r7, #4]
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	4618      	mov	r0, r3
 80002b8:	f7ff ff78 	bl	80001ac <lcd_send_data>
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d1f4      	bne.n	80002ae <lcd_send_string+0xa>
}
 80002c4:	bf00      	nop
 80002c6:	bf00      	nop
 80002c8:	3708      	adds	r7, #8
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}

080002ce <lcd_goto_XY>:
{
	lcd_send_cmd (0x01); //clear display
}

void lcd_goto_XY (int row, int col)
{
 80002ce:	b580      	push	{r7, lr}
 80002d0:	b084      	sub	sp, #16
 80002d2:	af00      	add	r7, sp, #0
 80002d4:	6078      	str	r0, [r7, #4]
 80002d6:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2b01      	cmp	r3, #1
 80002dc:	d108      	bne.n	80002f0 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	b2da      	uxtb	r2, r3
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	b2db      	uxtb	r3, r3
 80002e6:	4413      	add	r3, r2
 80002e8:	b2db      	uxtb	r3, r3
 80002ea:	337f      	adds	r3, #127	; 0x7f
 80002ec:	73fb      	strb	r3, [r7, #15]
 80002ee:	e008      	b.n	8000302 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	3340      	adds	r3, #64	; 0x40
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	b25b      	sxtb	r3, r3
 80002fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80002fe:	b25b      	sxtb	r3, r3
 8000300:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 8000302:	7bfb      	ldrb	r3, [r7, #15]
 8000304:	4618      	mov	r0, r3
 8000306:	f7ff ff21 	bl	800014c <lcd_send_cmd>
}
 800030a:	bf00      	nop
 800030c:	3710      	adds	r7, #16
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
	...

08000314 <handle_mode>:
 #include "led_display.h"
#include "timer.h"

uint8_t modemode = 1;

void handle_mode(void) {
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	switch (modemode) {
 8000318:	4b0e      	ldr	r3, [pc, #56]	; (8000354 <handle_mode+0x40>)
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	3b01      	subs	r3, #1
 800031e:	2b03      	cmp	r3, #3
 8000320:	d816      	bhi.n	8000350 <handle_mode+0x3c>
 8000322:	a201      	add	r2, pc, #4	; (adr r2, 8000328 <handle_mode+0x14>)
 8000324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000328:	08000339 	.word	0x08000339
 800032c:	0800033f 	.word	0x0800033f
 8000330:	08000345 	.word	0x08000345
 8000334:	0800034b 	.word	0x0800034b
		case 1:
			normalstate();
 8000338:	f000 fa96 	bl	8000868 <normalstate>
			break;
 800033c:	e008      	b.n	8000350 <handle_mode+0x3c>
		case 2:
			modify_red_duration();
 800033e:	f000 fa37 	bl	80007b0 <modify_red_duration>
			break;
 8000342:	e005      	b.n	8000350 <handle_mode+0x3c>
		case 3:
			modify_yellow_duration();
 8000344:	f000 fa3a 	bl	80007bc <modify_yellow_duration>
			break;
 8000348:	e002      	b.n	8000350 <handle_mode+0x3c>
		case 4:
			modify_green_duration();
 800034a:	f000 fa3d 	bl	80007c8 <modify_green_duration>
			break;
 800034e:	bf00      	nop

	}

}
 8000350:	bf00      	nop
 8000352:	bd80      	pop	{r7, pc}
 8000354:	20000000 	.word	0x20000000

08000358 <getKeyInput>:


#define BUTTON_PRESSED GPIO_PIN_SET  // Define when the button is considered pressed
#define BUTTON_RELEASED GPIO_PIN_RESET

void getKeyInput(void) {
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
    static uint8_t prev_button_states[4] = {BUTTON_RELEASED, BUTTON_RELEASED, BUTTON_RELEASED, BUTTON_RELEASED};

    uint8_t button_states[4] = {
        HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin),
 800035e:	2110      	movs	r1, #16
 8000360:	482d      	ldr	r0, [pc, #180]	; (8000418 <getKeyInput+0xc0>)
 8000362:	f001 ff13 	bl	800218c <HAL_GPIO_ReadPin>
 8000366:	4603      	mov	r3, r0
    uint8_t button_states[4] = {
 8000368:	703b      	strb	r3, [r7, #0]
        HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin),
 800036a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800036e:	482a      	ldr	r0, [pc, #168]	; (8000418 <getKeyInput+0xc0>)
 8000370:	f001 ff0c 	bl	800218c <HAL_GPIO_ReadPin>
 8000374:	4603      	mov	r3, r0
    uint8_t button_states[4] = {
 8000376:	707b      	strb	r3, [r7, #1]
        HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin),
 8000378:	f44f 7180 	mov.w	r1, #256	; 0x100
 800037c:	4827      	ldr	r0, [pc, #156]	; (800041c <getKeyInput+0xc4>)
 800037e:	f001 ff05 	bl	800218c <HAL_GPIO_ReadPin>
 8000382:	4603      	mov	r3, r0
    uint8_t button_states[4] = {
 8000384:	70bb      	strb	r3, [r7, #2]
        HAL_GPIO_ReadPin(BUTTON_4_GPIO_Port, BUTTON_4_Pin)
 8000386:	f44f 7100 	mov.w	r1, #512	; 0x200
 800038a:	4824      	ldr	r0, [pc, #144]	; (800041c <getKeyInput+0xc4>)
 800038c:	f001 fefe 	bl	800218c <HAL_GPIO_ReadPin>
 8000390:	4603      	mov	r3, r0
    uint8_t button_states[4] = {
 8000392:	70fb      	strb	r3, [r7, #3]
    };

    for (uint8_t i = 0; i < 4; i++) {
 8000394:	2300      	movs	r3, #0
 8000396:	71fb      	strb	r3, [r7, #7]
 8000398:	e036      	b.n	8000408 <getKeyInput+0xb0>
        if (button_states[i] == BUTTON_PRESSED && prev_button_states[i] == BUTTON_RELEASED) {
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	3308      	adds	r3, #8
 800039e:	443b      	add	r3, r7
 80003a0:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80003a4:	2b01      	cmp	r3, #1
 80003a6:	d123      	bne.n	80003f0 <getKeyInput+0x98>
 80003a8:	79fb      	ldrb	r3, [r7, #7]
 80003aa:	4a1d      	ldr	r2, [pc, #116]	; (8000420 <getKeyInput+0xc8>)
 80003ac:	5cd3      	ldrb	r3, [r2, r3]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d11e      	bne.n	80003f0 <getKeyInput+0x98>
            switch (i) {
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	2b03      	cmp	r3, #3
 80003b6:	d81c      	bhi.n	80003f2 <getKeyInput+0x9a>
 80003b8:	a201      	add	r2, pc, #4	; (adr r2, 80003c0 <getKeyInput+0x68>)
 80003ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003be:	bf00      	nop
 80003c0:	080003d1 	.word	0x080003d1
 80003c4:	080003d9 	.word	0x080003d9
 80003c8:	080003e1 	.word	0x080003e1
 80003cc:	080003e9 	.word	0x080003e9
                case 0: button1_flag = 1; break;  // Button 1
 80003d0:	4b14      	ldr	r3, [pc, #80]	; (8000424 <getKeyInput+0xcc>)
 80003d2:	2201      	movs	r2, #1
 80003d4:	701a      	strb	r2, [r3, #0]
 80003d6:	e00c      	b.n	80003f2 <getKeyInput+0x9a>
                case 1: button2_flag = 1; break;  // Button 2
 80003d8:	4b13      	ldr	r3, [pc, #76]	; (8000428 <getKeyInput+0xd0>)
 80003da:	2201      	movs	r2, #1
 80003dc:	701a      	strb	r2, [r3, #0]
 80003de:	e008      	b.n	80003f2 <getKeyInput+0x9a>
                case 2: button3_flag = 1; break;  // Button 3
 80003e0:	4b12      	ldr	r3, [pc, #72]	; (800042c <getKeyInput+0xd4>)
 80003e2:	2201      	movs	r2, #1
 80003e4:	701a      	strb	r2, [r3, #0]
 80003e6:	e004      	b.n	80003f2 <getKeyInput+0x9a>
                case 3: button4_flag = 1; break;  // Button 4
 80003e8:	4b11      	ldr	r3, [pc, #68]	; (8000430 <getKeyInput+0xd8>)
 80003ea:	2201      	movs	r2, #1
 80003ec:	701a      	strb	r2, [r3, #0]
 80003ee:	e000      	b.n	80003f2 <getKeyInput+0x9a>
            }
        }
 80003f0:	bf00      	nop
        prev_button_states[i] = button_states[i];  // Update previous state
 80003f2:	79fa      	ldrb	r2, [r7, #7]
 80003f4:	79fb      	ldrb	r3, [r7, #7]
 80003f6:	3208      	adds	r2, #8
 80003f8:	443a      	add	r2, r7
 80003fa:	f812 1c08 	ldrb.w	r1, [r2, #-8]
 80003fe:	4a08      	ldr	r2, [pc, #32]	; (8000420 <getKeyInput+0xc8>)
 8000400:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < 4; i++) {
 8000402:	79fb      	ldrb	r3, [r7, #7]
 8000404:	3301      	adds	r3, #1
 8000406:	71fb      	strb	r3, [r7, #7]
 8000408:	79fb      	ldrb	r3, [r7, #7]
 800040a:	2b03      	cmp	r3, #3
 800040c:	d9c5      	bls.n	800039a <getKeyInput+0x42>
    }
}
 800040e:	bf00      	nop
 8000410:	bf00      	nop
 8000412:	3708      	adds	r7, #8
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	40010c00 	.word	0x40010c00
 800041c:	40010800 	.word	0x40010800
 8000420:	200000bc 	.word	0x200000bc
 8000424:	200000b8 	.word	0x200000b8
 8000428:	200000b9 	.word	0x200000b9
 800042c:	200000ba 	.word	0x200000ba
 8000430:	200000bb 	.word	0x200000bb

08000434 <fsm_for_input_processing>:

void fsm_for_input_processing(void) {
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
    getKeyInput();
 8000438:	f7ff ff8e 	bl	8000358 <getKeyInput>

    if (button1_flag) {
 800043c:	4b30      	ldr	r3, [pc, #192]	; (8000500 <fsm_for_input_processing+0xcc>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	b2db      	uxtb	r3, r3
 8000442:	2b00      	cmp	r3, #0
 8000444:	d010      	beq.n	8000468 <fsm_for_input_processing+0x34>
        button1_flag = 0;
 8000446:	4b2e      	ldr	r3, [pc, #184]	; (8000500 <fsm_for_input_processing+0xcc>)
 8000448:	2200      	movs	r2, #0
 800044a:	701a      	strb	r2, [r3, #0]
        modemode = (modemode % 4) + 1;
 800044c:	4b2d      	ldr	r3, [pc, #180]	; (8000504 <fsm_for_input_processing+0xd0>)
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	f003 0303 	and.w	r3, r3, #3
 8000454:	b2db      	uxtb	r3, r3
 8000456:	3301      	adds	r3, #1
 8000458:	b2da      	uxtb	r2, r3
 800045a:	4b2a      	ldr	r3, [pc, #168]	; (8000504 <fsm_for_input_processing+0xd0>)
 800045c:	701a      	strb	r2, [r3, #0]
        updatemode(modemode);
 800045e:	4b29      	ldr	r3, [pc, #164]	; (8000504 <fsm_for_input_processing+0xd0>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	4618      	mov	r0, r3
 8000464:	f000 f9b6 	bl	80007d4 <updatemode>
    }

    if (button2_flag) {
 8000468:	4b27      	ldr	r3, [pc, #156]	; (8000508 <fsm_for_input_processing+0xd4>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	b2db      	uxtb	r3, r3
 800046e:	2b00      	cmp	r3, #0
 8000470:	d016      	beq.n	80004a0 <fsm_for_input_processing+0x6c>
        button2_flag = 0;
 8000472:	4b25      	ldr	r3, [pc, #148]	; (8000508 <fsm_for_input_processing+0xd4>)
 8000474:	2200      	movs	r2, #0
 8000476:	701a      	strb	r2, [r3, #0]
        switch (modemode) {
 8000478:	4b22      	ldr	r3, [pc, #136]	; (8000504 <fsm_for_input_processing+0xd0>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2b04      	cmp	r3, #4
 800047e:	d00c      	beq.n	800049a <fsm_for_input_processing+0x66>
 8000480:	2b04      	cmp	r3, #4
 8000482:	dc0e      	bgt.n	80004a2 <fsm_for_input_processing+0x6e>
 8000484:	2b02      	cmp	r3, #2
 8000486:	d002      	beq.n	800048e <fsm_for_input_processing+0x5a>
 8000488:	2b03      	cmp	r3, #3
 800048a:	d003      	beq.n	8000494 <fsm_for_input_processing+0x60>
 800048c:	e009      	b.n	80004a2 <fsm_for_input_processing+0x6e>
            case 2: but2_red(); break;
 800048e:	f000 fae5 	bl	8000a5c <but2_red>
 8000492:	e006      	b.n	80004a2 <fsm_for_input_processing+0x6e>
            case 3: but2_ye(); break;
 8000494:	f000 faec 	bl	8000a70 <but2_ye>
 8000498:	e003      	b.n	80004a2 <fsm_for_input_processing+0x6e>
            case 4: but2_gr(); break;
 800049a:	f000 faf3 	bl	8000a84 <but2_gr>
 800049e:	e000      	b.n	80004a2 <fsm_for_input_processing+0x6e>
        }
    }
 80004a0:	bf00      	nop

    if (button3_flag) {
 80004a2:	4b1a      	ldr	r3, [pc, #104]	; (800050c <fsm_for_input_processing+0xd8>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d016      	beq.n	80004da <fsm_for_input_processing+0xa6>
        button3_flag = 0;
 80004ac:	4b17      	ldr	r3, [pc, #92]	; (800050c <fsm_for_input_processing+0xd8>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	701a      	strb	r2, [r3, #0]
        switch (modemode) {
 80004b2:	4b14      	ldr	r3, [pc, #80]	; (8000504 <fsm_for_input_processing+0xd0>)
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	2b04      	cmp	r3, #4
 80004b8:	d00c      	beq.n	80004d4 <fsm_for_input_processing+0xa0>
 80004ba:	2b04      	cmp	r3, #4
 80004bc:	dc0e      	bgt.n	80004dc <fsm_for_input_processing+0xa8>
 80004be:	2b02      	cmp	r3, #2
 80004c0:	d002      	beq.n	80004c8 <fsm_for_input_processing+0x94>
 80004c2:	2b03      	cmp	r3, #3
 80004c4:	d003      	beq.n	80004ce <fsm_for_input_processing+0x9a>
 80004c6:	e009      	b.n	80004dc <fsm_for_input_processing+0xa8>
            case 2: but3_red(); break;
 80004c8:	f000 fae6 	bl	8000a98 <but3_red>
 80004cc:	e006      	b.n	80004dc <fsm_for_input_processing+0xa8>
            case 3: but3_ye(); break;
 80004ce:	f000 faef 	bl	8000ab0 <but3_ye>
 80004d2:	e003      	b.n	80004dc <fsm_for_input_processing+0xa8>
            case 4: but3_gr(); break;
 80004d4:	f000 faf8 	bl	8000ac8 <but3_gr>
 80004d8:	e000      	b.n	80004dc <fsm_for_input_processing+0xa8>
        }
    }
 80004da:	bf00      	nop

    if (button4_flag) {
 80004dc:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <fsm_for_input_processing+0xdc>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d00a      	beq.n	80004fc <fsm_for_input_processing+0xc8>
        button4_flag = 0;
 80004e6:	4b0a      	ldr	r3, [pc, #40]	; (8000510 <fsm_for_input_processing+0xdc>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	701a      	strb	r2, [r3, #0]
        modemode = 1;
 80004ec:	4b05      	ldr	r3, [pc, #20]	; (8000504 <fsm_for_input_processing+0xd0>)
 80004ee:	2201      	movs	r2, #1
 80004f0:	701a      	strb	r2, [r3, #0]
        updatemode(modemode);
 80004f2:	4b04      	ldr	r3, [pc, #16]	; (8000504 <fsm_for_input_processing+0xd0>)
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	4618      	mov	r0, r3
 80004f8:	f000 f96c 	bl	80007d4 <updatemode>
    }

    //update_handlemode();
}
 80004fc:	bf00      	nop
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	200000b8 	.word	0x200000b8
 8000504:	20000000 	.word	0x20000000
 8000508:	200000b9 	.word	0x200000b9
 800050c:	200000ba 	.word	0x200000ba
 8000510:	200000bb 	.word	0x200000bb

08000514 <button_reading>:
static GPIO_PinState debounceButtonBuffer2[N0_OF_BUTTONS];
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS];

static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];

void button_reading(void) {
 8000514:	b590      	push	{r4, r7, lr}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
    uint16_t button_pins[N0_OF_BUTTONS] = {GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_8};
 800051a:	4a2d      	ldr	r2, [pc, #180]	; (80005d0 <button_reading+0xbc>)
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000522:	e883 0003 	stmia.w	r3, {r0, r1}

    for (char i = 0; i < N0_OF_BUTTONS; i++) {
 8000526:	2300      	movs	r3, #0
 8000528:	73fb      	strb	r3, [r7, #15]
 800052a:	e048      	b.n	80005be <button_reading+0xaa>
        debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 800052c:	7bfa      	ldrb	r2, [r7, #15]
 800052e:	7bfb      	ldrb	r3, [r7, #15]
 8000530:	4928      	ldr	r1, [pc, #160]	; (80005d4 <button_reading+0xc0>)
 8000532:	5c89      	ldrb	r1, [r1, r2]
 8000534:	4a28      	ldr	r2, [pc, #160]	; (80005d8 <button_reading+0xc4>)
 8000536:	54d1      	strb	r1, [r2, r3]
        debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(GPIOB, button_pins[i]);
 8000538:	7bfb      	ldrb	r3, [r7, #15]
 800053a:	005b      	lsls	r3, r3, #1
 800053c:	3310      	adds	r3, #16
 800053e:	443b      	add	r3, r7
 8000540:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8000544:	7bfc      	ldrb	r4, [r7, #15]
 8000546:	4619      	mov	r1, r3
 8000548:	4824      	ldr	r0, [pc, #144]	; (80005dc <button_reading+0xc8>)
 800054a:	f001 fe1f 	bl	800218c <HAL_GPIO_ReadPin>
 800054e:	4603      	mov	r3, r0
 8000550:	461a      	mov	r2, r3
 8000552:	4b20      	ldr	r3, [pc, #128]	; (80005d4 <button_reading+0xc0>)
 8000554:	551a      	strb	r2, [r3, r4]

        if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) {
 8000556:	7bfb      	ldrb	r3, [r7, #15]
 8000558:	4a1e      	ldr	r2, [pc, #120]	; (80005d4 <button_reading+0xc0>)
 800055a:	5cd2      	ldrb	r2, [r2, r3]
 800055c:	7bfb      	ldrb	r3, [r7, #15]
 800055e:	491e      	ldr	r1, [pc, #120]	; (80005d8 <button_reading+0xc4>)
 8000560:	5ccb      	ldrb	r3, [r1, r3]
 8000562:	429a      	cmp	r2, r3
 8000564:	d105      	bne.n	8000572 <button_reading+0x5e>
            buttonBuffer[i] = debounceButtonBuffer1[i];
 8000566:	7bfa      	ldrb	r2, [r7, #15]
 8000568:	7bfb      	ldrb	r3, [r7, #15]
 800056a:	491a      	ldr	r1, [pc, #104]	; (80005d4 <button_reading+0xc0>)
 800056c:	5c89      	ldrb	r1, [r1, r2]
 800056e:	4a1c      	ldr	r2, [pc, #112]	; (80005e0 <button_reading+0xcc>)
 8000570:	54d1      	strb	r1, [r2, r3]
        }

        if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 8000572:	7bfb      	ldrb	r3, [r7, #15]
 8000574:	4a1a      	ldr	r2, [pc, #104]	; (80005e0 <button_reading+0xcc>)
 8000576:	5cd3      	ldrb	r3, [r2, r3]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d114      	bne.n	80005a6 <button_reading+0x92>
            if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	4a19      	ldr	r2, [pc, #100]	; (80005e4 <button_reading+0xd0>)
 8000580:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000584:	2b63      	cmp	r3, #99	; 0x63
 8000586:	d809      	bhi.n	800059c <button_reading+0x88>
                counterForButtonPress1s[i]++;
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	4a16      	ldr	r2, [pc, #88]	; (80005e4 <button_reading+0xd0>)
 800058c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000590:	3201      	adds	r2, #1
 8000592:	b291      	uxth	r1, r2
 8000594:	4a13      	ldr	r2, [pc, #76]	; (80005e4 <button_reading+0xd0>)
 8000596:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800059a:	e00d      	b.n	80005b8 <button_reading+0xa4>
            } else {
                flagForButtonPress1s[i] = 1;
 800059c:	7bfb      	ldrb	r3, [r7, #15]
 800059e:	4a12      	ldr	r2, [pc, #72]	; (80005e8 <button_reading+0xd4>)
 80005a0:	2101      	movs	r1, #1
 80005a2:	54d1      	strb	r1, [r2, r3]
 80005a4:	e008      	b.n	80005b8 <button_reading+0xa4>
            }
        } else {
            counterForButtonPress1s[i] = 0;
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
 80005a8:	4a0e      	ldr	r2, [pc, #56]	; (80005e4 <button_reading+0xd0>)
 80005aa:	2100      	movs	r1, #0
 80005ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            flagForButtonPress1s[i] = 0;
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	4a0d      	ldr	r2, [pc, #52]	; (80005e8 <button_reading+0xd4>)
 80005b4:	2100      	movs	r1, #0
 80005b6:	54d1      	strb	r1, [r2, r3]
    for (char i = 0; i < N0_OF_BUTTONS; i++) {
 80005b8:	7bfb      	ldrb	r3, [r7, #15]
 80005ba:	3301      	adds	r3, #1
 80005bc:	73fb      	strb	r3, [r7, #15]
 80005be:	7bfb      	ldrb	r3, [r7, #15]
 80005c0:	2b03      	cmp	r3, #3
 80005c2:	d9b3      	bls.n	800052c <button_reading+0x18>
        }
    }
}
 80005c4:	bf00      	nop
 80005c6:	bf00      	nop
 80005c8:	3714      	adds	r7, #20
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd90      	pop	{r4, r7, pc}
 80005ce:	bf00      	nop
 80005d0:	0800484c 	.word	0x0800484c
 80005d4:	200000c4 	.word	0x200000c4
 80005d8:	200000c8 	.word	0x200000c8
 80005dc:	40010c00 	.word	0x40010c00
 80005e0:	200000c0 	.word	0x200000c0
 80005e4:	200000d0 	.word	0x200000d0
 80005e8:	200000cc 	.word	0x200000cc

080005ec <led_red_blink>:
#include <stdio.h>

int count=0,cnt=0;

// function blink led
void led_red_blink(){
 80005ec:	b598      	push	{r3, r4, r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)== HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)){
 80005f0:	2120      	movs	r1, #32
 80005f2:	4820      	ldr	r0, [pc, #128]	; (8000674 <led_red_blink+0x88>)
 80005f4:	f001 fdca 	bl	800218c <HAL_GPIO_ReadPin>
 80005f8:	4603      	mov	r3, r0
 80005fa:	461c      	mov	r4, r3
 80005fc:	2108      	movs	r1, #8
 80005fe:	481d      	ldr	r0, [pc, #116]	; (8000674 <led_red_blink+0x88>)
 8000600:	f001 fdc4 	bl	800218c <HAL_GPIO_ReadPin>
 8000604:	4603      	mov	r3, r0
 8000606:	429c      	cmp	r4, r3
 8000608:	d108      	bne.n	800061c <led_red_blink+0x30>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 800060a:	2108      	movs	r1, #8
 800060c:	4819      	ldr	r0, [pc, #100]	; (8000674 <led_red_blink+0x88>)
 800060e:	f001 fdec 	bl	80021ea <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000612:	2120      	movs	r1, #32
 8000614:	4817      	ldr	r0, [pc, #92]	; (8000674 <led_red_blink+0x88>)
 8000616:	f001 fde8 	bl	80021ea <HAL_GPIO_TogglePin>
 800061a:	e009      	b.n	8000630 <led_red_blink+0x44>
	}
	else {
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 800061c:	2201      	movs	r2, #1
 800061e:	2120      	movs	r1, #32
 8000620:	4814      	ldr	r0, [pc, #80]	; (8000674 <led_red_blink+0x88>)
 8000622:	f001 fdca 	bl	80021ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000626:	2201      	movs	r2, #1
 8000628:	2108      	movs	r1, #8
 800062a:	4812      	ldr	r0, [pc, #72]	; (8000674 <led_red_blink+0x88>)
 800062c:	f001 fdc5 	bl	80021ba <HAL_GPIO_WritePin>
	}
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7)== HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)){
 8000630:	2180      	movs	r1, #128	; 0x80
 8000632:	4811      	ldr	r0, [pc, #68]	; (8000678 <led_red_blink+0x8c>)
 8000634:	f001 fdaa 	bl	800218c <HAL_GPIO_ReadPin>
 8000638:	4603      	mov	r3, r0
 800063a:	461c      	mov	r4, r3
 800063c:	2140      	movs	r1, #64	; 0x40
 800063e:	480d      	ldr	r0, [pc, #52]	; (8000674 <led_red_blink+0x88>)
 8000640:	f001 fda4 	bl	800218c <HAL_GPIO_ReadPin>
 8000644:	4603      	mov	r3, r0
 8000646:	429c      	cmp	r4, r3
 8000648:	d108      	bne.n	800065c <led_red_blink+0x70>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 800064a:	2180      	movs	r1, #128	; 0x80
 800064c:	480a      	ldr	r0, [pc, #40]	; (8000678 <led_red_blink+0x8c>)
 800064e:	f001 fdcc 	bl	80021ea <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 8000652:	2140      	movs	r1, #64	; 0x40
 8000654:	4807      	ldr	r0, [pc, #28]	; (8000674 <led_red_blink+0x88>)
 8000656:	f001 fdc8 	bl	80021ea <HAL_GPIO_TogglePin>
		else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
		}

}
 800065a:	e009      	b.n	8000670 <led_red_blink+0x84>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 800065c:	2201      	movs	r2, #1
 800065e:	2180      	movs	r1, #128	; 0x80
 8000660:	4805      	ldr	r0, [pc, #20]	; (8000678 <led_red_blink+0x8c>)
 8000662:	f001 fdaa 	bl	80021ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8000666:	2201      	movs	r2, #1
 8000668:	2140      	movs	r1, #64	; 0x40
 800066a:	4802      	ldr	r0, [pc, #8]	; (8000674 <led_red_blink+0x88>)
 800066c:	f001 fda5 	bl	80021ba <HAL_GPIO_WritePin>
}
 8000670:	bf00      	nop
 8000672:	bd98      	pop	{r3, r4, r7, pc}
 8000674:	40010c00 	.word	0x40010c00
 8000678:	40011000 	.word	0x40011000

0800067c <led_green_blink>:
void led_green_blink(){
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000680:	2200      	movs	r2, #0
 8000682:	2120      	movs	r1, #32
 8000684:	4808      	ldr	r0, [pc, #32]	; (80006a8 <led_green_blink+0x2c>)
 8000686:	f001 fd98 	bl	80021ba <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 800068a:	2108      	movs	r1, #8
 800068c:	4806      	ldr	r0, [pc, #24]	; (80006a8 <led_green_blink+0x2c>)
 800068e:	f001 fdac 	bl	80021ea <HAL_GPIO_TogglePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	2140      	movs	r1, #64	; 0x40
 8000696:	4804      	ldr	r0, [pc, #16]	; (80006a8 <led_green_blink+0x2c>)
 8000698:	f001 fd8f 	bl	80021ba <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 800069c:	2180      	movs	r1, #128	; 0x80
 800069e:	4803      	ldr	r0, [pc, #12]	; (80006ac <led_green_blink+0x30>)
 80006a0:	f001 fda3 	bl	80021ea <HAL_GPIO_TogglePin>
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40010c00 	.word	0x40010c00
 80006ac:	40011000 	.word	0x40011000

080006b0 <led_yellow_blink>:
void led_yellow_blink(){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2108      	movs	r1, #8
 80006b8:	4808      	ldr	r0, [pc, #32]	; (80006dc <led_yellow_blink+0x2c>)
 80006ba:	f001 fd7e 	bl	80021ba <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80006be:	2120      	movs	r1, #32
 80006c0:	4806      	ldr	r0, [pc, #24]	; (80006dc <led_yellow_blink+0x2c>)
 80006c2:	f001 fd92 	bl	80021ea <HAL_GPIO_TogglePin>


	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2180      	movs	r1, #128	; 0x80
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <led_yellow_blink+0x30>)
 80006cc:	f001 fd75 	bl	80021ba <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 80006d0:	2140      	movs	r1, #64	; 0x40
 80006d2:	4802      	ldr	r0, [pc, #8]	; (80006dc <led_yellow_blink+0x2c>)
 80006d4:	f001 fd89 	bl	80021ea <HAL_GPIO_TogglePin>
}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40010c00 	.word	0x40010c00
 80006e0:	40011000 	.word	0x40011000

080006e4 <on_red1_led>:


// 1: D3 - D4
void on_red1_led(){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 80006e8:	2201      	movs	r2, #1
 80006ea:	2120      	movs	r1, #32
 80006ec:	4804      	ldr	r0, [pc, #16]	; (8000700 <on_red1_led+0x1c>)
 80006ee:	f001 fd64 	bl	80021ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 80006f2:	2201      	movs	r2, #1
 80006f4:	2108      	movs	r1, #8
 80006f6:	4802      	ldr	r0, [pc, #8]	; (8000700 <on_red1_led+0x1c>)
 80006f8:	f001 fd5f 	bl	80021ba <HAL_GPIO_WritePin>

}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40010c00 	.word	0x40010c00

08000704 <on_yellow1_led>:
void on_yellow1_led(){
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000708:	2201      	movs	r2, #1
 800070a:	2120      	movs	r1, #32
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <on_yellow1_led+0x1c>)
 800070e:	f001 fd54 	bl	80021ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	2108      	movs	r1, #8
 8000716:	4802      	ldr	r0, [pc, #8]	; (8000720 <on_yellow1_led+0x1c>)
 8000718:	f001 fd4f 	bl	80021ba <HAL_GPIO_WritePin>

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40010c00 	.word	0x40010c00

08000724 <on_green1_led>:
void on_green1_led(){
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000728:	2200      	movs	r2, #0
 800072a:	2120      	movs	r1, #32
 800072c:	4804      	ldr	r0, [pc, #16]	; (8000740 <on_green1_led+0x1c>)
 800072e:	f001 fd44 	bl	80021ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000732:	2201      	movs	r2, #1
 8000734:	2108      	movs	r1, #8
 8000736:	4802      	ldr	r0, [pc, #8]	; (8000740 <on_green1_led+0x1c>)
 8000738:	f001 fd3f 	bl	80021ba <HAL_GPIO_WritePin>
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40010c00 	.word	0x40010c00

08000744 <on_red2_led>:
 // 2: D9 - D10
void on_red2_led(){
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 8000748:	2201      	movs	r2, #1
 800074a:	2180      	movs	r1, #128	; 0x80
 800074c:	4804      	ldr	r0, [pc, #16]	; (8000760 <on_red2_led+0x1c>)
 800074e:	f001 fd34 	bl	80021ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8000752:	2201      	movs	r2, #1
 8000754:	2140      	movs	r1, #64	; 0x40
 8000756:	4803      	ldr	r0, [pc, #12]	; (8000764 <on_red2_led+0x20>)
 8000758:	f001 fd2f 	bl	80021ba <HAL_GPIO_WritePin>

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40011000 	.word	0x40011000
 8000764:	40010c00 	.word	0x40010c00

08000768 <on_yellow2_led>:
void on_yellow2_led(){
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 800076c:	2200      	movs	r2, #0
 800076e:	2180      	movs	r1, #128	; 0x80
 8000770:	4804      	ldr	r0, [pc, #16]	; (8000784 <on_yellow2_led+0x1c>)
 8000772:	f001 fd22 	bl	80021ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8000776:	2201      	movs	r2, #1
 8000778:	2140      	movs	r1, #64	; 0x40
 800077a:	4803      	ldr	r0, [pc, #12]	; (8000788 <on_yellow2_led+0x20>)
 800077c:	f001 fd1d 	bl	80021ba <HAL_GPIO_WritePin>

}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40011000 	.word	0x40011000
 8000788:	40010c00 	.word	0x40010c00

0800078c <on_green2_led>:
void on_green2_led(){
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 8000790:	2201      	movs	r2, #1
 8000792:	2180      	movs	r1, #128	; 0x80
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <on_green2_led+0x1c>)
 8000796:	f001 fd10 	bl	80021ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2140      	movs	r1, #64	; 0x40
 800079e:	4803      	ldr	r0, [pc, #12]	; (80007ac <on_green2_led+0x20>)
 80007a0:	f001 fd0b 	bl	80021ba <HAL_GPIO_WritePin>
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40011000 	.word	0x40011000
 80007ac:	40010c00 	.word	0x40010c00

080007b0 <modify_red_duration>:
void off_led2(){
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
}
void modify_red_duration()
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0

	led_red_blink();
 80007b4:	f7ff ff1a 	bl	80005ec <led_red_blink>
}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}

080007bc <modify_yellow_duration>:
void modify_yellow_duration()
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0


	led_yellow_blink();
 80007c0:	f7ff ff76 	bl	80006b0 <led_yellow_blink>
}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <modify_green_duration>:
void modify_green_duration()
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0

	led_green_blink();
 80007cc:	f7ff ff56 	bl	800067c <led_green_blink>
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <updatemode>:
uint8_t digit1, digit2,digit3,digit4 ;
int mode=1;



void updatemode(int modee){
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	mode=modee;
 80007dc:	4a03      	ldr	r2, [pc, #12]	; (80007ec <updatemode+0x18>)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6013      	str	r3, [r2, #0]
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr
 80007ec:	20000004 	.word	0x20000004

080007f0 <timeledlight>:
int new_yellow_duration = 0;
int new_green_duration = 0;
char str_num11[10];
char str_num22[10];
char str_mode[10];
void timeledlight(){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	//display2number(num11, num22);
	sprintf(str_num11, "%d", num11);   // Convert integer to string
 80007f4:	4b15      	ldr	r3, [pc, #84]	; (800084c <timeledlight+0x5c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	4915      	ldr	r1, [pc, #84]	; (8000850 <timeledlight+0x60>)
 80007fc:	4815      	ldr	r0, [pc, #84]	; (8000854 <timeledlight+0x64>)
 80007fe:	f003 fb93 	bl	8003f28 <siprintf>
	sprintf(str_num22, "%d", num22); // Convert float to string with 2 decimal places
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <timeledlight+0x68>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	461a      	mov	r2, r3
 8000808:	4911      	ldr	r1, [pc, #68]	; (8000850 <timeledlight+0x60>)
 800080a:	4814      	ldr	r0, [pc, #80]	; (800085c <timeledlight+0x6c>)
 800080c:	f003 fb8c 	bl	8003f28 <siprintf>
	sprintf(str_mode, "%d", mode);
 8000810:	4b13      	ldr	r3, [pc, #76]	; (8000860 <timeledlight+0x70>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	461a      	mov	r2, r3
 8000816:	490e      	ldr	r1, [pc, #56]	; (8000850 <timeledlight+0x60>)
 8000818:	4812      	ldr	r0, [pc, #72]	; (8000864 <timeledlight+0x74>)
 800081a:	f003 fb85 	bl	8003f28 <siprintf>
	// Display on the LCD
	lcd_goto_XY(1, 11);
 800081e:	210b      	movs	r1, #11
 8000820:	2001      	movs	r0, #1
 8000822:	f7ff fd54 	bl	80002ce <lcd_goto_XY>
	lcd_send_string(str_mode);
 8000826:	480f      	ldr	r0, [pc, #60]	; (8000864 <timeledlight+0x74>)
 8000828:	f7ff fd3c 	bl	80002a4 <lcd_send_string>

	lcd_goto_XY(0, 6);
 800082c:	2106      	movs	r1, #6
 800082e:	2000      	movs	r0, #0
 8000830:	f7ff fd4d 	bl	80002ce <lcd_goto_XY>
	lcd_send_string(str_num11);
 8000834:	4807      	ldr	r0, [pc, #28]	; (8000854 <timeledlight+0x64>)
 8000836:	f7ff fd35 	bl	80002a4 <lcd_send_string>

	lcd_goto_XY(0, 15);
 800083a:	210f      	movs	r1, #15
 800083c:	2000      	movs	r0, #0
 800083e:	f7ff fd46 	bl	80002ce <lcd_goto_XY>
	lcd_send_string(str_num22);
 8000842:	4806      	ldr	r0, [pc, #24]	; (800085c <timeledlight+0x6c>)
 8000844:	f7ff fd2e 	bl	80002a4 <lcd_send_string>

}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	200000d8 	.word	0x200000d8
 8000850:	08004854 	.word	0x08004854
 8000854:	200000ec 	.word	0x200000ec
 8000858:	200000dc 	.word	0x200000dc
 800085c:	200000f8 	.word	0x200000f8
 8000860:	20000004 	.word	0x20000004
 8000864:	20000104 	.word	0x20000104

08000868 <normalstate>:
void normalstate(){
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3 | GPIO_PIN_5 |GPIO_PIN_6, GPIO_PIN_RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	2168      	movs	r1, #104	; 0x68
 8000870:	4845      	ldr	r0, [pc, #276]	; (8000988 <normalstate+0x120>)
 8000872:	f001 fca2 	bl	80021ba <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7 , GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	2180      	movs	r1, #128	; 0x80
 800087a:	4844      	ldr	r0, [pc, #272]	; (800098c <normalstate+0x124>)
 800087c:	f001 fc9d 	bl	80021ba <HAL_GPIO_WritePin>

	if (cntred >= 0) {
 8000880:	4b43      	ldr	r3, [pc, #268]	; (8000990 <normalstate+0x128>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	db09      	blt.n	800089c <normalstate+0x34>
		num11=cntred--;
 8000888:	4b41      	ldr	r3, [pc, #260]	; (8000990 <normalstate+0x128>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	1e5a      	subs	r2, r3, #1
 800088e:	4940      	ldr	r1, [pc, #256]	; (8000990 <normalstate+0x128>)
 8000890:	600a      	str	r2, [r1, #0]
 8000892:	4a40      	ldr	r2, [pc, #256]	; (8000994 <normalstate+0x12c>)
 8000894:	6013      	str	r3, [r2, #0]

		on_red2_led();
 8000896:	f7ff ff55 	bl	8000744 <on_red2_led>
 800089a:	e01a      	b.n	80008d2 <normalstate+0x6a>
	}
	else if (cntgr >= 0)  	{
 800089c:	4b3e      	ldr	r3, [pc, #248]	; (8000998 <normalstate+0x130>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	db09      	blt.n	80008b8 <normalstate+0x50>

		on_green2_led();
 80008a4:	f7ff ff72 	bl	800078c <on_green2_led>

		num11=cntgr--;
 80008a8:	4b3b      	ldr	r3, [pc, #236]	; (8000998 <normalstate+0x130>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	1e5a      	subs	r2, r3, #1
 80008ae:	493a      	ldr	r1, [pc, #232]	; (8000998 <normalstate+0x130>)
 80008b0:	600a      	str	r2, [r1, #0]
 80008b2:	4a38      	ldr	r2, [pc, #224]	; (8000994 <normalstate+0x12c>)
 80008b4:	6013      	str	r3, [r2, #0]
 80008b6:	e00c      	b.n	80008d2 <normalstate+0x6a>
	}
	else if (cntye >= 0) 	{
 80008b8:	4b38      	ldr	r3, [pc, #224]	; (800099c <normalstate+0x134>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	db08      	blt.n	80008d2 <normalstate+0x6a>
		num11=cntye--;
 80008c0:	4b36      	ldr	r3, [pc, #216]	; (800099c <normalstate+0x134>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	1e5a      	subs	r2, r3, #1
 80008c6:	4935      	ldr	r1, [pc, #212]	; (800099c <normalstate+0x134>)
 80008c8:	600a      	str	r2, [r1, #0]
 80008ca:	4a32      	ldr	r2, [pc, #200]	; (8000994 <normalstate+0x12c>)
 80008cc:	6013      	str	r3, [r2, #0]

		on_yellow2_led();
 80008ce:	f7ff ff4b 	bl	8000768 <on_yellow2_led>
	}

	if (cntgr2 >= 0)  	{
 80008d2:	4b33      	ldr	r3, [pc, #204]	; (80009a0 <normalstate+0x138>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	db09      	blt.n	80008ee <normalstate+0x86>
		num22=cntgr2--;
 80008da:	4b31      	ldr	r3, [pc, #196]	; (80009a0 <normalstate+0x138>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	1e5a      	subs	r2, r3, #1
 80008e0:	492f      	ldr	r1, [pc, #188]	; (80009a0 <normalstate+0x138>)
 80008e2:	600a      	str	r2, [r1, #0]
 80008e4:	4a2f      	ldr	r2, [pc, #188]	; (80009a4 <normalstate+0x13c>)
 80008e6:	6013      	str	r3, [r2, #0]

		on_green1_led();
 80008e8:	f7ff ff1c 	bl	8000724 <on_green1_led>
 80008ec:	e01a      	b.n	8000924 <normalstate+0xbc>

	}
	else if (cntye2 >= 0) 	{
 80008ee:	4b2e      	ldr	r3, [pc, #184]	; (80009a8 <normalstate+0x140>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	db09      	blt.n	800090a <normalstate+0xa2>
		num22=cntye2--;
 80008f6:	4b2c      	ldr	r3, [pc, #176]	; (80009a8 <normalstate+0x140>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	1e5a      	subs	r2, r3, #1
 80008fc:	492a      	ldr	r1, [pc, #168]	; (80009a8 <normalstate+0x140>)
 80008fe:	600a      	str	r2, [r1, #0]
 8000900:	4a28      	ldr	r2, [pc, #160]	; (80009a4 <normalstate+0x13c>)
 8000902:	6013      	str	r3, [r2, #0]

		on_yellow1_led();
 8000904:	f7ff fefe 	bl	8000704 <on_yellow1_led>
 8000908:	e00c      	b.n	8000924 <normalstate+0xbc>
	}
	else if (cntred2 >= 0) 	{
 800090a:	4b28      	ldr	r3, [pc, #160]	; (80009ac <normalstate+0x144>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2b00      	cmp	r3, #0
 8000910:	db08      	blt.n	8000924 <normalstate+0xbc>
		num22=cntred2--;
 8000912:	4b26      	ldr	r3, [pc, #152]	; (80009ac <normalstate+0x144>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	1e5a      	subs	r2, r3, #1
 8000918:	4924      	ldr	r1, [pc, #144]	; (80009ac <normalstate+0x144>)
 800091a:	600a      	str	r2, [r1, #0]
 800091c:	4a21      	ldr	r2, [pc, #132]	; (80009a4 <normalstate+0x13c>)
 800091e:	6013      	str	r3, [r2, #0]

		on_red1_led();
 8000920:	f7ff fee0 	bl	80006e4 <on_red1_led>
	}

	if (cntred2 < 0 && cntgr2 < 0 && cntye2 < 0) {
 8000924:	4b21      	ldr	r3, [pc, #132]	; (80009ac <normalstate+0x144>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	da13      	bge.n	8000954 <normalstate+0xec>
 800092c:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <normalstate+0x138>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	da0f      	bge.n	8000954 <normalstate+0xec>
 8000934:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <normalstate+0x140>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	da0b      	bge.n	8000954 <normalstate+0xec>
		cntred2 = red_duration;
 800093c:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <normalstate+0x148>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a1a      	ldr	r2, [pc, #104]	; (80009ac <normalstate+0x144>)
 8000942:	6013      	str	r3, [r2, #0]
		cntgr2 = green_duration ;
 8000944:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <normalstate+0x14c>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a15      	ldr	r2, [pc, #84]	; (80009a0 <normalstate+0x138>)
 800094a:	6013      	str	r3, [r2, #0]
		cntye2 = yellow_duration;
 800094c:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <normalstate+0x150>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a15      	ldr	r2, [pc, #84]	; (80009a8 <normalstate+0x140>)
 8000952:	6013      	str	r3, [r2, #0]
	}

	if (cntred < 0 && cntgr < 0 && cntye < 0) {
 8000954:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <normalstate+0x128>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	da13      	bge.n	8000984 <normalstate+0x11c>
 800095c:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <normalstate+0x130>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	da0f      	bge.n	8000984 <normalstate+0x11c>
 8000964:	4b0d      	ldr	r3, [pc, #52]	; (800099c <normalstate+0x134>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	da0b      	bge.n	8000984 <normalstate+0x11c>
		cntred = red_duration;
 800096c:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <normalstate+0x148>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a07      	ldr	r2, [pc, #28]	; (8000990 <normalstate+0x128>)
 8000972:	6013      	str	r3, [r2, #0]
		cntgr = green_duration ;
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <normalstate+0x14c>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a07      	ldr	r2, [pc, #28]	; (8000998 <normalstate+0x130>)
 800097a:	6013      	str	r3, [r2, #0]
		cntye = yellow_duration;
 800097c:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <normalstate+0x150>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a06      	ldr	r2, [pc, #24]	; (800099c <normalstate+0x134>)
 8000982:	6013      	str	r3, [r2, #0]
	}
}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40010c00 	.word	0x40010c00
 800098c:	40011000 	.word	0x40011000
 8000990:	20000008 	.word	0x20000008
 8000994:	200000d8 	.word	0x200000d8
 8000998:	20000010 	.word	0x20000010
 800099c:	2000000c 	.word	0x2000000c
 80009a0:	2000001c 	.word	0x2000001c
 80009a4:	200000dc 	.word	0x200000dc
 80009a8:	20000018 	.word	0x20000018
 80009ac:	20000014 	.word	0x20000014
 80009b0:	20000020 	.word	0x20000020
 80009b4:	20000028 	.word	0x20000028
 80009b8:	20000024 	.word	0x20000024

080009bc <update_numbers>:

void update_numbers(int duration) {
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
    num11 = duration;
 80009c4:	4a05      	ldr	r2, [pc, #20]	; (80009dc <update_numbers+0x20>)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6013      	str	r3, [r2, #0]
    num22 = duration;
 80009ca:	4a05      	ldr	r2, [pc, #20]	; (80009e0 <update_numbers+0x24>)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	6013      	str	r3, [r2, #0]
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	200000d8 	.word	0x200000d8
 80009e0:	200000dc 	.word	0x200000dc

080009e4 <increment_duration>:
void increment_duration(int *new_duration) {
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
    *new_duration += 1;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	1c5a      	adds	r2, r3, #1
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	601a      	str	r2, [r3, #0]
    if (*new_duration > 10) {
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2b0a      	cmp	r3, #10
 80009fc:	dd02      	ble.n	8000a04 <increment_duration+0x20>
        *new_duration = 1;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2201      	movs	r2, #1
 8000a02:	601a      	str	r2, [r3, #0]
    }
    num11 = *new_duration;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a05      	ldr	r2, [pc, #20]	; (8000a20 <increment_duration+0x3c>)
 8000a0a:	6013      	str	r3, [r2, #0]
    num22 = *new_duration;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a04      	ldr	r2, [pc, #16]	; (8000a24 <increment_duration+0x40>)
 8000a12:	6013      	str	r3, [r2, #0]
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	200000d8 	.word	0x200000d8
 8000a24:	200000dc 	.word	0x200000dc

08000a28 <save_duration>:

void save_duration(int *new_duration, int *active_duration) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
    if (*new_duration > 0) {
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	dd0b      	ble.n	8000a52 <save_duration+0x2a>
        *active_duration = *new_duration;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	601a      	str	r2, [r3, #0]
        *new_duration = 0;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
        update_numbers(*active_duration);
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff ffb5 	bl	80009bc <update_numbers>
    }
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <but2_red>:
// Button 2
void but2_red(){ increment_duration(&new_red_duration);}
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	4802      	ldr	r0, [pc, #8]	; (8000a6c <but2_red+0x10>)
 8000a62:	f7ff ffbf 	bl	80009e4 <increment_duration>
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200000e0 	.word	0x200000e0

08000a70 <but2_ye>:
void but2_ye() { increment_duration(&new_yellow_duration);}
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	4802      	ldr	r0, [pc, #8]	; (8000a80 <but2_ye+0x10>)
 8000a76:	f7ff ffb5 	bl	80009e4 <increment_duration>
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200000e4 	.word	0x200000e4

08000a84 <but2_gr>:
void but2_gr() { increment_duration(&new_green_duration);}
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	4802      	ldr	r0, [pc, #8]	; (8000a94 <but2_gr+0x10>)
 8000a8a:	f7ff ffab 	bl	80009e4 <increment_duration>
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200000e8 	.word	0x200000e8

08000a98 <but3_red>:

// Button 3
void but3_red(){save_duration(&new_red_duration,  	&red_duration);}
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	4902      	ldr	r1, [pc, #8]	; (8000aa8 <but3_red+0x10>)
 8000a9e:	4803      	ldr	r0, [pc, #12]	; (8000aac <but3_red+0x14>)
 8000aa0:	f7ff ffc2 	bl	8000a28 <save_duration>
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000020 	.word	0x20000020
 8000aac:	200000e0 	.word	0x200000e0

08000ab0 <but3_ye>:
void but3_ye() {save_duration(&new_yellow_duration, &yellow_duration);}
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	4902      	ldr	r1, [pc, #8]	; (8000ac0 <but3_ye+0x10>)
 8000ab6:	4803      	ldr	r0, [pc, #12]	; (8000ac4 <but3_ye+0x14>)
 8000ab8:	f7ff ffb6 	bl	8000a28 <save_duration>
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000024 	.word	0x20000024
 8000ac4:	200000e4 	.word	0x200000e4

08000ac8 <but3_gr>:
void but3_gr() {save_duration(&new_green_duration, 	&green_duration);}
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	4902      	ldr	r1, [pc, #8]	; (8000ad8 <but3_gr+0x10>)
 8000ace:	4803      	ldr	r0, [pc, #12]	; (8000adc <but3_gr+0x14>)
 8000ad0:	f7ff ffaa 	bl	8000a28 <save_duration>
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000028 	.word	0x20000028
 8000adc:	200000e8 	.word	0x200000e8

08000ae0 <HAL_ADC_ConvCpltCallback>:
ADC_HandleTypeDef hadc1;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef * hadc){
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]

}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc80      	pop	{r7}
 8000af0:	4770      	bx	lr

08000af2 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b082      	sub	sp, #8
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
	  SCH_Update();  // Cập nhật scheduler mỗi 1ms
 8000afa:	f000 fa95 	bl	8001028 <SCH_Update>

	}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b0c:	f000 fd44 	bl	8001598 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b10:	f000 f836 	bl	8000b80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b14:	f000 f96c 	bl	8000df0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b18:	f000 f940 	bl	8000d9c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000b1c:	f000 f8c4 	bl	8000ca8 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000b20:	f000 f884 	bl	8000c2c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000b24:	f000 f8ee 	bl	8000d04 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000b28:	f7ff fb70 	bl	800020c <lcd_init>
  //lcd_clear();
  HAL_TIM_Base_Start_IT(&htim2);
 8000b2c:	480f      	ldr	r0, [pc, #60]	; (8000b6c <main+0x64>)
 8000b2e:	f002 fd49 	bl	80035c4 <HAL_TIM_Base_Start_IT>
  SCH_Init();
 8000b32:	f000 fa17 	bl	8000f64 <SCH_Init>
  //HAL_ADC_Start_IT(&hadc1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Add_Task(timeledlight, 0, 1);
 8000b36:	2201      	movs	r2, #1
 8000b38:	2100      	movs	r1, #0
 8000b3a:	480d      	ldr	r0, [pc, #52]	; (8000b70 <main+0x68>)
 8000b3c:	f000 fa1e 	bl	8000f7c <SCH_Add_Task>
  SCH_Add_Task(button_reading, 1, 1);
 8000b40:	2201      	movs	r2, #1
 8000b42:	2101      	movs	r1, #1
 8000b44:	480b      	ldr	r0, [pc, #44]	; (8000b74 <main+0x6c>)
 8000b46:	f000 fa19 	bl	8000f7c <SCH_Add_Task>
  SCH_Add_Task(handle_mode, 3, 10);
 8000b4a:	220a      	movs	r2, #10
 8000b4c:	2103      	movs	r1, #3
 8000b4e:	480a      	ldr	r0, [pc, #40]	; (8000b78 <main+0x70>)
 8000b50:	f000 fa14 	bl	8000f7c <SCH_Add_Task>
  SCH_Add_Task(fsm_for_input_processing, 4, 1);
 8000b54:	2201      	movs	r2, #1
 8000b56:	2104      	movs	r1, #4
 8000b58:	4808      	ldr	r0, [pc, #32]	; (8000b7c <main+0x74>)
 8000b5a:	f000 fa0f 	bl	8000f7c <SCH_Add_Task>
//  SCH_Add_Task(timeledlight, 500, 500);
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8000b5e:	f000 faf7 	bl	8001150 <SCH_Dispatch_Tasks>
	  lcd_goto_XY(1, 0);
 8000b62:	2100      	movs	r1, #0
 8000b64:	2001      	movs	r0, #1
 8000b66:	f7ff fbb2 	bl	80002ce <lcd_goto_XY>
	  SCH_Dispatch_Tasks();
 8000b6a:	e7f8      	b.n	8000b5e <main+0x56>
 8000b6c:	20000110 	.word	0x20000110
 8000b70:	080007f1 	.word	0x080007f1
 8000b74:	08000515 	.word	0x08000515
 8000b78:	08000315 	.word	0x08000315
 8000b7c:	08000435 	.word	0x08000435

08000b80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b094      	sub	sp, #80	; 0x50
 8000b84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b8a:	2228      	movs	r2, #40	; 0x28
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f003 f9c2 	bl	8003f18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bb8:	2310      	movs	r3, #16
 8000bba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f001 ffe3 	bl	8002b98 <HAL_RCC_OscConfig>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000bd8:	f000 f9be 	bl	8000f58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bdc:	230f      	movs	r3, #15
 8000bde:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be0:	2302      	movs	r3, #2
 8000be2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000be8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bec:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f002 fa4f 	bl	800309c <HAL_RCC_ClockConfig>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000c04:	f000 f9a8 	bl	8000f58 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	4618      	mov	r0, r3
 8000c14:	f002 fbd0 	bl	80033b8 <HAL_RCCEx_PeriphCLKConfig>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000c1e:	f000 f99b 	bl	8000f58 <Error_Handler>
  }
}
 8000c22:	bf00      	nop
 8000c24:	3750      	adds	r7, #80	; 0x50
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c3c:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <MX_ADC1_Init+0x74>)
 8000c3e:	4a19      	ldr	r2, [pc, #100]	; (8000ca4 <MX_ADC1_Init+0x78>)
 8000c40:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c42:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <MX_ADC1_Init+0x74>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c48:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <MX_ADC1_Init+0x74>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c4e:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <MX_ADC1_Init+0x74>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <MX_ADC1_Init+0x74>)
 8000c56:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000c5a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c5c:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <MX_ADC1_Init+0x74>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000c62:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <MX_ADC1_Init+0x74>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c68:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <MX_ADC1_Init+0x74>)
 8000c6a:	f000 fd1b 	bl	80016a4 <HAL_ADC_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000c74:	f000 f970 	bl	8000f58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	4619      	mov	r1, r3
 8000c88:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <MX_ADC1_Init+0x74>)
 8000c8a:	f000 feab 	bl	80019e4 <HAL_ADC_ConfigChannel>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000c94:	f000 f960 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c98:	bf00      	nop
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000158 	.word	0x20000158
 8000ca4:	40012400 	.word	0x40012400

08000ca8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <MX_I2C1_Init+0x50>)
 8000cae:	4a13      	ldr	r2, [pc, #76]	; (8000cfc <MX_I2C1_Init+0x54>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <MX_I2C1_Init+0x50>)
 8000cb4:	4a12      	ldr	r2, [pc, #72]	; (8000d00 <MX_I2C1_Init+0x58>)
 8000cb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <MX_I2C1_Init+0x50>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <MX_I2C1_Init+0x50>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <MX_I2C1_Init+0x50>)
 8000cc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ccc:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <MX_I2C1_Init+0x50>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cd2:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <MX_I2C1_Init+0x50>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cd8:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <MX_I2C1_Init+0x50>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <MX_I2C1_Init+0x50>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ce4:	4804      	ldr	r0, [pc, #16]	; (8000cf8 <MX_I2C1_Init+0x50>)
 8000ce6:	f001 fabb 	bl	8002260 <HAL_I2C_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cf0:	f000 f932 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000188 	.word	0x20000188
 8000cfc:	40005400 	.word	0x40005400
 8000d00:	000186a0 	.word	0x000186a0

08000d04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d0a:	f107 0308 	add.w	r3, r7, #8
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d18:	463b      	mov	r3, r7
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d20:	4b1d      	ldr	r3, [pc, #116]	; (8000d98 <MX_TIM2_Init+0x94>)
 8000d22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8000d28:	4b1b      	ldr	r3, [pc, #108]	; (8000d98 <MX_TIM2_Init+0x94>)
 8000d2a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000d2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d30:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <MX_TIM2_Init+0x94>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000d36:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <MX_TIM2_Init+0x94>)
 8000d38:	2209      	movs	r2, #9
 8000d3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d3c:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <MX_TIM2_Init+0x94>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d42:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <MX_TIM2_Init+0x94>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d48:	4813      	ldr	r0, [pc, #76]	; (8000d98 <MX_TIM2_Init+0x94>)
 8000d4a:	f002 fbeb 	bl	8003524 <HAL_TIM_Base_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d54:	f000 f900 	bl	8000f58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d5e:	f107 0308 	add.w	r3, r7, #8
 8000d62:	4619      	mov	r1, r3
 8000d64:	480c      	ldr	r0, [pc, #48]	; (8000d98 <MX_TIM2_Init+0x94>)
 8000d66:	f002 fd6f 	bl	8003848 <HAL_TIM_ConfigClockSource>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d70:	f000 f8f2 	bl	8000f58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d74:	2300      	movs	r3, #0
 8000d76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d7c:	463b      	mov	r3, r7
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4805      	ldr	r0, [pc, #20]	; (8000d98 <MX_TIM2_Init+0x94>)
 8000d82:	f002 ff51 	bl	8003c28 <HAL_TIMEx_MasterConfigSynchronization>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d8c:	f000 f8e4 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d90:	bf00      	nop
 8000d92:	3718      	adds	r7, #24
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20000110 	.word	0x20000110

08000d9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000da2:	4a12      	ldr	r2, [pc, #72]	; (8000dec <MX_USART2_UART_Init+0x50>)
 8000da4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000da6:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000da8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dae:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dba:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dc0:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000dc2:	220c      	movs	r2, #12
 8000dc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc6:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dd2:	4805      	ldr	r0, [pc, #20]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000dd4:	f002 ff98 	bl	8003d08 <HAL_UART_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dde:	f000 f8bb 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200001dc 	.word	0x200001dc
 8000dec:	40004400 	.word	0x40004400

08000df0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df6:	f107 0310 	add.w	r3, r7, #16
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e04:	4b4f      	ldr	r3, [pc, #316]	; (8000f44 <MX_GPIO_Init+0x154>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	4a4e      	ldr	r2, [pc, #312]	; (8000f44 <MX_GPIO_Init+0x154>)
 8000e0a:	f043 0310 	orr.w	r3, r3, #16
 8000e0e:	6193      	str	r3, [r2, #24]
 8000e10:	4b4c      	ldr	r3, [pc, #304]	; (8000f44 <MX_GPIO_Init+0x154>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	f003 0310 	and.w	r3, r3, #16
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e1c:	4b49      	ldr	r3, [pc, #292]	; (8000f44 <MX_GPIO_Init+0x154>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	4a48      	ldr	r2, [pc, #288]	; (8000f44 <MX_GPIO_Init+0x154>)
 8000e22:	f043 0320 	orr.w	r3, r3, #32
 8000e26:	6193      	str	r3, [r2, #24]
 8000e28:	4b46      	ldr	r3, [pc, #280]	; (8000f44 <MX_GPIO_Init+0x154>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	f003 0320 	and.w	r3, r3, #32
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e34:	4b43      	ldr	r3, [pc, #268]	; (8000f44 <MX_GPIO_Init+0x154>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	4a42      	ldr	r2, [pc, #264]	; (8000f44 <MX_GPIO_Init+0x154>)
 8000e3a:	f043 0304 	orr.w	r3, r3, #4
 8000e3e:	6193      	str	r3, [r2, #24]
 8000e40:	4b40      	ldr	r3, [pc, #256]	; (8000f44 <MX_GPIO_Init+0x154>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	f003 0304 	and.w	r3, r3, #4
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4c:	4b3d      	ldr	r3, [pc, #244]	; (8000f44 <MX_GPIO_Init+0x154>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	4a3c      	ldr	r2, [pc, #240]	; (8000f44 <MX_GPIO_Init+0x154>)
 8000e52:	f043 0308 	orr.w	r3, r3, #8
 8000e56:	6193      	str	r3, [r2, #24]
 8000e58:	4b3a      	ldr	r3, [pc, #232]	; (8000f44 <MX_GPIO_Init+0x154>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	f003 0308 	and.w	r3, r3, #8
 8000e60:	603b      	str	r3, [r7, #0]
 8000e62:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2120      	movs	r1, #32
 8000e68:	4837      	ldr	r0, [pc, #220]	; (8000f48 <MX_GPIO_Init+0x158>)
 8000e6a:	f001 f9a6 	bl	80021ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e74:	4b35      	ldr	r3, [pc, #212]	; (8000f4c <MX_GPIO_Init+0x15c>)
 8000e76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f107 0310 	add.w	r3, r7, #16
 8000e80:	4619      	mov	r1, r3
 8000e82:	4833      	ldr	r0, [pc, #204]	; (8000f50 <MX_GPIO_Init+0x160>)
 8000e84:	f000 fffe 	bl	8001e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e88:	2320      	movs	r3, #32
 8000e8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	2302      	movs	r3, #2
 8000e96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e98:	f107 0310 	add.w	r3, r7, #16
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	482a      	ldr	r0, [pc, #168]	; (8000f48 <MX_GPIO_Init+0x158>)
 8000ea0:	f000 fff0 	bl	8001e84 <HAL_GPIO_Init>
  /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, red1_Pin|yellow1_Pin|green1_Pin|red2_Pin
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f249 01f8 	movw	r1, #37112	; 0x90f8
 8000eaa:	482a      	ldr	r0, [pc, #168]	; (8000f54 <MX_GPIO_Init+0x164>)
 8000eac:	f001 f985 	bl	80021ba <HAL_GPIO_WritePin>
                            |yellow2_Pin|green2_Pin|EN1_Pin|EN2_Pin
                            |EN3_Pin|EN4_Pin|mode_Pin|GPIO_PIN_6, GPIO_PIN_RESET);

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2180      	movs	r1, #128	; 0x80
 8000eb4:	4826      	ldr	r0, [pc, #152]	; (8000f50 <MX_GPIO_Init+0x160>)
 8000eb6:	f001 f980 	bl	80021ba <HAL_GPIO_WritePin>

    /* Configure GPIO pins for GPIOC: PC7 */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000eba:	2380      	movs	r3, #128	; 0x80
 8000ebc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eca:	f107 0310 	add.w	r3, r7, #16
 8000ece:	4619      	mov	r1, r3
 8000ed0:	481f      	ldr	r0, [pc, #124]	; (8000f50 <MX_GPIO_Init+0x160>)
 8000ed2:	f000 ffd7 	bl	8001e84 <HAL_GPIO_Init>

    /* Configure GPIO pins for GPIOB: PB6 */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ed6:	2340      	movs	r3, #64	; 0x40
 8000ed8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eda:	f107 0310 	add.w	r3, r7, #16
 8000ede:	4619      	mov	r1, r3
 8000ee0:	481c      	ldr	r0, [pc, #112]	; (8000f54 <MX_GPIO_Init+0x164>)
 8000ee2:	f000 ffcf 	bl	8001e84 <HAL_GPIO_Init>

    /* Configure other GPIO pins as needed */
    GPIO_InitStruct.Pin = red1_Pin|yellow1_Pin|green1_Pin|red2_Pin
 8000ee6:	f249 03f8 	movw	r3, #37112	; 0x90f8
 8000eea:	613b      	str	r3, [r7, #16]
                            |yellow2_Pin|green2_Pin|EN1_Pin|EN2_Pin
                            |EN3_Pin|EN4_Pin|mode_Pin;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eec:	f107 0310 	add.w	r3, r7, #16
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4818      	ldr	r0, [pc, #96]	; (8000f54 <MX_GPIO_Init+0x164>)
 8000ef4:	f000 ffc6 	bl	8001e84 <HAL_GPIO_Init>

    /* Configure input pins for buttons */
    GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin;
 8000ef8:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8000efc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f02:	2301      	movs	r3, #1
 8000f04:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f06:	f107 0310 	add.w	r3, r7, #16
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4811      	ldr	r0, [pc, #68]	; (8000f54 <MX_GPIO_Init+0x164>)
 8000f0e:	f000 ffb9 	bl	8001e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUTTON_3_Pin|BUTTON_4_Pin;
 8000f12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f16:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	61bb      	str	r3, [r7, #24]
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f20:	f107 0310 	add.w	r3, r7, #16
 8000f24:	4619      	mov	r1, r3
 8000f26:	4808      	ldr	r0, [pc, #32]	; (8000f48 <MX_GPIO_Init+0x158>)
 8000f28:	f000 ffac 	bl	8001e84 <HAL_GPIO_Init>
  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2100      	movs	r1, #0
 8000f30:	2028      	movs	r0, #40	; 0x28
 8000f32:	f000 ff70 	bl	8001e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f36:	2028      	movs	r0, #40	; 0x28
 8000f38:	f000 ff89 	bl	8001e4e <HAL_NVIC_EnableIRQ>

}
 8000f3c:	bf00      	nop
 8000f3e:	3720      	adds	r7, #32
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40021000 	.word	0x40021000
 8000f48:	40010800 	.word	0x40010800
 8000f4c:	10110000 	.word	0x10110000
 8000f50:	40011000 	.word	0x40011000
 8000f54:	40010c00 	.word	0x40010c00

08000f58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f5c:	b672      	cpsid	i
}
 8000f5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <Error_Handler+0x8>
	...

08000f64 <SCH_Init>:

sTasks SCH_tasks_G[SCH_MAX_TASKS];

uint8_t current_index_task = 0;

void SCH_Init(void){
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
	current_index_task=0;
 8000f68:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <SCH_Init+0x14>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
//	        SCH_tasks_G[i].Period = 0;
//	        SCH_tasks_G[i].RunMe = 0;
//	        SCH_tasks_G[i].TaskID = 0xFF; // Assuming 0xFF means unused
//	    }

}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	20000544 	.word	0x20000544

08000f7c <SCH_Add_Task>:

void SCH_Add_Task ( void (*pFunction)(),
					uint32_t DELAY,
					uint32_t PERIOD){
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
	if(current_index_task < SCH_MAX_TASKS){
 8000f88:	4b25      	ldr	r3, [pc, #148]	; (8001020 <SCH_Add_Task+0xa4>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b27      	cmp	r3, #39	; 0x27
 8000f8e:	d842      	bhi.n	8001016 <SCH_Add_Task+0x9a>
		SCH_tasks_G[current_index_task].pTask=pFunction;
 8000f90:	4b23      	ldr	r3, [pc, #140]	; (8001020 <SCH_Add_Task+0xa4>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4619      	mov	r1, r3
 8000f96:	4a23      	ldr	r2, [pc, #140]	; (8001024 <SCH_Add_Task+0xa8>)
 8000f98:	460b      	mov	r3, r1
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Delay=DELAY;
 8000fa6:	4b1e      	ldr	r3, [pc, #120]	; (8001020 <SCH_Add_Task+0xa4>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	4619      	mov	r1, r3
 8000fac:	4a1d      	ldr	r2, [pc, #116]	; (8001024 <SCH_Add_Task+0xa8>)
 8000fae:	460b      	mov	r3, r1
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	3304      	adds	r3, #4
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Period=PERIOD;
 8000fbe:	4b18      	ldr	r3, [pc, #96]	; (8001020 <SCH_Add_Task+0xa4>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4a17      	ldr	r2, [pc, #92]	; (8001024 <SCH_Add_Task+0xa8>)
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	440b      	add	r3, r1
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	4413      	add	r3, r2
 8000fd0:	3308      	adds	r3, #8
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].RunMe=0;
 8000fd6:	4b12      	ldr	r3, [pc, #72]	; (8001020 <SCH_Add_Task+0xa4>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4a11      	ldr	r2, [pc, #68]	; (8001024 <SCH_Add_Task+0xa8>)
 8000fde:	460b      	mov	r3, r1
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	4413      	add	r3, r2
 8000fe8:	330c      	adds	r3, #12
 8000fea:	2200      	movs	r2, #0
 8000fec:	701a      	strb	r2, [r3, #0]

		SCH_tasks_G[current_index_task].TaskID=current_index_task;
 8000fee:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <SCH_Add_Task+0xa4>)
 8000ff0:	781a      	ldrb	r2, [r3, #0]
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <SCH_Add_Task+0xa4>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <SCH_Add_Task+0xa8>)
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	440b      	add	r3, r1
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	4413      	add	r3, r2
 8001006:	3310      	adds	r3, #16
 8001008:	6018      	str	r0, [r3, #0]

		current_index_task++ ;
 800100a:	4b05      	ldr	r3, [pc, #20]	; (8001020 <SCH_Add_Task+0xa4>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	3301      	adds	r3, #1
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4b03      	ldr	r3, [pc, #12]	; (8001020 <SCH_Add_Task+0xa4>)
 8001014:	701a      	strb	r2, [r3, #0]
	}
}
 8001016:	bf00      	nop
 8001018:	3714      	adds	r7, #20
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr
 8001020:	20000544 	.word	0x20000544
 8001024:	20000224 	.word	0x20000224

08001028 <SCH_Update>:


void SCH_Update(void){
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
	for(uint8_t i=0;i<current_index_task;i++){
 800102e:	2300      	movs	r3, #0
 8001030:	71fb      	strb	r3, [r7, #7]
 8001032:	e047      	b.n	80010c4 <SCH_Update+0x9c>
		if(SCH_tasks_G[i].Delay > 0)
 8001034:	79fa      	ldrb	r2, [r7, #7]
 8001036:	4929      	ldr	r1, [pc, #164]	; (80010dc <SCH_Update+0xb4>)
 8001038:	4613      	mov	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	440b      	add	r3, r1
 8001042:	3304      	adds	r3, #4
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d012      	beq.n	8001070 <SCH_Update+0x48>
			SCH_tasks_G[i].Delay --;
 800104a:	79fa      	ldrb	r2, [r7, #7]
 800104c:	4923      	ldr	r1, [pc, #140]	; (80010dc <SCH_Update+0xb4>)
 800104e:	4613      	mov	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	440b      	add	r3, r1
 8001058:	3304      	adds	r3, #4
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	1e59      	subs	r1, r3, #1
 800105e:	481f      	ldr	r0, [pc, #124]	; (80010dc <SCH_Update+0xb4>)
 8001060:	4613      	mov	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	4413      	add	r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4403      	add	r3, r0
 800106a:	3304      	adds	r3, #4
 800106c:	6019      	str	r1, [r3, #0]
 800106e:	e026      	b.n	80010be <SCH_Update+0x96>
		else {
			SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 8001070:	79f9      	ldrb	r1, [r7, #7]
 8001072:	79fa      	ldrb	r2, [r7, #7]
 8001074:	4819      	ldr	r0, [pc, #100]	; (80010dc <SCH_Update+0xb4>)
 8001076:	460b      	mov	r3, r1
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	440b      	add	r3, r1
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4403      	add	r3, r0
 8001080:	3308      	adds	r3, #8
 8001082:	6819      	ldr	r1, [r3, #0]
 8001084:	4815      	ldr	r0, [pc, #84]	; (80010dc <SCH_Update+0xb4>)
 8001086:	4613      	mov	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4413      	add	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4403      	add	r3, r0
 8001090:	3304      	adds	r3, #4
 8001092:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].RunMe+=1;
 8001094:	79fa      	ldrb	r2, [r7, #7]
 8001096:	4911      	ldr	r1, [pc, #68]	; (80010dc <SCH_Update+0xb4>)
 8001098:	4613      	mov	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	4413      	add	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	440b      	add	r3, r1
 80010a2:	330c      	adds	r3, #12
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	79fa      	ldrb	r2, [r7, #7]
 80010a8:	3301      	adds	r3, #1
 80010aa:	b2d8      	uxtb	r0, r3
 80010ac:	490b      	ldr	r1, [pc, #44]	; (80010dc <SCH_Update+0xb4>)
 80010ae:	4613      	mov	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	440b      	add	r3, r1
 80010b8:	330c      	adds	r3, #12
 80010ba:	4602      	mov	r2, r0
 80010bc:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0;i<current_index_task;i++){
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	3301      	adds	r3, #1
 80010c2:	71fb      	strb	r3, [r7, #7]
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <SCH_Update+0xb8>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	79fa      	ldrb	r2, [r7, #7]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d3b2      	bcc.n	8001034 <SCH_Update+0xc>
		}
	}
}
 80010ce:	bf00      	nop
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	20000224 	.word	0x20000224
 80010e0:	20000544 	.word	0x20000544

080010e4 <SCH_Delete_Task>:


void SCH_Delete_Task(uint32_t taskID) {
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
    if (taskID >= SCH_MAX_TASKS) return;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2b27      	cmp	r3, #39	; 0x27
 80010f0:	d827      	bhi.n	8001142 <SCH_Delete_Task+0x5e>
    SCH_tasks_G[taskID].pTask = 0;
 80010f2:	4916      	ldr	r1, [pc, #88]	; (800114c <SCH_Delete_Task+0x68>)
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	4613      	mov	r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	4413      	add	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	440b      	add	r3, r1
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[taskID].Delay = 0;
 8001104:	4911      	ldr	r1, [pc, #68]	; (800114c <SCH_Delete_Task+0x68>)
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	4613      	mov	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	4413      	add	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	440b      	add	r3, r1
 8001112:	3304      	adds	r3, #4
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[taskID].Period = 0;
 8001118:	490c      	ldr	r1, [pc, #48]	; (800114c <SCH_Delete_Task+0x68>)
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	4613      	mov	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	440b      	add	r3, r1
 8001126:	3308      	adds	r3, #8
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[taskID].RunMe = 0;
 800112c:	4907      	ldr	r1, [pc, #28]	; (800114c <SCH_Delete_Task+0x68>)
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	4613      	mov	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	440b      	add	r3, r1
 800113a:	330c      	adds	r3, #12
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
 8001140:	e000      	b.n	8001144 <SCH_Delete_Task+0x60>
    if (taskID >= SCH_MAX_TASKS) return;
 8001142:	bf00      	nop
}
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr
 800114c:	20000224 	.word	0x20000224

08001150 <SCH_Dispatch_Tasks>:
void SCH_Dispatch_Tasks(void){
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < current_index_task; i++) {
 8001156:	2300      	movs	r3, #0
 8001158:	71fb      	strb	r3, [r7, #7]
 800115a:	e041      	b.n	80011e0 <SCH_Dispatch_Tasks+0x90>
		if (SCH_tasks_G[i].RunMe > 0) {
 800115c:	79fa      	ldrb	r2, [r7, #7]
 800115e:	4925      	ldr	r1, [pc, #148]	; (80011f4 <SCH_Dispatch_Tasks+0xa4>)
 8001160:	4613      	mov	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4413      	add	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	440b      	add	r3, r1
 800116a:	330c      	adds	r3, #12
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d033      	beq.n	80011da <SCH_Dispatch_Tasks+0x8a>
			(*SCH_tasks_G[i].pTask)(); // Gọi task
 8001172:	79fa      	ldrb	r2, [r7, #7]
 8001174:	491f      	ldr	r1, [pc, #124]	; (80011f4 <SCH_Dispatch_Tasks+0xa4>)
 8001176:	4613      	mov	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	4413      	add	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	440b      	add	r3, r1
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4798      	blx	r3
			SCH_tasks_G[i].RunMe--;
 8001184:	79fa      	ldrb	r2, [r7, #7]
 8001186:	491b      	ldr	r1, [pc, #108]	; (80011f4 <SCH_Dispatch_Tasks+0xa4>)
 8001188:	4613      	mov	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4413      	add	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	440b      	add	r3, r1
 8001192:	330c      	adds	r3, #12
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	3b01      	subs	r3, #1
 8001198:	b2d8      	uxtb	r0, r3
 800119a:	4916      	ldr	r1, [pc, #88]	; (80011f4 <SCH_Dispatch_Tasks+0xa4>)
 800119c:	4613      	mov	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	440b      	add	r3, r1
 80011a6:	330c      	adds	r3, #12
 80011a8:	4602      	mov	r2, r0
 80011aa:	701a      	strb	r2, [r3, #0]

			if (SCH_tasks_G[i].Period == 0) {
 80011ac:	79fa      	ldrb	r2, [r7, #7]
 80011ae:	4911      	ldr	r1, [pc, #68]	; (80011f4 <SCH_Dispatch_Tasks+0xa4>)
 80011b0:	4613      	mov	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4413      	add	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	440b      	add	r3, r1
 80011ba:	3308      	adds	r3, #8
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d10b      	bne.n	80011da <SCH_Dispatch_Tasks+0x8a>
				SCH_Delete_Task(SCH_tasks_G[i].TaskID); 			}
 80011c2:	79fa      	ldrb	r2, [r7, #7]
 80011c4:	490b      	ldr	r1, [pc, #44]	; (80011f4 <SCH_Dispatch_Tasks+0xa4>)
 80011c6:	4613      	mov	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4413      	add	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	440b      	add	r3, r1
 80011d0:	3310      	adds	r3, #16
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff85 	bl	80010e4 <SCH_Delete_Task>
	for (uint8_t i = 0; i < current_index_task; i++) {
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	3301      	adds	r3, #1
 80011de:	71fb      	strb	r3, [r7, #7]
 80011e0:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <SCH_Dispatch_Tasks+0xa8>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	79fa      	ldrb	r2, [r7, #7]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d3b8      	bcc.n	800115c <SCH_Dispatch_Tasks+0xc>
		}
	}
}
 80011ea:	bf00      	nop
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000224 	.word	0x20000224
 80011f8:	20000544 	.word	0x20000544

080011fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <HAL_MspInit+0x5c>)
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	4a14      	ldr	r2, [pc, #80]	; (8001258 <HAL_MspInit+0x5c>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6193      	str	r3, [r2, #24]
 800120e:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_MspInit+0x5c>)
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121a:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <HAL_MspInit+0x5c>)
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	4a0e      	ldr	r2, [pc, #56]	; (8001258 <HAL_MspInit+0x5c>)
 8001220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001224:	61d3      	str	r3, [r2, #28]
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <HAL_MspInit+0x5c>)
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001232:	4b0a      	ldr	r3, [pc, #40]	; (800125c <HAL_MspInit+0x60>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	4a04      	ldr	r2, [pc, #16]	; (800125c <HAL_MspInit+0x60>)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800124e:	bf00      	nop
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr
 8001258:	40021000 	.word	0x40021000
 800125c:	40010000 	.word	0x40010000

08001260 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 0310 	add.w	r3, r7, #16
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a18      	ldr	r2, [pc, #96]	; (80012dc <HAL_ADC_MspInit+0x7c>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d129      	bne.n	80012d4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001280:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <HAL_ADC_MspInit+0x80>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	4a16      	ldr	r2, [pc, #88]	; (80012e0 <HAL_ADC_MspInit+0x80>)
 8001286:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800128a:	6193      	str	r3, [r2, #24]
 800128c:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <HAL_ADC_MspInit+0x80>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001298:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <HAL_ADC_MspInit+0x80>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	4a10      	ldr	r2, [pc, #64]	; (80012e0 <HAL_ADC_MspInit+0x80>)
 800129e:	f043 0304 	orr.w	r3, r3, #4
 80012a2:	6193      	str	r3, [r2, #24]
 80012a4:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <HAL_ADC_MspInit+0x80>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012b0:	2301      	movs	r3, #1
 80012b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b4:	2303      	movs	r3, #3
 80012b6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b8:	f107 0310 	add.w	r3, r7, #16
 80012bc:	4619      	mov	r1, r3
 80012be:	4809      	ldr	r0, [pc, #36]	; (80012e4 <HAL_ADC_MspInit+0x84>)
 80012c0:	f000 fde0 	bl	8001e84 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80012c4:	2200      	movs	r2, #0
 80012c6:	2100      	movs	r1, #0
 80012c8:	2012      	movs	r0, #18
 80012ca:	f000 fda4 	bl	8001e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80012ce:	2012      	movs	r0, #18
 80012d0:	f000 fdbd 	bl	8001e4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012d4:	bf00      	nop
 80012d6:	3720      	adds	r7, #32
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40012400 	.word	0x40012400
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40010800 	.word	0x40010800

080012e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08a      	sub	sp, #40	; 0x28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a1d      	ldr	r2, [pc, #116]	; (8001378 <HAL_I2C_MspInit+0x90>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d132      	bne.n	800136e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001308:	4b1c      	ldr	r3, [pc, #112]	; (800137c <HAL_I2C_MspInit+0x94>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	4a1b      	ldr	r2, [pc, #108]	; (800137c <HAL_I2C_MspInit+0x94>)
 800130e:	f043 0308 	orr.w	r3, r3, #8
 8001312:	6193      	str	r3, [r2, #24]
 8001314:	4b19      	ldr	r3, [pc, #100]	; (800137c <HAL_I2C_MspInit+0x94>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	f003 0308 	and.w	r3, r3, #8
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001320:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001324:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001326:	2312      	movs	r3, #18
 8001328:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800132a:	2303      	movs	r3, #3
 800132c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	4619      	mov	r1, r3
 8001334:	4812      	ldr	r0, [pc, #72]	; (8001380 <HAL_I2C_MspInit+0x98>)
 8001336:	f000 fda5 	bl	8001e84 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800133a:	4b12      	ldr	r3, [pc, #72]	; (8001384 <HAL_I2C_MspInit+0x9c>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
 8001340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001342:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
 8001348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134a:	f043 0302 	orr.w	r3, r3, #2
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
 8001350:	4a0c      	ldr	r2, [pc, #48]	; (8001384 <HAL_I2C_MspInit+0x9c>)
 8001352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001354:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <HAL_I2C_MspInit+0x94>)
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	4a08      	ldr	r2, [pc, #32]	; (800137c <HAL_I2C_MspInit+0x94>)
 800135c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001360:	61d3      	str	r3, [r2, #28]
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_I2C_MspInit+0x94>)
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800136e:	bf00      	nop
 8001370:	3728      	adds	r7, #40	; 0x28
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40005400 	.word	0x40005400
 800137c:	40021000 	.word	0x40021000
 8001380:	40010c00 	.word	0x40010c00
 8001384:	40010000 	.word	0x40010000

08001388 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001398:	d113      	bne.n	80013c2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <HAL_TIM_Base_MspInit+0x44>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	4a0b      	ldr	r2, [pc, #44]	; (80013cc <HAL_TIM_Base_MspInit+0x44>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	61d3      	str	r3, [r2, #28]
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <HAL_TIM_Base_MspInit+0x44>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2100      	movs	r1, #0
 80013b6:	201c      	movs	r0, #28
 80013b8:	f000 fd2d 	bl	8001e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013bc:	201c      	movs	r0, #28
 80013be:	f000 fd46 	bl	8001e4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013c2:	bf00      	nop
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40021000 	.word	0x40021000

080013d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b088      	sub	sp, #32
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 0310 	add.w	r3, r7, #16
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a15      	ldr	r2, [pc, #84]	; (8001440 <HAL_UART_MspInit+0x70>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d123      	bne.n	8001438 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013f0:	4b14      	ldr	r3, [pc, #80]	; (8001444 <HAL_UART_MspInit+0x74>)
 80013f2:	69db      	ldr	r3, [r3, #28]
 80013f4:	4a13      	ldr	r2, [pc, #76]	; (8001444 <HAL_UART_MspInit+0x74>)
 80013f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013fa:	61d3      	str	r3, [r2, #28]
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <HAL_UART_MspInit+0x74>)
 80013fe:	69db      	ldr	r3, [r3, #28]
 8001400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001408:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <HAL_UART_MspInit+0x74>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	4a0d      	ldr	r2, [pc, #52]	; (8001444 <HAL_UART_MspInit+0x74>)
 800140e:	f043 0304 	orr.w	r3, r3, #4
 8001412:	6193      	str	r3, [r2, #24]
 8001414:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <HAL_UART_MspInit+0x74>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	f003 0304 	and.w	r3, r3, #4
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001420:	230c      	movs	r3, #12
 8001422:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001424:	2302      	movs	r3, #2
 8001426:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	2302      	movs	r3, #2
 800142a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142c:	f107 0310 	add.w	r3, r7, #16
 8001430:	4619      	mov	r1, r3
 8001432:	4805      	ldr	r0, [pc, #20]	; (8001448 <HAL_UART_MspInit+0x78>)
 8001434:	f000 fd26 	bl	8001e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001438:	bf00      	nop
 800143a:	3720      	adds	r7, #32
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40004400 	.word	0x40004400
 8001444:	40021000 	.word	0x40021000
 8001448:	40010800 	.word	0x40010800

0800144c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001450:	e7fe      	b.n	8001450 <NMI_Handler+0x4>

08001452 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001456:	e7fe      	b.n	8001456 <HardFault_Handler+0x4>

08001458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800145c:	e7fe      	b.n	800145c <MemManage_Handler+0x4>

0800145e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001462:	e7fe      	b.n	8001462 <BusFault_Handler+0x4>

08001464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001468:	e7fe      	b.n	8001468 <UsageFault_Handler+0x4>

0800146a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr

08001476 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr

08001482 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr

0800148e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001492:	f000 f8c7 	bl	8001624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80014a0:	4802      	ldr	r0, [pc, #8]	; (80014ac <ADC1_2_IRQHandler+0x10>)
 80014a2:	f000 f9d7 	bl	8001854 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000158 	.word	0x20000158

080014b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014b4:	4802      	ldr	r0, [pc, #8]	; (80014c0 <TIM2_IRQHandler+0x10>)
 80014b6:	f002 f8d7 	bl	8003668 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000110 	.word	0x20000110

080014c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80014c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014cc:	f000 fea6 	bl	800221c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014dc:	4a14      	ldr	r2, [pc, #80]	; (8001530 <_sbrk+0x5c>)
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <_sbrk+0x60>)
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014e8:	4b13      	ldr	r3, [pc, #76]	; (8001538 <_sbrk+0x64>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d102      	bne.n	80014f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014f0:	4b11      	ldr	r3, [pc, #68]	; (8001538 <_sbrk+0x64>)
 80014f2:	4a12      	ldr	r2, [pc, #72]	; (800153c <_sbrk+0x68>)
 80014f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014f6:	4b10      	ldr	r3, [pc, #64]	; (8001538 <_sbrk+0x64>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	429a      	cmp	r2, r3
 8001502:	d207      	bcs.n	8001514 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001504:	f002 fcde 	bl	8003ec4 <__errno>
 8001508:	4603      	mov	r3, r0
 800150a:	220c      	movs	r2, #12
 800150c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800150e:	f04f 33ff 	mov.w	r3, #4294967295
 8001512:	e009      	b.n	8001528 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001514:	4b08      	ldr	r3, [pc, #32]	; (8001538 <_sbrk+0x64>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800151a:	4b07      	ldr	r3, [pc, #28]	; (8001538 <_sbrk+0x64>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4413      	add	r3, r2
 8001522:	4a05      	ldr	r2, [pc, #20]	; (8001538 <_sbrk+0x64>)
 8001524:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001526:	68fb      	ldr	r3, [r7, #12]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3718      	adds	r7, #24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20005000 	.word	0x20005000
 8001534:	00000400 	.word	0x00000400
 8001538:	20000548 	.word	0x20000548
 800153c:	20000560 	.word	0x20000560

08001540 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr

0800154c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800154c:	f7ff fff8 	bl	8001540 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001550:	480b      	ldr	r0, [pc, #44]	; (8001580 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001552:	490c      	ldr	r1, [pc, #48]	; (8001584 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001554:	4a0c      	ldr	r2, [pc, #48]	; (8001588 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001556:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001558:	e002      	b.n	8001560 <LoopCopyDataInit>

0800155a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800155a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800155c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800155e:	3304      	adds	r3, #4

08001560 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001560:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001562:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001564:	d3f9      	bcc.n	800155a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001566:	4a09      	ldr	r2, [pc, #36]	; (800158c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001568:	4c09      	ldr	r4, [pc, #36]	; (8001590 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800156a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800156c:	e001      	b.n	8001572 <LoopFillZerobss>

0800156e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800156e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001570:	3204      	adds	r2, #4

08001572 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001572:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001574:	d3fb      	bcc.n	800156e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001576:	f002 fcab 	bl	8003ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800157a:	f7ff fac5 	bl	8000b08 <main>
  bx lr
 800157e:	4770      	bx	lr
  ldr r0, =_sdata
 8001580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001584:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001588:	080048c0 	.word	0x080048c0
  ldr r2, =_sbss
 800158c:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001590:	20000560 	.word	0x20000560

08001594 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001594:	e7fe      	b.n	8001594 <CAN1_RX1_IRQHandler>
	...

08001598 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <HAL_Init+0x28>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a07      	ldr	r2, [pc, #28]	; (80015c0 <HAL_Init+0x28>)
 80015a2:	f043 0310 	orr.w	r3, r3, #16
 80015a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015a8:	2003      	movs	r0, #3
 80015aa:	f000 fc29 	bl	8001e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ae:	2000      	movs	r0, #0
 80015b0:	f000 f808 	bl	80015c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015b4:	f7ff fe22 	bl	80011fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40022000 	.word	0x40022000

080015c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015cc:	4b12      	ldr	r3, [pc, #72]	; (8001618 <HAL_InitTick+0x54>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b12      	ldr	r3, [pc, #72]	; (800161c <HAL_InitTick+0x58>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	4619      	mov	r1, r3
 80015d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015da:	fbb3 f3f1 	udiv	r3, r3, r1
 80015de:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 fc41 	bl	8001e6a <HAL_SYSTICK_Config>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e00e      	b.n	8001610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b0f      	cmp	r3, #15
 80015f6:	d80a      	bhi.n	800160e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f8:	2200      	movs	r2, #0
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001600:	f000 fc09 	bl	8001e16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001604:	4a06      	ldr	r2, [pc, #24]	; (8001620 <HAL_InitTick+0x5c>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	e000      	b.n	8001610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
}
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	2000002c 	.word	0x2000002c
 800161c:	20000034 	.word	0x20000034
 8001620:	20000030 	.word	0x20000030

08001624 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001628:	4b05      	ldr	r3, [pc, #20]	; (8001640 <HAL_IncTick+0x1c>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	4b05      	ldr	r3, [pc, #20]	; (8001644 <HAL_IncTick+0x20>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4413      	add	r3, r2
 8001634:	4a03      	ldr	r2, [pc, #12]	; (8001644 <HAL_IncTick+0x20>)
 8001636:	6013      	str	r3, [r2, #0]
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr
 8001640:	20000034 	.word	0x20000034
 8001644:	2000054c 	.word	0x2000054c

08001648 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return uwTick;
 800164c:	4b02      	ldr	r3, [pc, #8]	; (8001658 <HAL_GetTick+0x10>)
 800164e:	681b      	ldr	r3, [r3, #0]
}
 8001650:	4618      	mov	r0, r3
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr
 8001658:	2000054c 	.word	0x2000054c

0800165c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001664:	f7ff fff0 	bl	8001648 <HAL_GetTick>
 8001668:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001674:	d005      	beq.n	8001682 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001676:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <HAL_Delay+0x44>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	461a      	mov	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4413      	add	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001682:	bf00      	nop
 8001684:	f7ff ffe0 	bl	8001648 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	429a      	cmp	r2, r3
 8001692:	d8f7      	bhi.n	8001684 <HAL_Delay+0x28>
  {
  }
}
 8001694:	bf00      	nop
 8001696:	bf00      	nop
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000034 	.word	0x20000034

080016a4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016ac:	2300      	movs	r3, #0
 80016ae:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80016b0:	2300      	movs	r3, #0
 80016b2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80016b8:	2300      	movs	r3, #0
 80016ba:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e0be      	b.n	8001844 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d109      	bne.n	80016e8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff fdbc 	bl	8001260 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 fa73 	bl	8001bd4 <ADC_ConversionStop_Disable>
 80016ee:	4603      	mov	r3, r0
 80016f0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f6:	f003 0310 	and.w	r3, r3, #16
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f040 8099 	bne.w	8001832 <HAL_ADC_Init+0x18e>
 8001700:	7dfb      	ldrb	r3, [r7, #23]
 8001702:	2b00      	cmp	r3, #0
 8001704:	f040 8095 	bne.w	8001832 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001710:	f023 0302 	bic.w	r3, r3, #2
 8001714:	f043 0202 	orr.w	r2, r3, #2
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001724:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	7b1b      	ldrb	r3, [r3, #12]
 800172a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800172c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	4313      	orrs	r3, r2
 8001732:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800173c:	d003      	beq.n	8001746 <HAL_ADC_Init+0xa2>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d102      	bne.n	800174c <HAL_ADC_Init+0xa8>
 8001746:	f44f 7380 	mov.w	r3, #256	; 0x100
 800174a:	e000      	b.n	800174e <HAL_ADC_Init+0xaa>
 800174c:	2300      	movs	r3, #0
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4313      	orrs	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	7d1b      	ldrb	r3, [r3, #20]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d119      	bne.n	8001790 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	7b1b      	ldrb	r3, [r3, #12]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d109      	bne.n	8001778 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	3b01      	subs	r3, #1
 800176a:	035a      	lsls	r2, r3, #13
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	4313      	orrs	r3, r2
 8001770:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	e00b      	b.n	8001790 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177c:	f043 0220 	orr.w	r2, r3, #32
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001788:	f043 0201 	orr.w	r2, r3, #1
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	430a      	orrs	r2, r1
 80017a2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	689a      	ldr	r2, [r3, #8]
 80017aa:	4b28      	ldr	r3, [pc, #160]	; (800184c <HAL_ADC_Init+0x1a8>)
 80017ac:	4013      	ands	r3, r2
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	6812      	ldr	r2, [r2, #0]
 80017b2:	68b9      	ldr	r1, [r7, #8]
 80017b4:	430b      	orrs	r3, r1
 80017b6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017c0:	d003      	beq.n	80017ca <HAL_ADC_Init+0x126>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d104      	bne.n	80017d4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	051b      	lsls	r3, r3, #20
 80017d2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017da:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	430a      	orrs	r2, r1
 80017e6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689a      	ldr	r2, [r3, #8]
 80017ee:	4b18      	ldr	r3, [pc, #96]	; (8001850 <HAL_ADC_Init+0x1ac>)
 80017f0:	4013      	ands	r3, r2
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d10b      	bne.n	8001810 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001802:	f023 0303 	bic.w	r3, r3, #3
 8001806:	f043 0201 	orr.w	r2, r3, #1
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800180e:	e018      	b.n	8001842 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001814:	f023 0312 	bic.w	r3, r3, #18
 8001818:	f043 0210 	orr.w	r2, r3, #16
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001824:	f043 0201 	orr.w	r2, r3, #1
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001830:	e007      	b.n	8001842 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001836:	f043 0210 	orr.w	r2, r3, #16
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001842:	7dfb      	ldrb	r3, [r7, #23]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	ffe1f7fd 	.word	0xffe1f7fd
 8001850:	ff1f0efe 	.word	0xff1f0efe

08001854 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	f003 0320 	and.w	r3, r3, #32
 8001872:	2b00      	cmp	r3, #0
 8001874:	d03e      	beq.n	80018f4 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d039      	beq.n	80018f4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001884:	f003 0310 	and.w	r3, r3, #16
 8001888:	2b00      	cmp	r3, #0
 800188a:	d105      	bne.n	8001898 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001890:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80018a2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80018a6:	d11d      	bne.n	80018e4 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d119      	bne.n	80018e4 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	685a      	ldr	r2, [r3, #4]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f022 0220 	bic.w	r2, r2, #32
 80018be:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d105      	bne.n	80018e4 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018dc:	f043 0201 	orr.w	r2, r3, #1
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f7ff f8fb 	bl	8000ae0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f06f 0212 	mvn.w	r2, #18
 80018f2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d04d      	beq.n	800199a <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	2b00      	cmp	r3, #0
 8001906:	d048      	beq.n	800199a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190c:	f003 0310 	and.w	r3, r3, #16
 8001910:	2b00      	cmp	r3, #0
 8001912:	d105      	bne.n	8001920 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001918:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800192a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800192e:	d012      	beq.n	8001956 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800193a:	2b00      	cmp	r3, #0
 800193c:	d125      	bne.n	800198a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001948:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800194c:	d11d      	bne.n	800198a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001952:	2b00      	cmp	r3, #0
 8001954:	d119      	bne.n	800198a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001964:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197a:	2b00      	cmp	r3, #0
 800197c:	d105      	bne.n	800198a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001982:	f043 0201 	orr.w	r2, r3, #1
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 f963 	bl	8001c56 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f06f 020c 	mvn.w	r2, #12
 8001998:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d012      	beq.n	80019ca <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00d      	beq.n	80019ca <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 f809 	bl	80019d2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f06f 0201 	mvn.w	r2, #1
 80019c8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80019ca:	bf00      	nop
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr

080019e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019ee:	2300      	movs	r3, #0
 80019f0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80019f2:	2300      	movs	r3, #0
 80019f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d101      	bne.n	8001a04 <HAL_ADC_ConfigChannel+0x20>
 8001a00:	2302      	movs	r3, #2
 8001a02:	e0dc      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x1da>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2b06      	cmp	r3, #6
 8001a12:	d81c      	bhi.n	8001a4e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	3b05      	subs	r3, #5
 8001a26:	221f      	movs	r2, #31
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	4019      	ands	r1, r3
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	6818      	ldr	r0, [r3, #0]
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	3b05      	subs	r3, #5
 8001a40:	fa00 f203 	lsl.w	r2, r0, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	635a      	str	r2, [r3, #52]	; 0x34
 8001a4c:	e03c      	b.n	8001ac8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b0c      	cmp	r3, #12
 8001a54:	d81c      	bhi.n	8001a90 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	3b23      	subs	r3, #35	; 0x23
 8001a68:	221f      	movs	r2, #31
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	4019      	ands	r1, r3
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	6818      	ldr	r0, [r3, #0]
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	3b23      	subs	r3, #35	; 0x23
 8001a82:	fa00 f203 	lsl.w	r2, r0, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	631a      	str	r2, [r3, #48]	; 0x30
 8001a8e:	e01b      	b.n	8001ac8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685a      	ldr	r2, [r3, #4]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	3b41      	subs	r3, #65	; 0x41
 8001aa2:	221f      	movs	r2, #31
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	4019      	ands	r1, r3
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	6818      	ldr	r0, [r3, #0]
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	3b41      	subs	r3, #65	; 0x41
 8001abc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b09      	cmp	r3, #9
 8001ace:	d91c      	bls.n	8001b0a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68d9      	ldr	r1, [r3, #12]
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	4613      	mov	r3, r2
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	4413      	add	r3, r2
 8001ae0:	3b1e      	subs	r3, #30
 8001ae2:	2207      	movs	r2, #7
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	4019      	ands	r1, r3
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	6898      	ldr	r0, [r3, #8]
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4613      	mov	r3, r2
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	4413      	add	r3, r2
 8001afa:	3b1e      	subs	r3, #30
 8001afc:	fa00 f203 	lsl.w	r2, r0, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	430a      	orrs	r2, r1
 8001b06:	60da      	str	r2, [r3, #12]
 8001b08:	e019      	b.n	8001b3e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6919      	ldr	r1, [r3, #16]
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4613      	mov	r3, r2
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	4413      	add	r3, r2
 8001b1a:	2207      	movs	r2, #7
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	4019      	ands	r1, r3
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	6898      	ldr	r0, [r3, #8]
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	4413      	add	r3, r2
 8001b32:	fa00 f203 	lsl.w	r2, r0, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2b10      	cmp	r3, #16
 8001b44:	d003      	beq.n	8001b4e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b4a:	2b11      	cmp	r3, #17
 8001b4c:	d132      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a1d      	ldr	r2, [pc, #116]	; (8001bc8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d125      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d126      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001b74:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2b10      	cmp	r3, #16
 8001b7c:	d11a      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b7e:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <HAL_ADC_ConfigChannel+0x1e8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a13      	ldr	r2, [pc, #76]	; (8001bd0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001b84:	fba2 2303 	umull	r2, r3, r2, r3
 8001b88:	0c9a      	lsrs	r2, r3, #18
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b94:	e002      	b.n	8001b9c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f9      	bne.n	8001b96 <HAL_ADC_ConfigChannel+0x1b2>
 8001ba2:	e007      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba8:	f043 0220 	orr.w	r2, r3, #32
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3714      	adds	r7, #20
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr
 8001bc8:	40012400 	.word	0x40012400
 8001bcc:	2000002c 	.word	0x2000002c
 8001bd0:	431bde83 	.word	0x431bde83

08001bd4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d12e      	bne.n	8001c4c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f022 0201 	bic.w	r2, r2, #1
 8001bfc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001bfe:	f7ff fd23 	bl	8001648 <HAL_GetTick>
 8001c02:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c04:	e01b      	b.n	8001c3e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c06:	f7ff fd1f 	bl	8001648 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d914      	bls.n	8001c3e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d10d      	bne.n	8001c3e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c26:	f043 0210 	orr.w	r2, r3, #16
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c32:	f043 0201 	orr.w	r2, r3, #1
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e007      	b.n	8001c4e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d0dc      	beq.n	8001c06 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr

08001c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <__NVIC_SetPriorityGrouping+0x44>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c84:	4013      	ands	r3, r2
 8001c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c9a:	4a04      	ldr	r2, [pc, #16]	; (8001cac <__NVIC_SetPriorityGrouping+0x44>)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	60d3      	str	r3, [r2, #12]
}
 8001ca0:	bf00      	nop
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb4:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	0a1b      	lsrs	r3, r3, #8
 8001cba:	f003 0307 	and.w	r3, r3, #7
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	db0b      	blt.n	8001cf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	f003 021f 	and.w	r2, r3, #31
 8001ce4:	4906      	ldr	r1, [pc, #24]	; (8001d00 <__NVIC_EnableIRQ+0x34>)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	095b      	lsrs	r3, r3, #5
 8001cec:	2001      	movs	r0, #1
 8001cee:	fa00 f202 	lsl.w	r2, r0, r2
 8001cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr
 8001d00:	e000e100 	.word	0xe000e100

08001d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	6039      	str	r1, [r7, #0]
 8001d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	db0a      	blt.n	8001d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	490c      	ldr	r1, [pc, #48]	; (8001d50 <__NVIC_SetPriority+0x4c>)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	0112      	lsls	r2, r2, #4
 8001d24:	b2d2      	uxtb	r2, r2
 8001d26:	440b      	add	r3, r1
 8001d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d2c:	e00a      	b.n	8001d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	4908      	ldr	r1, [pc, #32]	; (8001d54 <__NVIC_SetPriority+0x50>)
 8001d34:	79fb      	ldrb	r3, [r7, #7]
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	3b04      	subs	r3, #4
 8001d3c:	0112      	lsls	r2, r2, #4
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	440b      	add	r3, r1
 8001d42:	761a      	strb	r2, [r3, #24]
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	e000e100 	.word	0xe000e100
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b089      	sub	sp, #36	; 0x24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f1c3 0307 	rsb	r3, r3, #7
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	bf28      	it	cs
 8001d76:	2304      	movcs	r3, #4
 8001d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	2b06      	cmp	r3, #6
 8001d80:	d902      	bls.n	8001d88 <NVIC_EncodePriority+0x30>
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	3b03      	subs	r3, #3
 8001d86:	e000      	b.n	8001d8a <NVIC_EncodePriority+0x32>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43da      	mvns	r2, r3
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	401a      	ands	r2, r3
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da0:	f04f 31ff 	mov.w	r1, #4294967295
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	fa01 f303 	lsl.w	r3, r1, r3
 8001daa:	43d9      	mvns	r1, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db0:	4313      	orrs	r3, r2
         );
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3724      	adds	r7, #36	; 0x24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr

08001dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dcc:	d301      	bcc.n	8001dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e00f      	b.n	8001df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dd2:	4a0a      	ldr	r2, [pc, #40]	; (8001dfc <SysTick_Config+0x40>)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dda:	210f      	movs	r1, #15
 8001ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8001de0:	f7ff ff90 	bl	8001d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de4:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <SysTick_Config+0x40>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dea:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <SysTick_Config+0x40>)
 8001dec:	2207      	movs	r2, #7
 8001dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	e000e010 	.word	0xe000e010

08001e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f7ff ff2d 	bl	8001c68 <__NVIC_SetPriorityGrouping>
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b086      	sub	sp, #24
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	60b9      	str	r1, [r7, #8]
 8001e20:	607a      	str	r2, [r7, #4]
 8001e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e28:	f7ff ff42 	bl	8001cb0 <__NVIC_GetPriorityGrouping>
 8001e2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	68b9      	ldr	r1, [r7, #8]
 8001e32:	6978      	ldr	r0, [r7, #20]
 8001e34:	f7ff ff90 	bl	8001d58 <NVIC_EncodePriority>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e3e:	4611      	mov	r1, r2
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff ff5f 	bl	8001d04 <__NVIC_SetPriority>
}
 8001e46:	bf00      	nop
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	4603      	mov	r3, r0
 8001e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff ff35 	bl	8001ccc <__NVIC_EnableIRQ>
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff ffa2 	bl	8001dbc <SysTick_Config>
 8001e78:	4603      	mov	r3, r0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b08b      	sub	sp, #44	; 0x2c
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e92:	2300      	movs	r3, #0
 8001e94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e96:	e169      	b.n	800216c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e98:	2201      	movs	r2, #1
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	69fa      	ldr	r2, [r7, #28]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	f040 8158 	bne.w	8002166 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	4a9a      	ldr	r2, [pc, #616]	; (8002124 <HAL_GPIO_Init+0x2a0>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d05e      	beq.n	8001f7e <HAL_GPIO_Init+0xfa>
 8001ec0:	4a98      	ldr	r2, [pc, #608]	; (8002124 <HAL_GPIO_Init+0x2a0>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d875      	bhi.n	8001fb2 <HAL_GPIO_Init+0x12e>
 8001ec6:	4a98      	ldr	r2, [pc, #608]	; (8002128 <HAL_GPIO_Init+0x2a4>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d058      	beq.n	8001f7e <HAL_GPIO_Init+0xfa>
 8001ecc:	4a96      	ldr	r2, [pc, #600]	; (8002128 <HAL_GPIO_Init+0x2a4>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d86f      	bhi.n	8001fb2 <HAL_GPIO_Init+0x12e>
 8001ed2:	4a96      	ldr	r2, [pc, #600]	; (800212c <HAL_GPIO_Init+0x2a8>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d052      	beq.n	8001f7e <HAL_GPIO_Init+0xfa>
 8001ed8:	4a94      	ldr	r2, [pc, #592]	; (800212c <HAL_GPIO_Init+0x2a8>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d869      	bhi.n	8001fb2 <HAL_GPIO_Init+0x12e>
 8001ede:	4a94      	ldr	r2, [pc, #592]	; (8002130 <HAL_GPIO_Init+0x2ac>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d04c      	beq.n	8001f7e <HAL_GPIO_Init+0xfa>
 8001ee4:	4a92      	ldr	r2, [pc, #584]	; (8002130 <HAL_GPIO_Init+0x2ac>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d863      	bhi.n	8001fb2 <HAL_GPIO_Init+0x12e>
 8001eea:	4a92      	ldr	r2, [pc, #584]	; (8002134 <HAL_GPIO_Init+0x2b0>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d046      	beq.n	8001f7e <HAL_GPIO_Init+0xfa>
 8001ef0:	4a90      	ldr	r2, [pc, #576]	; (8002134 <HAL_GPIO_Init+0x2b0>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d85d      	bhi.n	8001fb2 <HAL_GPIO_Init+0x12e>
 8001ef6:	2b12      	cmp	r3, #18
 8001ef8:	d82a      	bhi.n	8001f50 <HAL_GPIO_Init+0xcc>
 8001efa:	2b12      	cmp	r3, #18
 8001efc:	d859      	bhi.n	8001fb2 <HAL_GPIO_Init+0x12e>
 8001efe:	a201      	add	r2, pc, #4	; (adr r2, 8001f04 <HAL_GPIO_Init+0x80>)
 8001f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f04:	08001f7f 	.word	0x08001f7f
 8001f08:	08001f59 	.word	0x08001f59
 8001f0c:	08001f6b 	.word	0x08001f6b
 8001f10:	08001fad 	.word	0x08001fad
 8001f14:	08001fb3 	.word	0x08001fb3
 8001f18:	08001fb3 	.word	0x08001fb3
 8001f1c:	08001fb3 	.word	0x08001fb3
 8001f20:	08001fb3 	.word	0x08001fb3
 8001f24:	08001fb3 	.word	0x08001fb3
 8001f28:	08001fb3 	.word	0x08001fb3
 8001f2c:	08001fb3 	.word	0x08001fb3
 8001f30:	08001fb3 	.word	0x08001fb3
 8001f34:	08001fb3 	.word	0x08001fb3
 8001f38:	08001fb3 	.word	0x08001fb3
 8001f3c:	08001fb3 	.word	0x08001fb3
 8001f40:	08001fb3 	.word	0x08001fb3
 8001f44:	08001fb3 	.word	0x08001fb3
 8001f48:	08001f61 	.word	0x08001f61
 8001f4c:	08001f75 	.word	0x08001f75
 8001f50:	4a79      	ldr	r2, [pc, #484]	; (8002138 <HAL_GPIO_Init+0x2b4>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d013      	beq.n	8001f7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f56:	e02c      	b.n	8001fb2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	623b      	str	r3, [r7, #32]
          break;
 8001f5e:	e029      	b.n	8001fb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	3304      	adds	r3, #4
 8001f66:	623b      	str	r3, [r7, #32]
          break;
 8001f68:	e024      	b.n	8001fb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	3308      	adds	r3, #8
 8001f70:	623b      	str	r3, [r7, #32]
          break;
 8001f72:	e01f      	b.n	8001fb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	330c      	adds	r3, #12
 8001f7a:	623b      	str	r3, [r7, #32]
          break;
 8001f7c:	e01a      	b.n	8001fb4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d102      	bne.n	8001f8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f86:	2304      	movs	r3, #4
 8001f88:	623b      	str	r3, [r7, #32]
          break;
 8001f8a:	e013      	b.n	8001fb4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d105      	bne.n	8001fa0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f94:	2308      	movs	r3, #8
 8001f96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69fa      	ldr	r2, [r7, #28]
 8001f9c:	611a      	str	r2, [r3, #16]
          break;
 8001f9e:	e009      	b.n	8001fb4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fa0:	2308      	movs	r3, #8
 8001fa2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	69fa      	ldr	r2, [r7, #28]
 8001fa8:	615a      	str	r2, [r3, #20]
          break;
 8001faa:	e003      	b.n	8001fb4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fac:	2300      	movs	r3, #0
 8001fae:	623b      	str	r3, [r7, #32]
          break;
 8001fb0:	e000      	b.n	8001fb4 <HAL_GPIO_Init+0x130>
          break;
 8001fb2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	2bff      	cmp	r3, #255	; 0xff
 8001fb8:	d801      	bhi.n	8001fbe <HAL_GPIO_Init+0x13a>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	e001      	b.n	8001fc2 <HAL_GPIO_Init+0x13e>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	2bff      	cmp	r3, #255	; 0xff
 8001fc8:	d802      	bhi.n	8001fd0 <HAL_GPIO_Init+0x14c>
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	e002      	b.n	8001fd6 <HAL_GPIO_Init+0x152>
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	3b08      	subs	r3, #8
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	210f      	movs	r1, #15
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	6a39      	ldr	r1, [r7, #32]
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 80b1 	beq.w	8002166 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002004:	4b4d      	ldr	r3, [pc, #308]	; (800213c <HAL_GPIO_Init+0x2b8>)
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	4a4c      	ldr	r2, [pc, #304]	; (800213c <HAL_GPIO_Init+0x2b8>)
 800200a:	f043 0301 	orr.w	r3, r3, #1
 800200e:	6193      	str	r3, [r2, #24]
 8002010:	4b4a      	ldr	r3, [pc, #296]	; (800213c <HAL_GPIO_Init+0x2b8>)
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	60bb      	str	r3, [r7, #8]
 800201a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800201c:	4a48      	ldr	r2, [pc, #288]	; (8002140 <HAL_GPIO_Init+0x2bc>)
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	089b      	lsrs	r3, r3, #2
 8002022:	3302      	adds	r3, #2
 8002024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002028:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	f003 0303 	and.w	r3, r3, #3
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	220f      	movs	r2, #15
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	43db      	mvns	r3, r3
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	4013      	ands	r3, r2
 800203e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a40      	ldr	r2, [pc, #256]	; (8002144 <HAL_GPIO_Init+0x2c0>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d013      	beq.n	8002070 <HAL_GPIO_Init+0x1ec>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a3f      	ldr	r2, [pc, #252]	; (8002148 <HAL_GPIO_Init+0x2c4>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d00d      	beq.n	800206c <HAL_GPIO_Init+0x1e8>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a3e      	ldr	r2, [pc, #248]	; (800214c <HAL_GPIO_Init+0x2c8>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d007      	beq.n	8002068 <HAL_GPIO_Init+0x1e4>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a3d      	ldr	r2, [pc, #244]	; (8002150 <HAL_GPIO_Init+0x2cc>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d101      	bne.n	8002064 <HAL_GPIO_Init+0x1e0>
 8002060:	2303      	movs	r3, #3
 8002062:	e006      	b.n	8002072 <HAL_GPIO_Init+0x1ee>
 8002064:	2304      	movs	r3, #4
 8002066:	e004      	b.n	8002072 <HAL_GPIO_Init+0x1ee>
 8002068:	2302      	movs	r3, #2
 800206a:	e002      	b.n	8002072 <HAL_GPIO_Init+0x1ee>
 800206c:	2301      	movs	r3, #1
 800206e:	e000      	b.n	8002072 <HAL_GPIO_Init+0x1ee>
 8002070:	2300      	movs	r3, #0
 8002072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002074:	f002 0203 	and.w	r2, r2, #3
 8002078:	0092      	lsls	r2, r2, #2
 800207a:	4093      	lsls	r3, r2
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	4313      	orrs	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002082:	492f      	ldr	r1, [pc, #188]	; (8002140 <HAL_GPIO_Init+0x2bc>)
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	089b      	lsrs	r3, r3, #2
 8002088:	3302      	adds	r3, #2
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d006      	beq.n	80020aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800209c:	4b2d      	ldr	r3, [pc, #180]	; (8002154 <HAL_GPIO_Init+0x2d0>)
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	492c      	ldr	r1, [pc, #176]	; (8002154 <HAL_GPIO_Init+0x2d0>)
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	608b      	str	r3, [r1, #8]
 80020a8:	e006      	b.n	80020b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020aa:	4b2a      	ldr	r3, [pc, #168]	; (8002154 <HAL_GPIO_Init+0x2d0>)
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	43db      	mvns	r3, r3
 80020b2:	4928      	ldr	r1, [pc, #160]	; (8002154 <HAL_GPIO_Init+0x2d0>)
 80020b4:	4013      	ands	r3, r2
 80020b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d006      	beq.n	80020d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020c4:	4b23      	ldr	r3, [pc, #140]	; (8002154 <HAL_GPIO_Init+0x2d0>)
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	4922      	ldr	r1, [pc, #136]	; (8002154 <HAL_GPIO_Init+0x2d0>)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	60cb      	str	r3, [r1, #12]
 80020d0:	e006      	b.n	80020e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020d2:	4b20      	ldr	r3, [pc, #128]	; (8002154 <HAL_GPIO_Init+0x2d0>)
 80020d4:	68da      	ldr	r2, [r3, #12]
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	43db      	mvns	r3, r3
 80020da:	491e      	ldr	r1, [pc, #120]	; (8002154 <HAL_GPIO_Init+0x2d0>)
 80020dc:	4013      	ands	r3, r2
 80020de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d006      	beq.n	80020fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020ec:	4b19      	ldr	r3, [pc, #100]	; (8002154 <HAL_GPIO_Init+0x2d0>)
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	4918      	ldr	r1, [pc, #96]	; (8002154 <HAL_GPIO_Init+0x2d0>)
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	604b      	str	r3, [r1, #4]
 80020f8:	e006      	b.n	8002108 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020fa:	4b16      	ldr	r3, [pc, #88]	; (8002154 <HAL_GPIO_Init+0x2d0>)
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	43db      	mvns	r3, r3
 8002102:	4914      	ldr	r1, [pc, #80]	; (8002154 <HAL_GPIO_Init+0x2d0>)
 8002104:	4013      	ands	r3, r2
 8002106:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d021      	beq.n	8002158 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002114:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <HAL_GPIO_Init+0x2d0>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	490e      	ldr	r1, [pc, #56]	; (8002154 <HAL_GPIO_Init+0x2d0>)
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	4313      	orrs	r3, r2
 800211e:	600b      	str	r3, [r1, #0]
 8002120:	e021      	b.n	8002166 <HAL_GPIO_Init+0x2e2>
 8002122:	bf00      	nop
 8002124:	10320000 	.word	0x10320000
 8002128:	10310000 	.word	0x10310000
 800212c:	10220000 	.word	0x10220000
 8002130:	10210000 	.word	0x10210000
 8002134:	10120000 	.word	0x10120000
 8002138:	10110000 	.word	0x10110000
 800213c:	40021000 	.word	0x40021000
 8002140:	40010000 	.word	0x40010000
 8002144:	40010800 	.word	0x40010800
 8002148:	40010c00 	.word	0x40010c00
 800214c:	40011000 	.word	0x40011000
 8002150:	40011400 	.word	0x40011400
 8002154:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002158:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <HAL_GPIO_Init+0x304>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	43db      	mvns	r3, r3
 8002160:	4909      	ldr	r1, [pc, #36]	; (8002188 <HAL_GPIO_Init+0x304>)
 8002162:	4013      	ands	r3, r2
 8002164:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	3301      	adds	r3, #1
 800216a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002172:	fa22 f303 	lsr.w	r3, r2, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	f47f ae8e 	bne.w	8001e98 <HAL_GPIO_Init+0x14>
  }
}
 800217c:	bf00      	nop
 800217e:	bf00      	nop
 8002180:	372c      	adds	r7, #44	; 0x2c
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr
 8002188:	40010400 	.word	0x40010400

0800218c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	887b      	ldrh	r3, [r7, #2]
 800219e:	4013      	ands	r3, r2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d002      	beq.n	80021aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021a4:	2301      	movs	r3, #1
 80021a6:	73fb      	strb	r3, [r7, #15]
 80021a8:	e001      	b.n	80021ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021aa:	2300      	movs	r3, #0
 80021ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr

080021ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	460b      	mov	r3, r1
 80021c4:	807b      	strh	r3, [r7, #2]
 80021c6:	4613      	mov	r3, r2
 80021c8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021ca:	787b      	ldrb	r3, [r7, #1]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021d0:	887a      	ldrh	r2, [r7, #2]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021d6:	e003      	b.n	80021e0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021d8:	887b      	ldrh	r3, [r7, #2]
 80021da:	041a      	lsls	r2, r3, #16
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	611a      	str	r2, [r3, #16]
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr

080021ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b085      	sub	sp, #20
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	460b      	mov	r3, r1
 80021f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021fc:	887a      	ldrh	r2, [r7, #2]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	4013      	ands	r3, r2
 8002202:	041a      	lsls	r2, r3, #16
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	43d9      	mvns	r1, r3
 8002208:	887b      	ldrh	r3, [r7, #2]
 800220a:	400b      	ands	r3, r1
 800220c:	431a      	orrs	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	611a      	str	r2, [r3, #16]
}
 8002212:	bf00      	nop
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr

0800221c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002226:	4b08      	ldr	r3, [pc, #32]	; (8002248 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002228:	695a      	ldr	r2, [r3, #20]
 800222a:	88fb      	ldrh	r3, [r7, #6]
 800222c:	4013      	ands	r3, r2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d006      	beq.n	8002240 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002232:	4a05      	ldr	r2, [pc, #20]	; (8002248 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002234:	88fb      	ldrh	r3, [r7, #6]
 8002236:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002238:	88fb      	ldrh	r3, [r7, #6]
 800223a:	4618      	mov	r0, r3
 800223c:	f000 f806 	bl	800224c <HAL_GPIO_EXTI_Callback>
  }
}
 8002240:	bf00      	nop
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40010400 	.word	0x40010400

0800224c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr

08002260 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e12b      	b.n	80024ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d106      	bne.n	800228c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7ff f82e 	bl	80012e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2224      	movs	r2, #36	; 0x24
 8002290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 0201 	bic.w	r2, r2, #1
 80022a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022c4:	f001 f832 	bl	800332c <HAL_RCC_GetPCLK1Freq>
 80022c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	4a81      	ldr	r2, [pc, #516]	; (80024d4 <HAL_I2C_Init+0x274>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d807      	bhi.n	80022e4 <HAL_I2C_Init+0x84>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4a80      	ldr	r2, [pc, #512]	; (80024d8 <HAL_I2C_Init+0x278>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	bf94      	ite	ls
 80022dc:	2301      	movls	r3, #1
 80022de:	2300      	movhi	r3, #0
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	e006      	b.n	80022f2 <HAL_I2C_Init+0x92>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4a7d      	ldr	r2, [pc, #500]	; (80024dc <HAL_I2C_Init+0x27c>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	bf94      	ite	ls
 80022ec:	2301      	movls	r3, #1
 80022ee:	2300      	movhi	r3, #0
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e0e7      	b.n	80024ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	4a78      	ldr	r2, [pc, #480]	; (80024e0 <HAL_I2C_Init+0x280>)
 80022fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002302:	0c9b      	lsrs	r3, r3, #18
 8002304:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68ba      	ldr	r2, [r7, #8]
 8002316:	430a      	orrs	r2, r1
 8002318:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	4a6a      	ldr	r2, [pc, #424]	; (80024d4 <HAL_I2C_Init+0x274>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d802      	bhi.n	8002334 <HAL_I2C_Init+0xd4>
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	3301      	adds	r3, #1
 8002332:	e009      	b.n	8002348 <HAL_I2C_Init+0xe8>
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800233a:	fb02 f303 	mul.w	r3, r2, r3
 800233e:	4a69      	ldr	r2, [pc, #420]	; (80024e4 <HAL_I2C_Init+0x284>)
 8002340:	fba2 2303 	umull	r2, r3, r2, r3
 8002344:	099b      	lsrs	r3, r3, #6
 8002346:	3301      	adds	r3, #1
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6812      	ldr	r2, [r2, #0]
 800234c:	430b      	orrs	r3, r1
 800234e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800235a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	495c      	ldr	r1, [pc, #368]	; (80024d4 <HAL_I2C_Init+0x274>)
 8002364:	428b      	cmp	r3, r1
 8002366:	d819      	bhi.n	800239c <HAL_I2C_Init+0x13c>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	1e59      	subs	r1, r3, #1
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	fbb1 f3f3 	udiv	r3, r1, r3
 8002376:	1c59      	adds	r1, r3, #1
 8002378:	f640 73fc 	movw	r3, #4092	; 0xffc
 800237c:	400b      	ands	r3, r1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00a      	beq.n	8002398 <HAL_I2C_Init+0x138>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	1e59      	subs	r1, r3, #1
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002390:	3301      	adds	r3, #1
 8002392:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002396:	e051      	b.n	800243c <HAL_I2C_Init+0x1dc>
 8002398:	2304      	movs	r3, #4
 800239a:	e04f      	b.n	800243c <HAL_I2C_Init+0x1dc>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d111      	bne.n	80023c8 <HAL_I2C_Init+0x168>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	1e58      	subs	r0, r3, #1
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6859      	ldr	r1, [r3, #4]
 80023ac:	460b      	mov	r3, r1
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	440b      	add	r3, r1
 80023b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023b6:	3301      	adds	r3, #1
 80023b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023bc:	2b00      	cmp	r3, #0
 80023be:	bf0c      	ite	eq
 80023c0:	2301      	moveq	r3, #1
 80023c2:	2300      	movne	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	e012      	b.n	80023ee <HAL_I2C_Init+0x18e>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	1e58      	subs	r0, r3, #1
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6859      	ldr	r1, [r3, #4]
 80023d0:	460b      	mov	r3, r1
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	0099      	lsls	r1, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	fbb0 f3f3 	udiv	r3, r0, r3
 80023de:	3301      	adds	r3, #1
 80023e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	bf0c      	ite	eq
 80023e8:	2301      	moveq	r3, #1
 80023ea:	2300      	movne	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_I2C_Init+0x196>
 80023f2:	2301      	movs	r3, #1
 80023f4:	e022      	b.n	800243c <HAL_I2C_Init+0x1dc>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10e      	bne.n	800241c <HAL_I2C_Init+0x1bc>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	1e58      	subs	r0, r3, #1
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6859      	ldr	r1, [r3, #4]
 8002406:	460b      	mov	r3, r1
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	440b      	add	r3, r1
 800240c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002410:	3301      	adds	r3, #1
 8002412:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800241a:	e00f      	b.n	800243c <HAL_I2C_Init+0x1dc>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	1e58      	subs	r0, r3, #1
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6859      	ldr	r1, [r3, #4]
 8002424:	460b      	mov	r3, r1
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	0099      	lsls	r1, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002432:	3301      	adds	r3, #1
 8002434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002438:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	6809      	ldr	r1, [r1, #0]
 8002440:	4313      	orrs	r3, r2
 8002442:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69da      	ldr	r2, [r3, #28]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	431a      	orrs	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800246a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	6911      	ldr	r1, [r2, #16]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	68d2      	ldr	r2, [r2, #12]
 8002476:	4311      	orrs	r1, r2
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	6812      	ldr	r2, [r2, #0]
 800247c:	430b      	orrs	r3, r1
 800247e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695a      	ldr	r2, [r3, #20]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0201 	orr.w	r2, r2, #1
 80024aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2220      	movs	r2, #32
 80024b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	000186a0 	.word	0x000186a0
 80024d8:	001e847f 	.word	0x001e847f
 80024dc:	003d08ff 	.word	0x003d08ff
 80024e0:	431bde83 	.word	0x431bde83
 80024e4:	10624dd3 	.word	0x10624dd3

080024e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b088      	sub	sp, #32
 80024ec:	af02      	add	r7, sp, #8
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	607a      	str	r2, [r7, #4]
 80024f2:	461a      	mov	r2, r3
 80024f4:	460b      	mov	r3, r1
 80024f6:	817b      	strh	r3, [r7, #10]
 80024f8:	4613      	mov	r3, r2
 80024fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024fc:	f7ff f8a4 	bl	8001648 <HAL_GetTick>
 8002500:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b20      	cmp	r3, #32
 800250c:	f040 80e0 	bne.w	80026d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	2319      	movs	r3, #25
 8002516:	2201      	movs	r2, #1
 8002518:	4970      	ldr	r1, [pc, #448]	; (80026dc <HAL_I2C_Master_Transmit+0x1f4>)
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 f964 	bl	80027e8 <I2C_WaitOnFlagUntilTimeout>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002526:	2302      	movs	r3, #2
 8002528:	e0d3      	b.n	80026d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002530:	2b01      	cmp	r3, #1
 8002532:	d101      	bne.n	8002538 <HAL_I2C_Master_Transmit+0x50>
 8002534:	2302      	movs	r3, #2
 8002536:	e0cc      	b.n	80026d2 <HAL_I2C_Master_Transmit+0x1ea>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b01      	cmp	r3, #1
 800254c:	d007      	beq.n	800255e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f042 0201 	orr.w	r2, r2, #1
 800255c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800256c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2221      	movs	r2, #33	; 0x21
 8002572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2210      	movs	r2, #16
 800257a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	893a      	ldrh	r2, [r7, #8]
 800258e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002594:	b29a      	uxth	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	4a50      	ldr	r2, [pc, #320]	; (80026e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800259e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025a0:	8979      	ldrh	r1, [r7, #10]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	6a3a      	ldr	r2, [r7, #32]
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 f89c 	bl	80026e4 <I2C_MasterRequestWrite>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e08d      	b.n	80026d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025b6:	2300      	movs	r3, #0
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	613b      	str	r3, [r7, #16]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	613b      	str	r3, [r7, #16]
 80025ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80025cc:	e066      	b.n	800269c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	6a39      	ldr	r1, [r7, #32]
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f000 fa22 	bl	8002a1c <I2C_WaitOnTXEFlagUntilTimeout>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00d      	beq.n	80025fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	d107      	bne.n	80025f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e06b      	b.n	80026d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fe:	781a      	ldrb	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002614:	b29b      	uxth	r3, r3
 8002616:	3b01      	subs	r3, #1
 8002618:	b29a      	uxth	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002622:	3b01      	subs	r3, #1
 8002624:	b29a      	uxth	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	695b      	ldr	r3, [r3, #20]
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	2b04      	cmp	r3, #4
 8002636:	d11b      	bne.n	8002670 <HAL_I2C_Master_Transmit+0x188>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263c:	2b00      	cmp	r3, #0
 800263e:	d017      	beq.n	8002670 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	781a      	ldrb	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265a:	b29b      	uxth	r3, r3
 800265c:	3b01      	subs	r3, #1
 800265e:	b29a      	uxth	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002668:	3b01      	subs	r3, #1
 800266a:	b29a      	uxth	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	6a39      	ldr	r1, [r7, #32]
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f000 fa19 	bl	8002aac <I2C_WaitOnBTFFlagUntilTimeout>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00d      	beq.n	800269c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	2b04      	cmp	r3, #4
 8002686:	d107      	bne.n	8002698 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002696:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e01a      	b.n	80026d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d194      	bne.n	80025ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2220      	movs	r2, #32
 80026b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026cc:	2300      	movs	r3, #0
 80026ce:	e000      	b.n	80026d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80026d0:	2302      	movs	r3, #2
  }
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3718      	adds	r7, #24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	00100002 	.word	0x00100002
 80026e0:	ffff0000 	.word	0xffff0000

080026e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b088      	sub	sp, #32
 80026e8:	af02      	add	r7, sp, #8
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	607a      	str	r2, [r7, #4]
 80026ee:	603b      	str	r3, [r7, #0]
 80026f0:	460b      	mov	r3, r1
 80026f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	2b08      	cmp	r3, #8
 80026fe:	d006      	beq.n	800270e <I2C_MasterRequestWrite+0x2a>
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d003      	beq.n	800270e <I2C_MasterRequestWrite+0x2a>
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800270c:	d108      	bne.n	8002720 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	e00b      	b.n	8002738 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002724:	2b12      	cmp	r3, #18
 8002726:	d107      	bne.n	8002738 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002736:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f000 f84f 	bl	80027e8 <I2C_WaitOnFlagUntilTimeout>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00d      	beq.n	800276c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800275e:	d103      	bne.n	8002768 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002766:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e035      	b.n	80027d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002774:	d108      	bne.n	8002788 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002776:	897b      	ldrh	r3, [r7, #10]
 8002778:	b2db      	uxtb	r3, r3
 800277a:	461a      	mov	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002784:	611a      	str	r2, [r3, #16]
 8002786:	e01b      	b.n	80027c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002788:	897b      	ldrh	r3, [r7, #10]
 800278a:	11db      	asrs	r3, r3, #7
 800278c:	b2db      	uxtb	r3, r3
 800278e:	f003 0306 	and.w	r3, r3, #6
 8002792:	b2db      	uxtb	r3, r3
 8002794:	f063 030f 	orn	r3, r3, #15
 8002798:	b2da      	uxtb	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	490e      	ldr	r1, [pc, #56]	; (80027e0 <I2C_MasterRequestWrite+0xfc>)
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 f898 	bl	80028dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e010      	b.n	80027d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80027b6:	897b      	ldrh	r3, [r7, #10]
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	4907      	ldr	r1, [pc, #28]	; (80027e4 <I2C_MasterRequestWrite+0x100>)
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f000 f888 	bl	80028dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e000      	b.n	80027d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	00010008 	.word	0x00010008
 80027e4:	00010002 	.word	0x00010002

080027e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	603b      	str	r3, [r7, #0]
 80027f4:	4613      	mov	r3, r2
 80027f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027f8:	e048      	b.n	800288c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002800:	d044      	beq.n	800288c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002802:	f7fe ff21 	bl	8001648 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d302      	bcc.n	8002818 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d139      	bne.n	800288c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	0c1b      	lsrs	r3, r3, #16
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b01      	cmp	r3, #1
 8002820:	d10d      	bne.n	800283e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	43da      	mvns	r2, r3
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	4013      	ands	r3, r2
 800282e:	b29b      	uxth	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	bf0c      	ite	eq
 8002834:	2301      	moveq	r3, #1
 8002836:	2300      	movne	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	461a      	mov	r2, r3
 800283c:	e00c      	b.n	8002858 <I2C_WaitOnFlagUntilTimeout+0x70>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	43da      	mvns	r2, r3
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	4013      	ands	r3, r2
 800284a:	b29b      	uxth	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	bf0c      	ite	eq
 8002850:	2301      	moveq	r3, #1
 8002852:	2300      	movne	r3, #0
 8002854:	b2db      	uxtb	r3, r3
 8002856:	461a      	mov	r2, r3
 8002858:	79fb      	ldrb	r3, [r7, #7]
 800285a:	429a      	cmp	r2, r3
 800285c:	d116      	bne.n	800288c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2220      	movs	r2, #32
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002878:	f043 0220 	orr.w	r2, r3, #32
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e023      	b.n	80028d4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	0c1b      	lsrs	r3, r3, #16
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b01      	cmp	r3, #1
 8002894:	d10d      	bne.n	80028b2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	43da      	mvns	r2, r3
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	4013      	ands	r3, r2
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	bf0c      	ite	eq
 80028a8:	2301      	moveq	r3, #1
 80028aa:	2300      	movne	r3, #0
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	461a      	mov	r2, r3
 80028b0:	e00c      	b.n	80028cc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	43da      	mvns	r2, r3
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	4013      	ands	r3, r2
 80028be:	b29b      	uxth	r3, r3
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	bf0c      	ite	eq
 80028c4:	2301      	moveq	r3, #1
 80028c6:	2300      	movne	r3, #0
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	461a      	mov	r2, r3
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d093      	beq.n	80027fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
 80028e8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028ea:	e071      	b.n	80029d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028fa:	d123      	bne.n	8002944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800290a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002914:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2220      	movs	r2, #32
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	f043 0204 	orr.w	r2, r3, #4
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e067      	b.n	8002a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294a:	d041      	beq.n	80029d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800294c:	f7fe fe7c 	bl	8001648 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	429a      	cmp	r2, r3
 800295a:	d302      	bcc.n	8002962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d136      	bne.n	80029d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	0c1b      	lsrs	r3, r3, #16
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b01      	cmp	r3, #1
 800296a:	d10c      	bne.n	8002986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	43da      	mvns	r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	4013      	ands	r3, r2
 8002978:	b29b      	uxth	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	bf14      	ite	ne
 800297e:	2301      	movne	r3, #1
 8002980:	2300      	moveq	r3, #0
 8002982:	b2db      	uxtb	r3, r3
 8002984:	e00b      	b.n	800299e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	43da      	mvns	r2, r3
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	4013      	ands	r3, r2
 8002992:	b29b      	uxth	r3, r3
 8002994:	2b00      	cmp	r3, #0
 8002996:	bf14      	ite	ne
 8002998:	2301      	movne	r3, #1
 800299a:	2300      	moveq	r3, #0
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d016      	beq.n	80029d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2220      	movs	r2, #32
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	f043 0220 	orr.w	r2, r3, #32
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e021      	b.n	8002a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	0c1b      	lsrs	r3, r3, #16
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d10c      	bne.n	80029f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	43da      	mvns	r2, r3
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	4013      	ands	r3, r2
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	bf14      	ite	ne
 80029ec:	2301      	movne	r3, #1
 80029ee:	2300      	moveq	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	e00b      	b.n	8002a0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	43da      	mvns	r2, r3
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	4013      	ands	r3, r2
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	bf14      	ite	ne
 8002a06:	2301      	movne	r3, #1
 8002a08:	2300      	moveq	r3, #0
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f47f af6d 	bne.w	80028ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a28:	e034      	b.n	8002a94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 f886 	bl	8002b3c <I2C_IsAcknowledgeFailed>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e034      	b.n	8002aa4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a40:	d028      	beq.n	8002a94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a42:	f7fe fe01 	bl	8001648 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d302      	bcc.n	8002a58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d11d      	bne.n	8002a94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a62:	2b80      	cmp	r3, #128	; 0x80
 8002a64:	d016      	beq.n	8002a94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a80:	f043 0220 	orr.w	r2, r3, #32
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e007      	b.n	8002aa4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a9e:	2b80      	cmp	r3, #128	; 0x80
 8002aa0:	d1c3      	bne.n	8002a2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ab8:	e034      	b.n	8002b24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 f83e 	bl	8002b3c <I2C_IsAcknowledgeFailed>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e034      	b.n	8002b34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad0:	d028      	beq.n	8002b24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ad2:	f7fe fdb9 	bl	8001648 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	68ba      	ldr	r2, [r7, #8]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d302      	bcc.n	8002ae8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d11d      	bne.n	8002b24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	f003 0304 	and.w	r3, r3, #4
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d016      	beq.n	8002b24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2220      	movs	r2, #32
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b10:	f043 0220 	orr.w	r2, r3, #32
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e007      	b.n	8002b34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	f003 0304 	and.w	r3, r3, #4
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d1c3      	bne.n	8002aba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b52:	d11b      	bne.n	8002b8c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2220      	movs	r2, #32
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	f043 0204 	orr.w	r2, r3, #4
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e000      	b.n	8002b8e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr

08002b98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e272      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 8087 	beq.w	8002cc6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bb8:	4b92      	ldr	r3, [pc, #584]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f003 030c 	and.w	r3, r3, #12
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d00c      	beq.n	8002bde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bc4:	4b8f      	ldr	r3, [pc, #572]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f003 030c 	and.w	r3, r3, #12
 8002bcc:	2b08      	cmp	r3, #8
 8002bce:	d112      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x5e>
 8002bd0:	4b8c      	ldr	r3, [pc, #560]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bdc:	d10b      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bde:	4b89      	ldr	r3, [pc, #548]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d06c      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x12c>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d168      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e24c      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bfe:	d106      	bne.n	8002c0e <HAL_RCC_OscConfig+0x76>
 8002c00:	4b80      	ldr	r3, [pc, #512]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a7f      	ldr	r2, [pc, #508]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	e02e      	b.n	8002c6c <HAL_RCC_OscConfig+0xd4>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10c      	bne.n	8002c30 <HAL_RCC_OscConfig+0x98>
 8002c16:	4b7b      	ldr	r3, [pc, #492]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a7a      	ldr	r2, [pc, #488]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	4b78      	ldr	r3, [pc, #480]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a77      	ldr	r2, [pc, #476]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	e01d      	b.n	8002c6c <HAL_RCC_OscConfig+0xd4>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c38:	d10c      	bne.n	8002c54 <HAL_RCC_OscConfig+0xbc>
 8002c3a:	4b72      	ldr	r3, [pc, #456]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a71      	ldr	r2, [pc, #452]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	4b6f      	ldr	r3, [pc, #444]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a6e      	ldr	r2, [pc, #440]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	e00b      	b.n	8002c6c <HAL_RCC_OscConfig+0xd4>
 8002c54:	4b6b      	ldr	r3, [pc, #428]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a6a      	ldr	r2, [pc, #424]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c5e:	6013      	str	r3, [r2, #0]
 8002c60:	4b68      	ldr	r3, [pc, #416]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a67      	ldr	r2, [pc, #412]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d013      	beq.n	8002c9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c74:	f7fe fce8 	bl	8001648 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c7c:	f7fe fce4 	bl	8001648 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b64      	cmp	r3, #100	; 0x64
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e200      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8e:	4b5d      	ldr	r3, [pc, #372]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0f0      	beq.n	8002c7c <HAL_RCC_OscConfig+0xe4>
 8002c9a:	e014      	b.n	8002cc6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9c:	f7fe fcd4 	bl	8001648 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca4:	f7fe fcd0 	bl	8001648 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b64      	cmp	r3, #100	; 0x64
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e1ec      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb6:	4b53      	ldr	r3, [pc, #332]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f0      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x10c>
 8002cc2:	e000      	b.n	8002cc6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d063      	beq.n	8002d9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cd2:	4b4c      	ldr	r3, [pc, #304]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00b      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cde:	4b49      	ldr	r3, [pc, #292]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f003 030c 	and.w	r3, r3, #12
 8002ce6:	2b08      	cmp	r3, #8
 8002ce8:	d11c      	bne.n	8002d24 <HAL_RCC_OscConfig+0x18c>
 8002cea:	4b46      	ldr	r3, [pc, #280]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d116      	bne.n	8002d24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cf6:	4b43      	ldr	r3, [pc, #268]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d005      	beq.n	8002d0e <HAL_RCC_OscConfig+0x176>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d001      	beq.n	8002d0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e1c0      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d0e:	4b3d      	ldr	r3, [pc, #244]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	4939      	ldr	r1, [pc, #228]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d22:	e03a      	b.n	8002d9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d020      	beq.n	8002d6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d2c:	4b36      	ldr	r3, [pc, #216]	; (8002e08 <HAL_RCC_OscConfig+0x270>)
 8002d2e:	2201      	movs	r2, #1
 8002d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d32:	f7fe fc89 	bl	8001648 <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d3a:	f7fe fc85 	bl	8001648 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e1a1      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4c:	4b2d      	ldr	r3, [pc, #180]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0f0      	beq.n	8002d3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d58:	4b2a      	ldr	r3, [pc, #168]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	4927      	ldr	r1, [pc, #156]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	600b      	str	r3, [r1, #0]
 8002d6c:	e015      	b.n	8002d9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d6e:	4b26      	ldr	r3, [pc, #152]	; (8002e08 <HAL_RCC_OscConfig+0x270>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d74:	f7fe fc68 	bl	8001648 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d7c:	f7fe fc64 	bl	8001648 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e180      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d8e:	4b1d      	ldr	r3, [pc, #116]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f0      	bne.n	8002d7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d03a      	beq.n	8002e1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d019      	beq.n	8002de2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dae:	4b17      	ldr	r3, [pc, #92]	; (8002e0c <HAL_RCC_OscConfig+0x274>)
 8002db0:	2201      	movs	r2, #1
 8002db2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db4:	f7fe fc48 	bl	8001648 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dbc:	f7fe fc44 	bl	8001648 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e160      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dce:	4b0d      	ldr	r3, [pc, #52]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0f0      	beq.n	8002dbc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dda:	2001      	movs	r0, #1
 8002ddc:	f000 face 	bl	800337c <RCC_Delay>
 8002de0:	e01c      	b.n	8002e1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002de2:	4b0a      	ldr	r3, [pc, #40]	; (8002e0c <HAL_RCC_OscConfig+0x274>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de8:	f7fe fc2e 	bl	8001648 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dee:	e00f      	b.n	8002e10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df0:	f7fe fc2a 	bl	8001648 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d908      	bls.n	8002e10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e146      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
 8002e02:	bf00      	nop
 8002e04:	40021000 	.word	0x40021000
 8002e08:	42420000 	.word	0x42420000
 8002e0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e10:	4b92      	ldr	r3, [pc, #584]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1e9      	bne.n	8002df0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 80a6 	beq.w	8002f76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e2e:	4b8b      	ldr	r3, [pc, #556]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10d      	bne.n	8002e56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e3a:	4b88      	ldr	r3, [pc, #544]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	4a87      	ldr	r2, [pc, #540]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e44:	61d3      	str	r3, [r2, #28]
 8002e46:	4b85      	ldr	r3, [pc, #532]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4e:	60bb      	str	r3, [r7, #8]
 8002e50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e52:	2301      	movs	r3, #1
 8002e54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e56:	4b82      	ldr	r3, [pc, #520]	; (8003060 <HAL_RCC_OscConfig+0x4c8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d118      	bne.n	8002e94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e62:	4b7f      	ldr	r3, [pc, #508]	; (8003060 <HAL_RCC_OscConfig+0x4c8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a7e      	ldr	r2, [pc, #504]	; (8003060 <HAL_RCC_OscConfig+0x4c8>)
 8002e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e6e:	f7fe fbeb 	bl	8001648 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e76:	f7fe fbe7 	bl	8001648 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b64      	cmp	r3, #100	; 0x64
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e103      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e88:	4b75      	ldr	r3, [pc, #468]	; (8003060 <HAL_RCC_OscConfig+0x4c8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0f0      	beq.n	8002e76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d106      	bne.n	8002eaa <HAL_RCC_OscConfig+0x312>
 8002e9c:	4b6f      	ldr	r3, [pc, #444]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	4a6e      	ldr	r2, [pc, #440]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	6213      	str	r3, [r2, #32]
 8002ea8:	e02d      	b.n	8002f06 <HAL_RCC_OscConfig+0x36e>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10c      	bne.n	8002ecc <HAL_RCC_OscConfig+0x334>
 8002eb2:	4b6a      	ldr	r3, [pc, #424]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	4a69      	ldr	r2, [pc, #420]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002eb8:	f023 0301 	bic.w	r3, r3, #1
 8002ebc:	6213      	str	r3, [r2, #32]
 8002ebe:	4b67      	ldr	r3, [pc, #412]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	4a66      	ldr	r2, [pc, #408]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002ec4:	f023 0304 	bic.w	r3, r3, #4
 8002ec8:	6213      	str	r3, [r2, #32]
 8002eca:	e01c      	b.n	8002f06 <HAL_RCC_OscConfig+0x36e>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	2b05      	cmp	r3, #5
 8002ed2:	d10c      	bne.n	8002eee <HAL_RCC_OscConfig+0x356>
 8002ed4:	4b61      	ldr	r3, [pc, #388]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	4a60      	ldr	r2, [pc, #384]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002eda:	f043 0304 	orr.w	r3, r3, #4
 8002ede:	6213      	str	r3, [r2, #32]
 8002ee0:	4b5e      	ldr	r3, [pc, #376]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	4a5d      	ldr	r2, [pc, #372]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	6213      	str	r3, [r2, #32]
 8002eec:	e00b      	b.n	8002f06 <HAL_RCC_OscConfig+0x36e>
 8002eee:	4b5b      	ldr	r3, [pc, #364]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	4a5a      	ldr	r2, [pc, #360]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002ef4:	f023 0301 	bic.w	r3, r3, #1
 8002ef8:	6213      	str	r3, [r2, #32]
 8002efa:	4b58      	ldr	r3, [pc, #352]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	4a57      	ldr	r2, [pc, #348]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002f00:	f023 0304 	bic.w	r3, r3, #4
 8002f04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d015      	beq.n	8002f3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f0e:	f7fe fb9b 	bl	8001648 <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f14:	e00a      	b.n	8002f2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f16:	f7fe fb97 	bl	8001648 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e0b1      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2c:	4b4b      	ldr	r3, [pc, #300]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0ee      	beq.n	8002f16 <HAL_RCC_OscConfig+0x37e>
 8002f38:	e014      	b.n	8002f64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3a:	f7fe fb85 	bl	8001648 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f40:	e00a      	b.n	8002f58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f42:	f7fe fb81 	bl	8001648 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e09b      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f58:	4b40      	ldr	r3, [pc, #256]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1ee      	bne.n	8002f42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f64:	7dfb      	ldrb	r3, [r7, #23]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d105      	bne.n	8002f76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f6a:	4b3c      	ldr	r3, [pc, #240]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	4a3b      	ldr	r2, [pc, #236]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002f70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 8087 	beq.w	800308e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f80:	4b36      	ldr	r3, [pc, #216]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f003 030c 	and.w	r3, r3, #12
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d061      	beq.n	8003050 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	69db      	ldr	r3, [r3, #28]
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d146      	bne.n	8003022 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f94:	4b33      	ldr	r3, [pc, #204]	; (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9a:	f7fe fb55 	bl	8001648 <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa2:	f7fe fb51 	bl	8001648 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e06d      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fb4:	4b29      	ldr	r3, [pc, #164]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1f0      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fc8:	d108      	bne.n	8002fdc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fca:	4b24      	ldr	r3, [pc, #144]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	4921      	ldr	r1, [pc, #132]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fdc:	4b1f      	ldr	r3, [pc, #124]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a19      	ldr	r1, [r3, #32]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	430b      	orrs	r3, r1
 8002fee:	491b      	ldr	r1, [pc, #108]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ff4:	4b1b      	ldr	r3, [pc, #108]	; (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffa:	f7fe fb25 	bl	8001648 <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003002:	f7fe fb21 	bl	8001648 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e03d      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003014:	4b11      	ldr	r3, [pc, #68]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0f0      	beq.n	8003002 <HAL_RCC_OscConfig+0x46a>
 8003020:	e035      	b.n	800308e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003022:	4b10      	ldr	r3, [pc, #64]	; (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003028:	f7fe fb0e 	bl	8001648 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003030:	f7fe fb0a 	bl	8001648 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e026      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003042:	4b06      	ldr	r3, [pc, #24]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f0      	bne.n	8003030 <HAL_RCC_OscConfig+0x498>
 800304e:	e01e      	b.n	800308e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	69db      	ldr	r3, [r3, #28]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d107      	bne.n	8003068 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e019      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
 800305c:	40021000 	.word	0x40021000
 8003060:	40007000 	.word	0x40007000
 8003064:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003068:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <HAL_RCC_OscConfig+0x500>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	429a      	cmp	r2, r3
 800307a:	d106      	bne.n	800308a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003086:	429a      	cmp	r2, r3
 8003088:	d001      	beq.n	800308e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40021000 	.word	0x40021000

0800309c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e0d0      	b.n	8003252 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030b0:	4b6a      	ldr	r3, [pc, #424]	; (800325c <HAL_RCC_ClockConfig+0x1c0>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d910      	bls.n	80030e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030be:	4b67      	ldr	r3, [pc, #412]	; (800325c <HAL_RCC_ClockConfig+0x1c0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f023 0207 	bic.w	r2, r3, #7
 80030c6:	4965      	ldr	r1, [pc, #404]	; (800325c <HAL_RCC_ClockConfig+0x1c0>)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ce:	4b63      	ldr	r3, [pc, #396]	; (800325c <HAL_RCC_ClockConfig+0x1c0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0307 	and.w	r3, r3, #7
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d001      	beq.n	80030e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e0b8      	b.n	8003252 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d020      	beq.n	800312e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d005      	beq.n	8003104 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030f8:	4b59      	ldr	r3, [pc, #356]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	4a58      	ldr	r2, [pc, #352]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 80030fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003102:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0308 	and.w	r3, r3, #8
 800310c:	2b00      	cmp	r3, #0
 800310e:	d005      	beq.n	800311c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003110:	4b53      	ldr	r3, [pc, #332]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	4a52      	ldr	r2, [pc, #328]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 8003116:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800311a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800311c:	4b50      	ldr	r3, [pc, #320]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	494d      	ldr	r1, [pc, #308]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 800312a:	4313      	orrs	r3, r2
 800312c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d040      	beq.n	80031bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d107      	bne.n	8003152 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003142:	4b47      	ldr	r3, [pc, #284]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d115      	bne.n	800317a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e07f      	b.n	8003252 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b02      	cmp	r3, #2
 8003158:	d107      	bne.n	800316a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800315a:	4b41      	ldr	r3, [pc, #260]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d109      	bne.n	800317a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e073      	b.n	8003252 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316a:	4b3d      	ldr	r3, [pc, #244]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e06b      	b.n	8003252 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800317a:	4b39      	ldr	r3, [pc, #228]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f023 0203 	bic.w	r2, r3, #3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	4936      	ldr	r1, [pc, #216]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 8003188:	4313      	orrs	r3, r2
 800318a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800318c:	f7fe fa5c 	bl	8001648 <HAL_GetTick>
 8003190:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003192:	e00a      	b.n	80031aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003194:	f7fe fa58 	bl	8001648 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e053      	b.n	8003252 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031aa:	4b2d      	ldr	r3, [pc, #180]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f003 020c 	and.w	r2, r3, #12
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d1eb      	bne.n	8003194 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031bc:	4b27      	ldr	r3, [pc, #156]	; (800325c <HAL_RCC_ClockConfig+0x1c0>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d210      	bcs.n	80031ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ca:	4b24      	ldr	r3, [pc, #144]	; (800325c <HAL_RCC_ClockConfig+0x1c0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f023 0207 	bic.w	r2, r3, #7
 80031d2:	4922      	ldr	r1, [pc, #136]	; (800325c <HAL_RCC_ClockConfig+0x1c0>)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031da:	4b20      	ldr	r3, [pc, #128]	; (800325c <HAL_RCC_ClockConfig+0x1c0>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d001      	beq.n	80031ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e032      	b.n	8003252 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d008      	beq.n	800320a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031f8:	4b19      	ldr	r3, [pc, #100]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	4916      	ldr	r1, [pc, #88]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 8003206:	4313      	orrs	r3, r2
 8003208:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b00      	cmp	r3, #0
 8003214:	d009      	beq.n	800322a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003216:	4b12      	ldr	r3, [pc, #72]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	490e      	ldr	r1, [pc, #56]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 8003226:	4313      	orrs	r3, r2
 8003228:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800322a:	f000 f821 	bl	8003270 <HAL_RCC_GetSysClockFreq>
 800322e:	4602      	mov	r2, r0
 8003230:	4b0b      	ldr	r3, [pc, #44]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	091b      	lsrs	r3, r3, #4
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	490a      	ldr	r1, [pc, #40]	; (8003264 <HAL_RCC_ClockConfig+0x1c8>)
 800323c:	5ccb      	ldrb	r3, [r1, r3]
 800323e:	fa22 f303 	lsr.w	r3, r2, r3
 8003242:	4a09      	ldr	r2, [pc, #36]	; (8003268 <HAL_RCC_ClockConfig+0x1cc>)
 8003244:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003246:	4b09      	ldr	r3, [pc, #36]	; (800326c <HAL_RCC_ClockConfig+0x1d0>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f7fe f9ba 	bl	80015c4 <HAL_InitTick>

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40022000 	.word	0x40022000
 8003260:	40021000 	.word	0x40021000
 8003264:	08004858 	.word	0x08004858
 8003268:	2000002c 	.word	0x2000002c
 800326c:	20000030 	.word	0x20000030

08003270 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003270:	b480      	push	{r7}
 8003272:	b087      	sub	sp, #28
 8003274:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003276:	2300      	movs	r3, #0
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	2300      	movs	r3, #0
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	2300      	movs	r3, #0
 8003280:	617b      	str	r3, [r7, #20]
 8003282:	2300      	movs	r3, #0
 8003284:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003286:	2300      	movs	r3, #0
 8003288:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800328a:	4b1e      	ldr	r3, [pc, #120]	; (8003304 <HAL_RCC_GetSysClockFreq+0x94>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f003 030c 	and.w	r3, r3, #12
 8003296:	2b04      	cmp	r3, #4
 8003298:	d002      	beq.n	80032a0 <HAL_RCC_GetSysClockFreq+0x30>
 800329a:	2b08      	cmp	r3, #8
 800329c:	d003      	beq.n	80032a6 <HAL_RCC_GetSysClockFreq+0x36>
 800329e:	e027      	b.n	80032f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032a0:	4b19      	ldr	r3, [pc, #100]	; (8003308 <HAL_RCC_GetSysClockFreq+0x98>)
 80032a2:	613b      	str	r3, [r7, #16]
      break;
 80032a4:	e027      	b.n	80032f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	0c9b      	lsrs	r3, r3, #18
 80032aa:	f003 030f 	and.w	r3, r3, #15
 80032ae:	4a17      	ldr	r2, [pc, #92]	; (800330c <HAL_RCC_GetSysClockFreq+0x9c>)
 80032b0:	5cd3      	ldrb	r3, [r2, r3]
 80032b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d010      	beq.n	80032e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032be:	4b11      	ldr	r3, [pc, #68]	; (8003304 <HAL_RCC_GetSysClockFreq+0x94>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	0c5b      	lsrs	r3, r3, #17
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	4a11      	ldr	r2, [pc, #68]	; (8003310 <HAL_RCC_GetSysClockFreq+0xa0>)
 80032ca:	5cd3      	ldrb	r3, [r2, r3]
 80032cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a0d      	ldr	r2, [pc, #52]	; (8003308 <HAL_RCC_GetSysClockFreq+0x98>)
 80032d2:	fb03 f202 	mul.w	r2, r3, r2
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032dc:	617b      	str	r3, [r7, #20]
 80032de:	e004      	b.n	80032ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a0c      	ldr	r2, [pc, #48]	; (8003314 <HAL_RCC_GetSysClockFreq+0xa4>)
 80032e4:	fb02 f303 	mul.w	r3, r2, r3
 80032e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	613b      	str	r3, [r7, #16]
      break;
 80032ee:	e002      	b.n	80032f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032f0:	4b05      	ldr	r3, [pc, #20]	; (8003308 <HAL_RCC_GetSysClockFreq+0x98>)
 80032f2:	613b      	str	r3, [r7, #16]
      break;
 80032f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032f6:	693b      	ldr	r3, [r7, #16]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	371c      	adds	r7, #28
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bc80      	pop	{r7}
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	40021000 	.word	0x40021000
 8003308:	007a1200 	.word	0x007a1200
 800330c:	08004870 	.word	0x08004870
 8003310:	08004880 	.word	0x08004880
 8003314:	003d0900 	.word	0x003d0900

08003318 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800331c:	4b02      	ldr	r3, [pc, #8]	; (8003328 <HAL_RCC_GetHCLKFreq+0x10>)
 800331e:	681b      	ldr	r3, [r3, #0]
}
 8003320:	4618      	mov	r0, r3
 8003322:	46bd      	mov	sp, r7
 8003324:	bc80      	pop	{r7}
 8003326:	4770      	bx	lr
 8003328:	2000002c 	.word	0x2000002c

0800332c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003330:	f7ff fff2 	bl	8003318 <HAL_RCC_GetHCLKFreq>
 8003334:	4602      	mov	r2, r0
 8003336:	4b05      	ldr	r3, [pc, #20]	; (800334c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	0a1b      	lsrs	r3, r3, #8
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	4903      	ldr	r1, [pc, #12]	; (8003350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003342:	5ccb      	ldrb	r3, [r1, r3]
 8003344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003348:	4618      	mov	r0, r3
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40021000 	.word	0x40021000
 8003350:	08004868 	.word	0x08004868

08003354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003358:	f7ff ffde 	bl	8003318 <HAL_RCC_GetHCLKFreq>
 800335c:	4602      	mov	r2, r0
 800335e:	4b05      	ldr	r3, [pc, #20]	; (8003374 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	0adb      	lsrs	r3, r3, #11
 8003364:	f003 0307 	and.w	r3, r3, #7
 8003368:	4903      	ldr	r1, [pc, #12]	; (8003378 <HAL_RCC_GetPCLK2Freq+0x24>)
 800336a:	5ccb      	ldrb	r3, [r1, r3]
 800336c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003370:	4618      	mov	r0, r3
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40021000 	.word	0x40021000
 8003378:	08004868 	.word	0x08004868

0800337c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003384:	4b0a      	ldr	r3, [pc, #40]	; (80033b0 <RCC_Delay+0x34>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a0a      	ldr	r2, [pc, #40]	; (80033b4 <RCC_Delay+0x38>)
 800338a:	fba2 2303 	umull	r2, r3, r2, r3
 800338e:	0a5b      	lsrs	r3, r3, #9
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	fb02 f303 	mul.w	r3, r2, r3
 8003396:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003398:	bf00      	nop
  }
  while (Delay --);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	1e5a      	subs	r2, r3, #1
 800339e:	60fa      	str	r2, [r7, #12]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1f9      	bne.n	8003398 <RCC_Delay+0x1c>
}
 80033a4:	bf00      	nop
 80033a6:	bf00      	nop
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr
 80033b0:	2000002c 	.word	0x2000002c
 80033b4:	10624dd3 	.word	0x10624dd3

080033b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	613b      	str	r3, [r7, #16]
 80033c4:	2300      	movs	r3, #0
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d07d      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80033d4:	2300      	movs	r3, #0
 80033d6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033d8:	4b4f      	ldr	r3, [pc, #316]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10d      	bne.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033e4:	4b4c      	ldr	r3, [pc, #304]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e6:	69db      	ldr	r3, [r3, #28]
 80033e8:	4a4b      	ldr	r2, [pc, #300]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ee:	61d3      	str	r3, [r2, #28]
 80033f0:	4b49      	ldr	r3, [pc, #292]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f8:	60bb      	str	r3, [r7, #8]
 80033fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033fc:	2301      	movs	r3, #1
 80033fe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003400:	4b46      	ldr	r3, [pc, #280]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003408:	2b00      	cmp	r3, #0
 800340a:	d118      	bne.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800340c:	4b43      	ldr	r3, [pc, #268]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a42      	ldr	r2, [pc, #264]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003412:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003416:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003418:	f7fe f916 	bl	8001648 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800341e:	e008      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003420:	f7fe f912 	bl	8001648 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b64      	cmp	r3, #100	; 0x64
 800342c:	d901      	bls.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e06d      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003432:	4b3a      	ldr	r3, [pc, #232]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343a:	2b00      	cmp	r3, #0
 800343c:	d0f0      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800343e:	4b36      	ldr	r3, [pc, #216]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003446:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d02e      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	429a      	cmp	r2, r3
 800345a:	d027      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800345c:	4b2e      	ldr	r3, [pc, #184]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003464:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003466:	4b2e      	ldr	r3, [pc, #184]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003468:	2201      	movs	r2, #1
 800346a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800346c:	4b2c      	ldr	r3, [pc, #176]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800346e:	2200      	movs	r2, #0
 8003470:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003472:	4a29      	ldr	r2, [pc, #164]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d014      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003482:	f7fe f8e1 	bl	8001648 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003488:	e00a      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800348a:	f7fe f8dd 	bl	8001648 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	f241 3288 	movw	r2, #5000	; 0x1388
 8003498:	4293      	cmp	r3, r2
 800349a:	d901      	bls.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e036      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a0:	4b1d      	ldr	r3, [pc, #116]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0ee      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034ac:	4b1a      	ldr	r3, [pc, #104]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	4917      	ldr	r1, [pc, #92]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034be:	7dfb      	ldrb	r3, [r7, #23]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d105      	bne.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c4:	4b14      	ldr	r3, [pc, #80]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	4a13      	ldr	r2, [pc, #76]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d008      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034dc:	4b0e      	ldr	r3, [pc, #56]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	490b      	ldr	r1, [pc, #44]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0310 	and.w	r3, r3, #16
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d008      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034fa:	4b07      	ldr	r3, [pc, #28]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	4904      	ldr	r1, [pc, #16]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003508:	4313      	orrs	r3, r2
 800350a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3718      	adds	r7, #24
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	40021000 	.word	0x40021000
 800351c:	40007000 	.word	0x40007000
 8003520:	42420440 	.word	0x42420440

08003524 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e041      	b.n	80035ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d106      	bne.n	8003550 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7fd ff1c 	bl	8001388 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3304      	adds	r3, #4
 8003560:	4619      	mov	r1, r3
 8003562:	4610      	mov	r0, r2
 8003564:	f000 fa5c 	bl	8003a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
	...

080035c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d001      	beq.n	80035dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e03a      	b.n	8003652 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2202      	movs	r2, #2
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68da      	ldr	r2, [r3, #12]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f042 0201 	orr.w	r2, r2, #1
 80035f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a18      	ldr	r2, [pc, #96]	; (800365c <HAL_TIM_Base_Start_IT+0x98>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d00e      	beq.n	800361c <HAL_TIM_Base_Start_IT+0x58>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003606:	d009      	beq.n	800361c <HAL_TIM_Base_Start_IT+0x58>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a14      	ldr	r2, [pc, #80]	; (8003660 <HAL_TIM_Base_Start_IT+0x9c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d004      	beq.n	800361c <HAL_TIM_Base_Start_IT+0x58>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a13      	ldr	r2, [pc, #76]	; (8003664 <HAL_TIM_Base_Start_IT+0xa0>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d111      	bne.n	8003640 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2b06      	cmp	r3, #6
 800362c:	d010      	beq.n	8003650 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f042 0201 	orr.w	r2, r2, #1
 800363c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800363e:	e007      	b.n	8003650 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0201 	orr.w	r2, r2, #1
 800364e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr
 800365c:	40012c00 	.word	0x40012c00
 8003660:	40000400 	.word	0x40000400
 8003664:	40000800 	.word	0x40000800

08003668 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d020      	beq.n	80036cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d01b      	beq.n	80036cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f06f 0202 	mvn.w	r2, #2
 800369c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f998 	bl	80039e8 <HAL_TIM_IC_CaptureCallback>
 80036b8:	e005      	b.n	80036c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f98b 	bl	80039d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f99a 	bl	80039fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	f003 0304 	and.w	r3, r3, #4
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d020      	beq.n	8003718 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d01b      	beq.n	8003718 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f06f 0204 	mvn.w	r2, #4
 80036e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2202      	movs	r2, #2
 80036ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f972 	bl	80039e8 <HAL_TIM_IC_CaptureCallback>
 8003704:	e005      	b.n	8003712 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f965 	bl	80039d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 f974 	bl	80039fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	f003 0308 	and.w	r3, r3, #8
 800371e:	2b00      	cmp	r3, #0
 8003720:	d020      	beq.n	8003764 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f003 0308 	and.w	r3, r3, #8
 8003728:	2b00      	cmp	r3, #0
 800372a:	d01b      	beq.n	8003764 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f06f 0208 	mvn.w	r2, #8
 8003734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2204      	movs	r2, #4
 800373a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f94c 	bl	80039e8 <HAL_TIM_IC_CaptureCallback>
 8003750:	e005      	b.n	800375e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f93f 	bl	80039d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f94e 	bl	80039fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f003 0310 	and.w	r3, r3, #16
 800376a:	2b00      	cmp	r3, #0
 800376c:	d020      	beq.n	80037b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f003 0310 	and.w	r3, r3, #16
 8003774:	2b00      	cmp	r3, #0
 8003776:	d01b      	beq.n	80037b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f06f 0210 	mvn.w	r2, #16
 8003780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2208      	movs	r2, #8
 8003786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f926 	bl	80039e8 <HAL_TIM_IC_CaptureCallback>
 800379c:	e005      	b.n	80037aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f919 	bl	80039d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f928 	bl	80039fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00c      	beq.n	80037d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d007      	beq.n	80037d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f06f 0201 	mvn.w	r2, #1
 80037cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7fd f98f 	bl	8000af2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00c      	beq.n	80037f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d007      	beq.n	80037f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 fa7f 	bl	8003cf6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00c      	beq.n	800381c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003808:	2b00      	cmp	r3, #0
 800380a:	d007      	beq.n	800381c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f8f8 	bl	8003a0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	f003 0320 	and.w	r3, r3, #32
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00c      	beq.n	8003840 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f003 0320 	and.w	r3, r3, #32
 800382c:	2b00      	cmp	r3, #0
 800382e:	d007      	beq.n	8003840 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f06f 0220 	mvn.w	r2, #32
 8003838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 fa52 	bl	8003ce4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003840:	bf00      	nop
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003852:	2300      	movs	r3, #0
 8003854:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_TIM_ConfigClockSource+0x1c>
 8003860:	2302      	movs	r3, #2
 8003862:	e0b4      	b.n	80039ce <HAL_TIM_ConfigClockSource+0x186>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003882:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800388a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800389c:	d03e      	beq.n	800391c <HAL_TIM_ConfigClockSource+0xd4>
 800389e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038a2:	f200 8087 	bhi.w	80039b4 <HAL_TIM_ConfigClockSource+0x16c>
 80038a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038aa:	f000 8086 	beq.w	80039ba <HAL_TIM_ConfigClockSource+0x172>
 80038ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b2:	d87f      	bhi.n	80039b4 <HAL_TIM_ConfigClockSource+0x16c>
 80038b4:	2b70      	cmp	r3, #112	; 0x70
 80038b6:	d01a      	beq.n	80038ee <HAL_TIM_ConfigClockSource+0xa6>
 80038b8:	2b70      	cmp	r3, #112	; 0x70
 80038ba:	d87b      	bhi.n	80039b4 <HAL_TIM_ConfigClockSource+0x16c>
 80038bc:	2b60      	cmp	r3, #96	; 0x60
 80038be:	d050      	beq.n	8003962 <HAL_TIM_ConfigClockSource+0x11a>
 80038c0:	2b60      	cmp	r3, #96	; 0x60
 80038c2:	d877      	bhi.n	80039b4 <HAL_TIM_ConfigClockSource+0x16c>
 80038c4:	2b50      	cmp	r3, #80	; 0x50
 80038c6:	d03c      	beq.n	8003942 <HAL_TIM_ConfigClockSource+0xfa>
 80038c8:	2b50      	cmp	r3, #80	; 0x50
 80038ca:	d873      	bhi.n	80039b4 <HAL_TIM_ConfigClockSource+0x16c>
 80038cc:	2b40      	cmp	r3, #64	; 0x40
 80038ce:	d058      	beq.n	8003982 <HAL_TIM_ConfigClockSource+0x13a>
 80038d0:	2b40      	cmp	r3, #64	; 0x40
 80038d2:	d86f      	bhi.n	80039b4 <HAL_TIM_ConfigClockSource+0x16c>
 80038d4:	2b30      	cmp	r3, #48	; 0x30
 80038d6:	d064      	beq.n	80039a2 <HAL_TIM_ConfigClockSource+0x15a>
 80038d8:	2b30      	cmp	r3, #48	; 0x30
 80038da:	d86b      	bhi.n	80039b4 <HAL_TIM_ConfigClockSource+0x16c>
 80038dc:	2b20      	cmp	r3, #32
 80038de:	d060      	beq.n	80039a2 <HAL_TIM_ConfigClockSource+0x15a>
 80038e0:	2b20      	cmp	r3, #32
 80038e2:	d867      	bhi.n	80039b4 <HAL_TIM_ConfigClockSource+0x16c>
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d05c      	beq.n	80039a2 <HAL_TIM_ConfigClockSource+0x15a>
 80038e8:	2b10      	cmp	r3, #16
 80038ea:	d05a      	beq.n	80039a2 <HAL_TIM_ConfigClockSource+0x15a>
 80038ec:	e062      	b.n	80039b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6818      	ldr	r0, [r3, #0]
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	6899      	ldr	r1, [r3, #8]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	f000 f974 	bl	8003bea <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003910:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68ba      	ldr	r2, [r7, #8]
 8003918:	609a      	str	r2, [r3, #8]
      break;
 800391a:	e04f      	b.n	80039bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6818      	ldr	r0, [r3, #0]
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	6899      	ldr	r1, [r3, #8]
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	f000 f95d 	bl	8003bea <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689a      	ldr	r2, [r3, #8]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800393e:	609a      	str	r2, [r3, #8]
      break;
 8003940:	e03c      	b.n	80039bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6818      	ldr	r0, [r3, #0]
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	6859      	ldr	r1, [r3, #4]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	461a      	mov	r2, r3
 8003950:	f000 f8d4 	bl	8003afc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2150      	movs	r1, #80	; 0x50
 800395a:	4618      	mov	r0, r3
 800395c:	f000 f92b 	bl	8003bb6 <TIM_ITRx_SetConfig>
      break;
 8003960:	e02c      	b.n	80039bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6818      	ldr	r0, [r3, #0]
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	6859      	ldr	r1, [r3, #4]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	461a      	mov	r2, r3
 8003970:	f000 f8f2 	bl	8003b58 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2160      	movs	r1, #96	; 0x60
 800397a:	4618      	mov	r0, r3
 800397c:	f000 f91b 	bl	8003bb6 <TIM_ITRx_SetConfig>
      break;
 8003980:	e01c      	b.n	80039bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6818      	ldr	r0, [r3, #0]
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	6859      	ldr	r1, [r3, #4]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	461a      	mov	r2, r3
 8003990:	f000 f8b4 	bl	8003afc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2140      	movs	r1, #64	; 0x40
 800399a:	4618      	mov	r0, r3
 800399c:	f000 f90b 	bl	8003bb6 <TIM_ITRx_SetConfig>
      break;
 80039a0:	e00c      	b.n	80039bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4619      	mov	r1, r3
 80039ac:	4610      	mov	r0, r2
 80039ae:	f000 f902 	bl	8003bb6 <TIM_ITRx_SetConfig>
      break;
 80039b2:	e003      	b.n	80039bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	73fb      	strb	r3, [r7, #15]
      break;
 80039b8:	e000      	b.n	80039bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80039ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b083      	sub	sp, #12
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039de:	bf00      	nop
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bc80      	pop	{r7}
 80039e6:	4770      	bx	lr

080039e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bc80      	pop	{r7}
 80039f8:	4770      	bx	lr

080039fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b083      	sub	sp, #12
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bc80      	pop	{r7}
 8003a0a:	4770      	bx	lr

08003a0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bc80      	pop	{r7}
 8003a1c:	4770      	bx	lr
	...

08003a20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a2f      	ldr	r2, [pc, #188]	; (8003af0 <TIM_Base_SetConfig+0xd0>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d00b      	beq.n	8003a50 <TIM_Base_SetConfig+0x30>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a3e:	d007      	beq.n	8003a50 <TIM_Base_SetConfig+0x30>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a2c      	ldr	r2, [pc, #176]	; (8003af4 <TIM_Base_SetConfig+0xd4>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d003      	beq.n	8003a50 <TIM_Base_SetConfig+0x30>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a2b      	ldr	r2, [pc, #172]	; (8003af8 <TIM_Base_SetConfig+0xd8>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d108      	bne.n	8003a62 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a22      	ldr	r2, [pc, #136]	; (8003af0 <TIM_Base_SetConfig+0xd0>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d00b      	beq.n	8003a82 <TIM_Base_SetConfig+0x62>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a70:	d007      	beq.n	8003a82 <TIM_Base_SetConfig+0x62>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a1f      	ldr	r2, [pc, #124]	; (8003af4 <TIM_Base_SetConfig+0xd4>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d003      	beq.n	8003a82 <TIM_Base_SetConfig+0x62>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a1e      	ldr	r2, [pc, #120]	; (8003af8 <TIM_Base_SetConfig+0xd8>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d108      	bne.n	8003a94 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a0d      	ldr	r2, [pc, #52]	; (8003af0 <TIM_Base_SetConfig+0xd0>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d103      	bne.n	8003ac8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	691a      	ldr	r2, [r3, #16]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d005      	beq.n	8003ae6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	f023 0201 	bic.w	r2, r3, #1
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	611a      	str	r2, [r3, #16]
  }
}
 8003ae6:	bf00      	nop
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr
 8003af0:	40012c00 	.word	0x40012c00
 8003af4:	40000400 	.word	0x40000400
 8003af8:	40000800 	.word	0x40000800

08003afc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b087      	sub	sp, #28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	f023 0201 	bic.w	r2, r3, #1
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	011b      	lsls	r3, r3, #4
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	f023 030a 	bic.w	r3, r3, #10
 8003b38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	621a      	str	r2, [r3, #32]
}
 8003b4e:	bf00      	nop
 8003b50:	371c      	adds	r7, #28
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bc80      	pop	{r7}
 8003b56:	4770      	bx	lr

08003b58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	f023 0210 	bic.w	r2, r3, #16
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	031b      	lsls	r3, r3, #12
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b94:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	011b      	lsls	r3, r3, #4
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	621a      	str	r2, [r3, #32]
}
 8003bac:	bf00      	nop
 8003bae:	371c      	adds	r7, #28
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bc80      	pop	{r7}
 8003bb4:	4770      	bx	lr

08003bb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b085      	sub	sp, #20
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
 8003bbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	f043 0307 	orr.w	r3, r3, #7
 8003bd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	609a      	str	r2, [r3, #8]
}
 8003be0:	bf00      	nop
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bc80      	pop	{r7}
 8003be8:	4770      	bx	lr

08003bea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b087      	sub	sp, #28
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	60f8      	str	r0, [r7, #12]
 8003bf2:	60b9      	str	r1, [r7, #8]
 8003bf4:	607a      	str	r2, [r7, #4]
 8003bf6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c04:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	021a      	lsls	r2, r3, #8
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	609a      	str	r2, [r3, #8]
}
 8003c1e:	bf00      	nop
 8003c20:	371c      	adds	r7, #28
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bc80      	pop	{r7}
 8003c26:	4770      	bx	lr

08003c28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d101      	bne.n	8003c40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	e046      	b.n	8003cce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a16      	ldr	r2, [pc, #88]	; (8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d00e      	beq.n	8003ca2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c8c:	d009      	beq.n	8003ca2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a12      	ldr	r2, [pc, #72]	; (8003cdc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d004      	beq.n	8003ca2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a10      	ldr	r2, [pc, #64]	; (8003ce0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d10c      	bne.n	8003cbc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ca8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bc80      	pop	{r7}
 8003cd6:	4770      	bx	lr
 8003cd8:	40012c00 	.word	0x40012c00
 8003cdc:	40000400 	.word	0x40000400
 8003ce0:	40000800 	.word	0x40000800

08003ce4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bc80      	pop	{r7}
 8003cf4:	4770      	bx	lr

08003cf6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b083      	sub	sp, #12
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bc80      	pop	{r7}
 8003d06:	4770      	bx	lr

08003d08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e042      	b.n	8003da0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d106      	bne.n	8003d34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7fd fb4e 	bl	80013d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2224      	movs	r2, #36	; 0x24
 8003d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68da      	ldr	r2, [r3, #12]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f82b 	bl	8003da8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	691a      	ldr	r2, [r3, #16]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695a      	ldr	r2, [r3, #20]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68da      	ldr	r2, [r3, #12]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3708      	adds	r7, #8
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003de2:	f023 030c 	bic.w	r3, r3, #12
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	6812      	ldr	r2, [r2, #0]
 8003dea:	68b9      	ldr	r1, [r7, #8]
 8003dec:	430b      	orrs	r3, r1
 8003dee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	699a      	ldr	r2, [r3, #24]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a2c      	ldr	r2, [pc, #176]	; (8003ebc <UART_SetConfig+0x114>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d103      	bne.n	8003e18 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e10:	f7ff faa0 	bl	8003354 <HAL_RCC_GetPCLK2Freq>
 8003e14:	60f8      	str	r0, [r7, #12]
 8003e16:	e002      	b.n	8003e1e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e18:	f7ff fa88 	bl	800332c <HAL_RCC_GetPCLK1Freq>
 8003e1c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	4613      	mov	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	009a      	lsls	r2, r3, #2
 8003e28:	441a      	add	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e34:	4a22      	ldr	r2, [pc, #136]	; (8003ec0 <UART_SetConfig+0x118>)
 8003e36:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3a:	095b      	lsrs	r3, r3, #5
 8003e3c:	0119      	lsls	r1, r3, #4
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	4613      	mov	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	4413      	add	r3, r2
 8003e46:	009a      	lsls	r2, r3, #2
 8003e48:	441a      	add	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e54:	4b1a      	ldr	r3, [pc, #104]	; (8003ec0 <UART_SetConfig+0x118>)
 8003e56:	fba3 0302 	umull	r0, r3, r3, r2
 8003e5a:	095b      	lsrs	r3, r3, #5
 8003e5c:	2064      	movs	r0, #100	; 0x64
 8003e5e:	fb00 f303 	mul.w	r3, r0, r3
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	011b      	lsls	r3, r3, #4
 8003e66:	3332      	adds	r3, #50	; 0x32
 8003e68:	4a15      	ldr	r2, [pc, #84]	; (8003ec0 <UART_SetConfig+0x118>)
 8003e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6e:	095b      	lsrs	r3, r3, #5
 8003e70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e74:	4419      	add	r1, r3
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4413      	add	r3, r2
 8003e7e:	009a      	lsls	r2, r3, #2
 8003e80:	441a      	add	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ec0 <UART_SetConfig+0x118>)
 8003e8e:	fba3 0302 	umull	r0, r3, r3, r2
 8003e92:	095b      	lsrs	r3, r3, #5
 8003e94:	2064      	movs	r0, #100	; 0x64
 8003e96:	fb00 f303 	mul.w	r3, r0, r3
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	3332      	adds	r3, #50	; 0x32
 8003ea0:	4a07      	ldr	r2, [pc, #28]	; (8003ec0 <UART_SetConfig+0x118>)
 8003ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea6:	095b      	lsrs	r3, r3, #5
 8003ea8:	f003 020f 	and.w	r2, r3, #15
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	440a      	add	r2, r1
 8003eb2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003eb4:	bf00      	nop
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	40013800 	.word	0x40013800
 8003ec0:	51eb851f 	.word	0x51eb851f

08003ec4 <__errno>:
 8003ec4:	4b01      	ldr	r3, [pc, #4]	; (8003ecc <__errno+0x8>)
 8003ec6:	6818      	ldr	r0, [r3, #0]
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	20000038 	.word	0x20000038

08003ed0 <__libc_init_array>:
 8003ed0:	b570      	push	{r4, r5, r6, lr}
 8003ed2:	2600      	movs	r6, #0
 8003ed4:	4d0c      	ldr	r5, [pc, #48]	; (8003f08 <__libc_init_array+0x38>)
 8003ed6:	4c0d      	ldr	r4, [pc, #52]	; (8003f0c <__libc_init_array+0x3c>)
 8003ed8:	1b64      	subs	r4, r4, r5
 8003eda:	10a4      	asrs	r4, r4, #2
 8003edc:	42a6      	cmp	r6, r4
 8003ede:	d109      	bne.n	8003ef4 <__libc_init_array+0x24>
 8003ee0:	f000 fc9c 	bl	800481c <_init>
 8003ee4:	2600      	movs	r6, #0
 8003ee6:	4d0a      	ldr	r5, [pc, #40]	; (8003f10 <__libc_init_array+0x40>)
 8003ee8:	4c0a      	ldr	r4, [pc, #40]	; (8003f14 <__libc_init_array+0x44>)
 8003eea:	1b64      	subs	r4, r4, r5
 8003eec:	10a4      	asrs	r4, r4, #2
 8003eee:	42a6      	cmp	r6, r4
 8003ef0:	d105      	bne.n	8003efe <__libc_init_array+0x2e>
 8003ef2:	bd70      	pop	{r4, r5, r6, pc}
 8003ef4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ef8:	4798      	blx	r3
 8003efa:	3601      	adds	r6, #1
 8003efc:	e7ee      	b.n	8003edc <__libc_init_array+0xc>
 8003efe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f02:	4798      	blx	r3
 8003f04:	3601      	adds	r6, #1
 8003f06:	e7f2      	b.n	8003eee <__libc_init_array+0x1e>
 8003f08:	080048b8 	.word	0x080048b8
 8003f0c:	080048b8 	.word	0x080048b8
 8003f10:	080048b8 	.word	0x080048b8
 8003f14:	080048bc 	.word	0x080048bc

08003f18 <memset>:
 8003f18:	4603      	mov	r3, r0
 8003f1a:	4402      	add	r2, r0
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d100      	bne.n	8003f22 <memset+0xa>
 8003f20:	4770      	bx	lr
 8003f22:	f803 1b01 	strb.w	r1, [r3], #1
 8003f26:	e7f9      	b.n	8003f1c <memset+0x4>

08003f28 <siprintf>:
 8003f28:	b40e      	push	{r1, r2, r3}
 8003f2a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f2e:	b500      	push	{lr}
 8003f30:	b09c      	sub	sp, #112	; 0x70
 8003f32:	ab1d      	add	r3, sp, #116	; 0x74
 8003f34:	9002      	str	r0, [sp, #8]
 8003f36:	9006      	str	r0, [sp, #24]
 8003f38:	9107      	str	r1, [sp, #28]
 8003f3a:	9104      	str	r1, [sp, #16]
 8003f3c:	4808      	ldr	r0, [pc, #32]	; (8003f60 <siprintf+0x38>)
 8003f3e:	4909      	ldr	r1, [pc, #36]	; (8003f64 <siprintf+0x3c>)
 8003f40:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f44:	9105      	str	r1, [sp, #20]
 8003f46:	6800      	ldr	r0, [r0, #0]
 8003f48:	a902      	add	r1, sp, #8
 8003f4a:	9301      	str	r3, [sp, #4]
 8003f4c:	f000 f868 	bl	8004020 <_svfiprintf_r>
 8003f50:	2200      	movs	r2, #0
 8003f52:	9b02      	ldr	r3, [sp, #8]
 8003f54:	701a      	strb	r2, [r3, #0]
 8003f56:	b01c      	add	sp, #112	; 0x70
 8003f58:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f5c:	b003      	add	sp, #12
 8003f5e:	4770      	bx	lr
 8003f60:	20000038 	.word	0x20000038
 8003f64:	ffff0208 	.word	0xffff0208

08003f68 <__ssputs_r>:
 8003f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f6c:	688e      	ldr	r6, [r1, #8]
 8003f6e:	4682      	mov	sl, r0
 8003f70:	429e      	cmp	r6, r3
 8003f72:	460c      	mov	r4, r1
 8003f74:	4690      	mov	r8, r2
 8003f76:	461f      	mov	r7, r3
 8003f78:	d838      	bhi.n	8003fec <__ssputs_r+0x84>
 8003f7a:	898a      	ldrh	r2, [r1, #12]
 8003f7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f80:	d032      	beq.n	8003fe8 <__ssputs_r+0x80>
 8003f82:	6825      	ldr	r5, [r4, #0]
 8003f84:	6909      	ldr	r1, [r1, #16]
 8003f86:	3301      	adds	r3, #1
 8003f88:	eba5 0901 	sub.w	r9, r5, r1
 8003f8c:	6965      	ldr	r5, [r4, #20]
 8003f8e:	444b      	add	r3, r9
 8003f90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f98:	106d      	asrs	r5, r5, #1
 8003f9a:	429d      	cmp	r5, r3
 8003f9c:	bf38      	it	cc
 8003f9e:	461d      	movcc	r5, r3
 8003fa0:	0553      	lsls	r3, r2, #21
 8003fa2:	d531      	bpl.n	8004008 <__ssputs_r+0xa0>
 8003fa4:	4629      	mov	r1, r5
 8003fa6:	f000 fb6f 	bl	8004688 <_malloc_r>
 8003faa:	4606      	mov	r6, r0
 8003fac:	b950      	cbnz	r0, 8003fc4 <__ssputs_r+0x5c>
 8003fae:	230c      	movs	r3, #12
 8003fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb4:	f8ca 3000 	str.w	r3, [sl]
 8003fb8:	89a3      	ldrh	r3, [r4, #12]
 8003fba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fbe:	81a3      	strh	r3, [r4, #12]
 8003fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fc4:	464a      	mov	r2, r9
 8003fc6:	6921      	ldr	r1, [r4, #16]
 8003fc8:	f000 face 	bl	8004568 <memcpy>
 8003fcc:	89a3      	ldrh	r3, [r4, #12]
 8003fce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fd6:	81a3      	strh	r3, [r4, #12]
 8003fd8:	6126      	str	r6, [r4, #16]
 8003fda:	444e      	add	r6, r9
 8003fdc:	6026      	str	r6, [r4, #0]
 8003fde:	463e      	mov	r6, r7
 8003fe0:	6165      	str	r5, [r4, #20]
 8003fe2:	eba5 0509 	sub.w	r5, r5, r9
 8003fe6:	60a5      	str	r5, [r4, #8]
 8003fe8:	42be      	cmp	r6, r7
 8003fea:	d900      	bls.n	8003fee <__ssputs_r+0x86>
 8003fec:	463e      	mov	r6, r7
 8003fee:	4632      	mov	r2, r6
 8003ff0:	4641      	mov	r1, r8
 8003ff2:	6820      	ldr	r0, [r4, #0]
 8003ff4:	f000 fac6 	bl	8004584 <memmove>
 8003ff8:	68a3      	ldr	r3, [r4, #8]
 8003ffa:	2000      	movs	r0, #0
 8003ffc:	1b9b      	subs	r3, r3, r6
 8003ffe:	60a3      	str	r3, [r4, #8]
 8004000:	6823      	ldr	r3, [r4, #0]
 8004002:	4433      	add	r3, r6
 8004004:	6023      	str	r3, [r4, #0]
 8004006:	e7db      	b.n	8003fc0 <__ssputs_r+0x58>
 8004008:	462a      	mov	r2, r5
 800400a:	f000 fbb1 	bl	8004770 <_realloc_r>
 800400e:	4606      	mov	r6, r0
 8004010:	2800      	cmp	r0, #0
 8004012:	d1e1      	bne.n	8003fd8 <__ssputs_r+0x70>
 8004014:	4650      	mov	r0, sl
 8004016:	6921      	ldr	r1, [r4, #16]
 8004018:	f000 face 	bl	80045b8 <_free_r>
 800401c:	e7c7      	b.n	8003fae <__ssputs_r+0x46>
	...

08004020 <_svfiprintf_r>:
 8004020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004024:	4698      	mov	r8, r3
 8004026:	898b      	ldrh	r3, [r1, #12]
 8004028:	4607      	mov	r7, r0
 800402a:	061b      	lsls	r3, r3, #24
 800402c:	460d      	mov	r5, r1
 800402e:	4614      	mov	r4, r2
 8004030:	b09d      	sub	sp, #116	; 0x74
 8004032:	d50e      	bpl.n	8004052 <_svfiprintf_r+0x32>
 8004034:	690b      	ldr	r3, [r1, #16]
 8004036:	b963      	cbnz	r3, 8004052 <_svfiprintf_r+0x32>
 8004038:	2140      	movs	r1, #64	; 0x40
 800403a:	f000 fb25 	bl	8004688 <_malloc_r>
 800403e:	6028      	str	r0, [r5, #0]
 8004040:	6128      	str	r0, [r5, #16]
 8004042:	b920      	cbnz	r0, 800404e <_svfiprintf_r+0x2e>
 8004044:	230c      	movs	r3, #12
 8004046:	603b      	str	r3, [r7, #0]
 8004048:	f04f 30ff 	mov.w	r0, #4294967295
 800404c:	e0d1      	b.n	80041f2 <_svfiprintf_r+0x1d2>
 800404e:	2340      	movs	r3, #64	; 0x40
 8004050:	616b      	str	r3, [r5, #20]
 8004052:	2300      	movs	r3, #0
 8004054:	9309      	str	r3, [sp, #36]	; 0x24
 8004056:	2320      	movs	r3, #32
 8004058:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800405c:	2330      	movs	r3, #48	; 0x30
 800405e:	f04f 0901 	mov.w	r9, #1
 8004062:	f8cd 800c 	str.w	r8, [sp, #12]
 8004066:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800420c <_svfiprintf_r+0x1ec>
 800406a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800406e:	4623      	mov	r3, r4
 8004070:	469a      	mov	sl, r3
 8004072:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004076:	b10a      	cbz	r2, 800407c <_svfiprintf_r+0x5c>
 8004078:	2a25      	cmp	r2, #37	; 0x25
 800407a:	d1f9      	bne.n	8004070 <_svfiprintf_r+0x50>
 800407c:	ebba 0b04 	subs.w	fp, sl, r4
 8004080:	d00b      	beq.n	800409a <_svfiprintf_r+0x7a>
 8004082:	465b      	mov	r3, fp
 8004084:	4622      	mov	r2, r4
 8004086:	4629      	mov	r1, r5
 8004088:	4638      	mov	r0, r7
 800408a:	f7ff ff6d 	bl	8003f68 <__ssputs_r>
 800408e:	3001      	adds	r0, #1
 8004090:	f000 80aa 	beq.w	80041e8 <_svfiprintf_r+0x1c8>
 8004094:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004096:	445a      	add	r2, fp
 8004098:	9209      	str	r2, [sp, #36]	; 0x24
 800409a:	f89a 3000 	ldrb.w	r3, [sl]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f000 80a2 	beq.w	80041e8 <_svfiprintf_r+0x1c8>
 80040a4:	2300      	movs	r3, #0
 80040a6:	f04f 32ff 	mov.w	r2, #4294967295
 80040aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040ae:	f10a 0a01 	add.w	sl, sl, #1
 80040b2:	9304      	str	r3, [sp, #16]
 80040b4:	9307      	str	r3, [sp, #28]
 80040b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040ba:	931a      	str	r3, [sp, #104]	; 0x68
 80040bc:	4654      	mov	r4, sl
 80040be:	2205      	movs	r2, #5
 80040c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040c4:	4851      	ldr	r0, [pc, #324]	; (800420c <_svfiprintf_r+0x1ec>)
 80040c6:	f000 fa41 	bl	800454c <memchr>
 80040ca:	9a04      	ldr	r2, [sp, #16]
 80040cc:	b9d8      	cbnz	r0, 8004106 <_svfiprintf_r+0xe6>
 80040ce:	06d0      	lsls	r0, r2, #27
 80040d0:	bf44      	itt	mi
 80040d2:	2320      	movmi	r3, #32
 80040d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040d8:	0711      	lsls	r1, r2, #28
 80040da:	bf44      	itt	mi
 80040dc:	232b      	movmi	r3, #43	; 0x2b
 80040de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040e2:	f89a 3000 	ldrb.w	r3, [sl]
 80040e6:	2b2a      	cmp	r3, #42	; 0x2a
 80040e8:	d015      	beq.n	8004116 <_svfiprintf_r+0xf6>
 80040ea:	4654      	mov	r4, sl
 80040ec:	2000      	movs	r0, #0
 80040ee:	f04f 0c0a 	mov.w	ip, #10
 80040f2:	9a07      	ldr	r2, [sp, #28]
 80040f4:	4621      	mov	r1, r4
 80040f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040fa:	3b30      	subs	r3, #48	; 0x30
 80040fc:	2b09      	cmp	r3, #9
 80040fe:	d94e      	bls.n	800419e <_svfiprintf_r+0x17e>
 8004100:	b1b0      	cbz	r0, 8004130 <_svfiprintf_r+0x110>
 8004102:	9207      	str	r2, [sp, #28]
 8004104:	e014      	b.n	8004130 <_svfiprintf_r+0x110>
 8004106:	eba0 0308 	sub.w	r3, r0, r8
 800410a:	fa09 f303 	lsl.w	r3, r9, r3
 800410e:	4313      	orrs	r3, r2
 8004110:	46a2      	mov	sl, r4
 8004112:	9304      	str	r3, [sp, #16]
 8004114:	e7d2      	b.n	80040bc <_svfiprintf_r+0x9c>
 8004116:	9b03      	ldr	r3, [sp, #12]
 8004118:	1d19      	adds	r1, r3, #4
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	9103      	str	r1, [sp, #12]
 800411e:	2b00      	cmp	r3, #0
 8004120:	bfbb      	ittet	lt
 8004122:	425b      	neglt	r3, r3
 8004124:	f042 0202 	orrlt.w	r2, r2, #2
 8004128:	9307      	strge	r3, [sp, #28]
 800412a:	9307      	strlt	r3, [sp, #28]
 800412c:	bfb8      	it	lt
 800412e:	9204      	strlt	r2, [sp, #16]
 8004130:	7823      	ldrb	r3, [r4, #0]
 8004132:	2b2e      	cmp	r3, #46	; 0x2e
 8004134:	d10c      	bne.n	8004150 <_svfiprintf_r+0x130>
 8004136:	7863      	ldrb	r3, [r4, #1]
 8004138:	2b2a      	cmp	r3, #42	; 0x2a
 800413a:	d135      	bne.n	80041a8 <_svfiprintf_r+0x188>
 800413c:	9b03      	ldr	r3, [sp, #12]
 800413e:	3402      	adds	r4, #2
 8004140:	1d1a      	adds	r2, r3, #4
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	9203      	str	r2, [sp, #12]
 8004146:	2b00      	cmp	r3, #0
 8004148:	bfb8      	it	lt
 800414a:	f04f 33ff 	movlt.w	r3, #4294967295
 800414e:	9305      	str	r3, [sp, #20]
 8004150:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004210 <_svfiprintf_r+0x1f0>
 8004154:	2203      	movs	r2, #3
 8004156:	4650      	mov	r0, sl
 8004158:	7821      	ldrb	r1, [r4, #0]
 800415a:	f000 f9f7 	bl	800454c <memchr>
 800415e:	b140      	cbz	r0, 8004172 <_svfiprintf_r+0x152>
 8004160:	2340      	movs	r3, #64	; 0x40
 8004162:	eba0 000a 	sub.w	r0, r0, sl
 8004166:	fa03 f000 	lsl.w	r0, r3, r0
 800416a:	9b04      	ldr	r3, [sp, #16]
 800416c:	3401      	adds	r4, #1
 800416e:	4303      	orrs	r3, r0
 8004170:	9304      	str	r3, [sp, #16]
 8004172:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004176:	2206      	movs	r2, #6
 8004178:	4826      	ldr	r0, [pc, #152]	; (8004214 <_svfiprintf_r+0x1f4>)
 800417a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800417e:	f000 f9e5 	bl	800454c <memchr>
 8004182:	2800      	cmp	r0, #0
 8004184:	d038      	beq.n	80041f8 <_svfiprintf_r+0x1d8>
 8004186:	4b24      	ldr	r3, [pc, #144]	; (8004218 <_svfiprintf_r+0x1f8>)
 8004188:	bb1b      	cbnz	r3, 80041d2 <_svfiprintf_r+0x1b2>
 800418a:	9b03      	ldr	r3, [sp, #12]
 800418c:	3307      	adds	r3, #7
 800418e:	f023 0307 	bic.w	r3, r3, #7
 8004192:	3308      	adds	r3, #8
 8004194:	9303      	str	r3, [sp, #12]
 8004196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004198:	4433      	add	r3, r6
 800419a:	9309      	str	r3, [sp, #36]	; 0x24
 800419c:	e767      	b.n	800406e <_svfiprintf_r+0x4e>
 800419e:	460c      	mov	r4, r1
 80041a0:	2001      	movs	r0, #1
 80041a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80041a6:	e7a5      	b.n	80040f4 <_svfiprintf_r+0xd4>
 80041a8:	2300      	movs	r3, #0
 80041aa:	f04f 0c0a 	mov.w	ip, #10
 80041ae:	4619      	mov	r1, r3
 80041b0:	3401      	adds	r4, #1
 80041b2:	9305      	str	r3, [sp, #20]
 80041b4:	4620      	mov	r0, r4
 80041b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041ba:	3a30      	subs	r2, #48	; 0x30
 80041bc:	2a09      	cmp	r2, #9
 80041be:	d903      	bls.n	80041c8 <_svfiprintf_r+0x1a8>
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d0c5      	beq.n	8004150 <_svfiprintf_r+0x130>
 80041c4:	9105      	str	r1, [sp, #20]
 80041c6:	e7c3      	b.n	8004150 <_svfiprintf_r+0x130>
 80041c8:	4604      	mov	r4, r0
 80041ca:	2301      	movs	r3, #1
 80041cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80041d0:	e7f0      	b.n	80041b4 <_svfiprintf_r+0x194>
 80041d2:	ab03      	add	r3, sp, #12
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	462a      	mov	r2, r5
 80041d8:	4638      	mov	r0, r7
 80041da:	4b10      	ldr	r3, [pc, #64]	; (800421c <_svfiprintf_r+0x1fc>)
 80041dc:	a904      	add	r1, sp, #16
 80041de:	f3af 8000 	nop.w
 80041e2:	1c42      	adds	r2, r0, #1
 80041e4:	4606      	mov	r6, r0
 80041e6:	d1d6      	bne.n	8004196 <_svfiprintf_r+0x176>
 80041e8:	89ab      	ldrh	r3, [r5, #12]
 80041ea:	065b      	lsls	r3, r3, #25
 80041ec:	f53f af2c 	bmi.w	8004048 <_svfiprintf_r+0x28>
 80041f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041f2:	b01d      	add	sp, #116	; 0x74
 80041f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041f8:	ab03      	add	r3, sp, #12
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	462a      	mov	r2, r5
 80041fe:	4638      	mov	r0, r7
 8004200:	4b06      	ldr	r3, [pc, #24]	; (800421c <_svfiprintf_r+0x1fc>)
 8004202:	a904      	add	r1, sp, #16
 8004204:	f000 f87c 	bl	8004300 <_printf_i>
 8004208:	e7eb      	b.n	80041e2 <_svfiprintf_r+0x1c2>
 800420a:	bf00      	nop
 800420c:	08004882 	.word	0x08004882
 8004210:	08004888 	.word	0x08004888
 8004214:	0800488c 	.word	0x0800488c
 8004218:	00000000 	.word	0x00000000
 800421c:	08003f69 	.word	0x08003f69

08004220 <_printf_common>:
 8004220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004224:	4616      	mov	r6, r2
 8004226:	4699      	mov	r9, r3
 8004228:	688a      	ldr	r2, [r1, #8]
 800422a:	690b      	ldr	r3, [r1, #16]
 800422c:	4607      	mov	r7, r0
 800422e:	4293      	cmp	r3, r2
 8004230:	bfb8      	it	lt
 8004232:	4613      	movlt	r3, r2
 8004234:	6033      	str	r3, [r6, #0]
 8004236:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800423a:	460c      	mov	r4, r1
 800423c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004240:	b10a      	cbz	r2, 8004246 <_printf_common+0x26>
 8004242:	3301      	adds	r3, #1
 8004244:	6033      	str	r3, [r6, #0]
 8004246:	6823      	ldr	r3, [r4, #0]
 8004248:	0699      	lsls	r1, r3, #26
 800424a:	bf42      	ittt	mi
 800424c:	6833      	ldrmi	r3, [r6, #0]
 800424e:	3302      	addmi	r3, #2
 8004250:	6033      	strmi	r3, [r6, #0]
 8004252:	6825      	ldr	r5, [r4, #0]
 8004254:	f015 0506 	ands.w	r5, r5, #6
 8004258:	d106      	bne.n	8004268 <_printf_common+0x48>
 800425a:	f104 0a19 	add.w	sl, r4, #25
 800425e:	68e3      	ldr	r3, [r4, #12]
 8004260:	6832      	ldr	r2, [r6, #0]
 8004262:	1a9b      	subs	r3, r3, r2
 8004264:	42ab      	cmp	r3, r5
 8004266:	dc28      	bgt.n	80042ba <_printf_common+0x9a>
 8004268:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800426c:	1e13      	subs	r3, r2, #0
 800426e:	6822      	ldr	r2, [r4, #0]
 8004270:	bf18      	it	ne
 8004272:	2301      	movne	r3, #1
 8004274:	0692      	lsls	r2, r2, #26
 8004276:	d42d      	bmi.n	80042d4 <_printf_common+0xb4>
 8004278:	4649      	mov	r1, r9
 800427a:	4638      	mov	r0, r7
 800427c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004280:	47c0      	blx	r8
 8004282:	3001      	adds	r0, #1
 8004284:	d020      	beq.n	80042c8 <_printf_common+0xa8>
 8004286:	6823      	ldr	r3, [r4, #0]
 8004288:	68e5      	ldr	r5, [r4, #12]
 800428a:	f003 0306 	and.w	r3, r3, #6
 800428e:	2b04      	cmp	r3, #4
 8004290:	bf18      	it	ne
 8004292:	2500      	movne	r5, #0
 8004294:	6832      	ldr	r2, [r6, #0]
 8004296:	f04f 0600 	mov.w	r6, #0
 800429a:	68a3      	ldr	r3, [r4, #8]
 800429c:	bf08      	it	eq
 800429e:	1aad      	subeq	r5, r5, r2
 80042a0:	6922      	ldr	r2, [r4, #16]
 80042a2:	bf08      	it	eq
 80042a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042a8:	4293      	cmp	r3, r2
 80042aa:	bfc4      	itt	gt
 80042ac:	1a9b      	subgt	r3, r3, r2
 80042ae:	18ed      	addgt	r5, r5, r3
 80042b0:	341a      	adds	r4, #26
 80042b2:	42b5      	cmp	r5, r6
 80042b4:	d11a      	bne.n	80042ec <_printf_common+0xcc>
 80042b6:	2000      	movs	r0, #0
 80042b8:	e008      	b.n	80042cc <_printf_common+0xac>
 80042ba:	2301      	movs	r3, #1
 80042bc:	4652      	mov	r2, sl
 80042be:	4649      	mov	r1, r9
 80042c0:	4638      	mov	r0, r7
 80042c2:	47c0      	blx	r8
 80042c4:	3001      	adds	r0, #1
 80042c6:	d103      	bne.n	80042d0 <_printf_common+0xb0>
 80042c8:	f04f 30ff 	mov.w	r0, #4294967295
 80042cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042d0:	3501      	adds	r5, #1
 80042d2:	e7c4      	b.n	800425e <_printf_common+0x3e>
 80042d4:	2030      	movs	r0, #48	; 0x30
 80042d6:	18e1      	adds	r1, r4, r3
 80042d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042dc:	1c5a      	adds	r2, r3, #1
 80042de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042e2:	4422      	add	r2, r4
 80042e4:	3302      	adds	r3, #2
 80042e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042ea:	e7c5      	b.n	8004278 <_printf_common+0x58>
 80042ec:	2301      	movs	r3, #1
 80042ee:	4622      	mov	r2, r4
 80042f0:	4649      	mov	r1, r9
 80042f2:	4638      	mov	r0, r7
 80042f4:	47c0      	blx	r8
 80042f6:	3001      	adds	r0, #1
 80042f8:	d0e6      	beq.n	80042c8 <_printf_common+0xa8>
 80042fa:	3601      	adds	r6, #1
 80042fc:	e7d9      	b.n	80042b2 <_printf_common+0x92>
	...

08004300 <_printf_i>:
 8004300:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004304:	7e0f      	ldrb	r7, [r1, #24]
 8004306:	4691      	mov	r9, r2
 8004308:	2f78      	cmp	r7, #120	; 0x78
 800430a:	4680      	mov	r8, r0
 800430c:	460c      	mov	r4, r1
 800430e:	469a      	mov	sl, r3
 8004310:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004312:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004316:	d807      	bhi.n	8004328 <_printf_i+0x28>
 8004318:	2f62      	cmp	r7, #98	; 0x62
 800431a:	d80a      	bhi.n	8004332 <_printf_i+0x32>
 800431c:	2f00      	cmp	r7, #0
 800431e:	f000 80d9 	beq.w	80044d4 <_printf_i+0x1d4>
 8004322:	2f58      	cmp	r7, #88	; 0x58
 8004324:	f000 80a4 	beq.w	8004470 <_printf_i+0x170>
 8004328:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800432c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004330:	e03a      	b.n	80043a8 <_printf_i+0xa8>
 8004332:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004336:	2b15      	cmp	r3, #21
 8004338:	d8f6      	bhi.n	8004328 <_printf_i+0x28>
 800433a:	a101      	add	r1, pc, #4	; (adr r1, 8004340 <_printf_i+0x40>)
 800433c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004340:	08004399 	.word	0x08004399
 8004344:	080043ad 	.word	0x080043ad
 8004348:	08004329 	.word	0x08004329
 800434c:	08004329 	.word	0x08004329
 8004350:	08004329 	.word	0x08004329
 8004354:	08004329 	.word	0x08004329
 8004358:	080043ad 	.word	0x080043ad
 800435c:	08004329 	.word	0x08004329
 8004360:	08004329 	.word	0x08004329
 8004364:	08004329 	.word	0x08004329
 8004368:	08004329 	.word	0x08004329
 800436c:	080044bb 	.word	0x080044bb
 8004370:	080043dd 	.word	0x080043dd
 8004374:	0800449d 	.word	0x0800449d
 8004378:	08004329 	.word	0x08004329
 800437c:	08004329 	.word	0x08004329
 8004380:	080044dd 	.word	0x080044dd
 8004384:	08004329 	.word	0x08004329
 8004388:	080043dd 	.word	0x080043dd
 800438c:	08004329 	.word	0x08004329
 8004390:	08004329 	.word	0x08004329
 8004394:	080044a5 	.word	0x080044a5
 8004398:	682b      	ldr	r3, [r5, #0]
 800439a:	1d1a      	adds	r2, r3, #4
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	602a      	str	r2, [r5, #0]
 80043a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043a8:	2301      	movs	r3, #1
 80043aa:	e0a4      	b.n	80044f6 <_printf_i+0x1f6>
 80043ac:	6820      	ldr	r0, [r4, #0]
 80043ae:	6829      	ldr	r1, [r5, #0]
 80043b0:	0606      	lsls	r6, r0, #24
 80043b2:	f101 0304 	add.w	r3, r1, #4
 80043b6:	d50a      	bpl.n	80043ce <_printf_i+0xce>
 80043b8:	680e      	ldr	r6, [r1, #0]
 80043ba:	602b      	str	r3, [r5, #0]
 80043bc:	2e00      	cmp	r6, #0
 80043be:	da03      	bge.n	80043c8 <_printf_i+0xc8>
 80043c0:	232d      	movs	r3, #45	; 0x2d
 80043c2:	4276      	negs	r6, r6
 80043c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043c8:	230a      	movs	r3, #10
 80043ca:	485e      	ldr	r0, [pc, #376]	; (8004544 <_printf_i+0x244>)
 80043cc:	e019      	b.n	8004402 <_printf_i+0x102>
 80043ce:	680e      	ldr	r6, [r1, #0]
 80043d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80043d4:	602b      	str	r3, [r5, #0]
 80043d6:	bf18      	it	ne
 80043d8:	b236      	sxthne	r6, r6
 80043da:	e7ef      	b.n	80043bc <_printf_i+0xbc>
 80043dc:	682b      	ldr	r3, [r5, #0]
 80043de:	6820      	ldr	r0, [r4, #0]
 80043e0:	1d19      	adds	r1, r3, #4
 80043e2:	6029      	str	r1, [r5, #0]
 80043e4:	0601      	lsls	r1, r0, #24
 80043e6:	d501      	bpl.n	80043ec <_printf_i+0xec>
 80043e8:	681e      	ldr	r6, [r3, #0]
 80043ea:	e002      	b.n	80043f2 <_printf_i+0xf2>
 80043ec:	0646      	lsls	r6, r0, #25
 80043ee:	d5fb      	bpl.n	80043e8 <_printf_i+0xe8>
 80043f0:	881e      	ldrh	r6, [r3, #0]
 80043f2:	2f6f      	cmp	r7, #111	; 0x6f
 80043f4:	bf0c      	ite	eq
 80043f6:	2308      	moveq	r3, #8
 80043f8:	230a      	movne	r3, #10
 80043fa:	4852      	ldr	r0, [pc, #328]	; (8004544 <_printf_i+0x244>)
 80043fc:	2100      	movs	r1, #0
 80043fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004402:	6865      	ldr	r5, [r4, #4]
 8004404:	2d00      	cmp	r5, #0
 8004406:	bfa8      	it	ge
 8004408:	6821      	ldrge	r1, [r4, #0]
 800440a:	60a5      	str	r5, [r4, #8]
 800440c:	bfa4      	itt	ge
 800440e:	f021 0104 	bicge.w	r1, r1, #4
 8004412:	6021      	strge	r1, [r4, #0]
 8004414:	b90e      	cbnz	r6, 800441a <_printf_i+0x11a>
 8004416:	2d00      	cmp	r5, #0
 8004418:	d04d      	beq.n	80044b6 <_printf_i+0x1b6>
 800441a:	4615      	mov	r5, r2
 800441c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004420:	fb03 6711 	mls	r7, r3, r1, r6
 8004424:	5dc7      	ldrb	r7, [r0, r7]
 8004426:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800442a:	4637      	mov	r7, r6
 800442c:	42bb      	cmp	r3, r7
 800442e:	460e      	mov	r6, r1
 8004430:	d9f4      	bls.n	800441c <_printf_i+0x11c>
 8004432:	2b08      	cmp	r3, #8
 8004434:	d10b      	bne.n	800444e <_printf_i+0x14e>
 8004436:	6823      	ldr	r3, [r4, #0]
 8004438:	07de      	lsls	r6, r3, #31
 800443a:	d508      	bpl.n	800444e <_printf_i+0x14e>
 800443c:	6923      	ldr	r3, [r4, #16]
 800443e:	6861      	ldr	r1, [r4, #4]
 8004440:	4299      	cmp	r1, r3
 8004442:	bfde      	ittt	le
 8004444:	2330      	movle	r3, #48	; 0x30
 8004446:	f805 3c01 	strble.w	r3, [r5, #-1]
 800444a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800444e:	1b52      	subs	r2, r2, r5
 8004450:	6122      	str	r2, [r4, #16]
 8004452:	464b      	mov	r3, r9
 8004454:	4621      	mov	r1, r4
 8004456:	4640      	mov	r0, r8
 8004458:	f8cd a000 	str.w	sl, [sp]
 800445c:	aa03      	add	r2, sp, #12
 800445e:	f7ff fedf 	bl	8004220 <_printf_common>
 8004462:	3001      	adds	r0, #1
 8004464:	d14c      	bne.n	8004500 <_printf_i+0x200>
 8004466:	f04f 30ff 	mov.w	r0, #4294967295
 800446a:	b004      	add	sp, #16
 800446c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004470:	4834      	ldr	r0, [pc, #208]	; (8004544 <_printf_i+0x244>)
 8004472:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004476:	6829      	ldr	r1, [r5, #0]
 8004478:	6823      	ldr	r3, [r4, #0]
 800447a:	f851 6b04 	ldr.w	r6, [r1], #4
 800447e:	6029      	str	r1, [r5, #0]
 8004480:	061d      	lsls	r5, r3, #24
 8004482:	d514      	bpl.n	80044ae <_printf_i+0x1ae>
 8004484:	07df      	lsls	r7, r3, #31
 8004486:	bf44      	itt	mi
 8004488:	f043 0320 	orrmi.w	r3, r3, #32
 800448c:	6023      	strmi	r3, [r4, #0]
 800448e:	b91e      	cbnz	r6, 8004498 <_printf_i+0x198>
 8004490:	6823      	ldr	r3, [r4, #0]
 8004492:	f023 0320 	bic.w	r3, r3, #32
 8004496:	6023      	str	r3, [r4, #0]
 8004498:	2310      	movs	r3, #16
 800449a:	e7af      	b.n	80043fc <_printf_i+0xfc>
 800449c:	6823      	ldr	r3, [r4, #0]
 800449e:	f043 0320 	orr.w	r3, r3, #32
 80044a2:	6023      	str	r3, [r4, #0]
 80044a4:	2378      	movs	r3, #120	; 0x78
 80044a6:	4828      	ldr	r0, [pc, #160]	; (8004548 <_printf_i+0x248>)
 80044a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044ac:	e7e3      	b.n	8004476 <_printf_i+0x176>
 80044ae:	0659      	lsls	r1, r3, #25
 80044b0:	bf48      	it	mi
 80044b2:	b2b6      	uxthmi	r6, r6
 80044b4:	e7e6      	b.n	8004484 <_printf_i+0x184>
 80044b6:	4615      	mov	r5, r2
 80044b8:	e7bb      	b.n	8004432 <_printf_i+0x132>
 80044ba:	682b      	ldr	r3, [r5, #0]
 80044bc:	6826      	ldr	r6, [r4, #0]
 80044be:	1d18      	adds	r0, r3, #4
 80044c0:	6961      	ldr	r1, [r4, #20]
 80044c2:	6028      	str	r0, [r5, #0]
 80044c4:	0635      	lsls	r5, r6, #24
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	d501      	bpl.n	80044ce <_printf_i+0x1ce>
 80044ca:	6019      	str	r1, [r3, #0]
 80044cc:	e002      	b.n	80044d4 <_printf_i+0x1d4>
 80044ce:	0670      	lsls	r0, r6, #25
 80044d0:	d5fb      	bpl.n	80044ca <_printf_i+0x1ca>
 80044d2:	8019      	strh	r1, [r3, #0]
 80044d4:	2300      	movs	r3, #0
 80044d6:	4615      	mov	r5, r2
 80044d8:	6123      	str	r3, [r4, #16]
 80044da:	e7ba      	b.n	8004452 <_printf_i+0x152>
 80044dc:	682b      	ldr	r3, [r5, #0]
 80044de:	2100      	movs	r1, #0
 80044e0:	1d1a      	adds	r2, r3, #4
 80044e2:	602a      	str	r2, [r5, #0]
 80044e4:	681d      	ldr	r5, [r3, #0]
 80044e6:	6862      	ldr	r2, [r4, #4]
 80044e8:	4628      	mov	r0, r5
 80044ea:	f000 f82f 	bl	800454c <memchr>
 80044ee:	b108      	cbz	r0, 80044f4 <_printf_i+0x1f4>
 80044f0:	1b40      	subs	r0, r0, r5
 80044f2:	6060      	str	r0, [r4, #4]
 80044f4:	6863      	ldr	r3, [r4, #4]
 80044f6:	6123      	str	r3, [r4, #16]
 80044f8:	2300      	movs	r3, #0
 80044fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044fe:	e7a8      	b.n	8004452 <_printf_i+0x152>
 8004500:	462a      	mov	r2, r5
 8004502:	4649      	mov	r1, r9
 8004504:	4640      	mov	r0, r8
 8004506:	6923      	ldr	r3, [r4, #16]
 8004508:	47d0      	blx	sl
 800450a:	3001      	adds	r0, #1
 800450c:	d0ab      	beq.n	8004466 <_printf_i+0x166>
 800450e:	6823      	ldr	r3, [r4, #0]
 8004510:	079b      	lsls	r3, r3, #30
 8004512:	d413      	bmi.n	800453c <_printf_i+0x23c>
 8004514:	68e0      	ldr	r0, [r4, #12]
 8004516:	9b03      	ldr	r3, [sp, #12]
 8004518:	4298      	cmp	r0, r3
 800451a:	bfb8      	it	lt
 800451c:	4618      	movlt	r0, r3
 800451e:	e7a4      	b.n	800446a <_printf_i+0x16a>
 8004520:	2301      	movs	r3, #1
 8004522:	4632      	mov	r2, r6
 8004524:	4649      	mov	r1, r9
 8004526:	4640      	mov	r0, r8
 8004528:	47d0      	blx	sl
 800452a:	3001      	adds	r0, #1
 800452c:	d09b      	beq.n	8004466 <_printf_i+0x166>
 800452e:	3501      	adds	r5, #1
 8004530:	68e3      	ldr	r3, [r4, #12]
 8004532:	9903      	ldr	r1, [sp, #12]
 8004534:	1a5b      	subs	r3, r3, r1
 8004536:	42ab      	cmp	r3, r5
 8004538:	dcf2      	bgt.n	8004520 <_printf_i+0x220>
 800453a:	e7eb      	b.n	8004514 <_printf_i+0x214>
 800453c:	2500      	movs	r5, #0
 800453e:	f104 0619 	add.w	r6, r4, #25
 8004542:	e7f5      	b.n	8004530 <_printf_i+0x230>
 8004544:	08004893 	.word	0x08004893
 8004548:	080048a4 	.word	0x080048a4

0800454c <memchr>:
 800454c:	4603      	mov	r3, r0
 800454e:	b510      	push	{r4, lr}
 8004550:	b2c9      	uxtb	r1, r1
 8004552:	4402      	add	r2, r0
 8004554:	4293      	cmp	r3, r2
 8004556:	4618      	mov	r0, r3
 8004558:	d101      	bne.n	800455e <memchr+0x12>
 800455a:	2000      	movs	r0, #0
 800455c:	e003      	b.n	8004566 <memchr+0x1a>
 800455e:	7804      	ldrb	r4, [r0, #0]
 8004560:	3301      	adds	r3, #1
 8004562:	428c      	cmp	r4, r1
 8004564:	d1f6      	bne.n	8004554 <memchr+0x8>
 8004566:	bd10      	pop	{r4, pc}

08004568 <memcpy>:
 8004568:	440a      	add	r2, r1
 800456a:	4291      	cmp	r1, r2
 800456c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004570:	d100      	bne.n	8004574 <memcpy+0xc>
 8004572:	4770      	bx	lr
 8004574:	b510      	push	{r4, lr}
 8004576:	f811 4b01 	ldrb.w	r4, [r1], #1
 800457a:	4291      	cmp	r1, r2
 800457c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004580:	d1f9      	bne.n	8004576 <memcpy+0xe>
 8004582:	bd10      	pop	{r4, pc}

08004584 <memmove>:
 8004584:	4288      	cmp	r0, r1
 8004586:	b510      	push	{r4, lr}
 8004588:	eb01 0402 	add.w	r4, r1, r2
 800458c:	d902      	bls.n	8004594 <memmove+0x10>
 800458e:	4284      	cmp	r4, r0
 8004590:	4623      	mov	r3, r4
 8004592:	d807      	bhi.n	80045a4 <memmove+0x20>
 8004594:	1e43      	subs	r3, r0, #1
 8004596:	42a1      	cmp	r1, r4
 8004598:	d008      	beq.n	80045ac <memmove+0x28>
 800459a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800459e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80045a2:	e7f8      	b.n	8004596 <memmove+0x12>
 80045a4:	4601      	mov	r1, r0
 80045a6:	4402      	add	r2, r0
 80045a8:	428a      	cmp	r2, r1
 80045aa:	d100      	bne.n	80045ae <memmove+0x2a>
 80045ac:	bd10      	pop	{r4, pc}
 80045ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80045b6:	e7f7      	b.n	80045a8 <memmove+0x24>

080045b8 <_free_r>:
 80045b8:	b538      	push	{r3, r4, r5, lr}
 80045ba:	4605      	mov	r5, r0
 80045bc:	2900      	cmp	r1, #0
 80045be:	d040      	beq.n	8004642 <_free_r+0x8a>
 80045c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045c4:	1f0c      	subs	r4, r1, #4
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	bfb8      	it	lt
 80045ca:	18e4      	addlt	r4, r4, r3
 80045cc:	f000 f910 	bl	80047f0 <__malloc_lock>
 80045d0:	4a1c      	ldr	r2, [pc, #112]	; (8004644 <_free_r+0x8c>)
 80045d2:	6813      	ldr	r3, [r2, #0]
 80045d4:	b933      	cbnz	r3, 80045e4 <_free_r+0x2c>
 80045d6:	6063      	str	r3, [r4, #4]
 80045d8:	6014      	str	r4, [r2, #0]
 80045da:	4628      	mov	r0, r5
 80045dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045e0:	f000 b90c 	b.w	80047fc <__malloc_unlock>
 80045e4:	42a3      	cmp	r3, r4
 80045e6:	d908      	bls.n	80045fa <_free_r+0x42>
 80045e8:	6820      	ldr	r0, [r4, #0]
 80045ea:	1821      	adds	r1, r4, r0
 80045ec:	428b      	cmp	r3, r1
 80045ee:	bf01      	itttt	eq
 80045f0:	6819      	ldreq	r1, [r3, #0]
 80045f2:	685b      	ldreq	r3, [r3, #4]
 80045f4:	1809      	addeq	r1, r1, r0
 80045f6:	6021      	streq	r1, [r4, #0]
 80045f8:	e7ed      	b.n	80045d6 <_free_r+0x1e>
 80045fa:	461a      	mov	r2, r3
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	b10b      	cbz	r3, 8004604 <_free_r+0x4c>
 8004600:	42a3      	cmp	r3, r4
 8004602:	d9fa      	bls.n	80045fa <_free_r+0x42>
 8004604:	6811      	ldr	r1, [r2, #0]
 8004606:	1850      	adds	r0, r2, r1
 8004608:	42a0      	cmp	r0, r4
 800460a:	d10b      	bne.n	8004624 <_free_r+0x6c>
 800460c:	6820      	ldr	r0, [r4, #0]
 800460e:	4401      	add	r1, r0
 8004610:	1850      	adds	r0, r2, r1
 8004612:	4283      	cmp	r3, r0
 8004614:	6011      	str	r1, [r2, #0]
 8004616:	d1e0      	bne.n	80045da <_free_r+0x22>
 8004618:	6818      	ldr	r0, [r3, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	4401      	add	r1, r0
 800461e:	6011      	str	r1, [r2, #0]
 8004620:	6053      	str	r3, [r2, #4]
 8004622:	e7da      	b.n	80045da <_free_r+0x22>
 8004624:	d902      	bls.n	800462c <_free_r+0x74>
 8004626:	230c      	movs	r3, #12
 8004628:	602b      	str	r3, [r5, #0]
 800462a:	e7d6      	b.n	80045da <_free_r+0x22>
 800462c:	6820      	ldr	r0, [r4, #0]
 800462e:	1821      	adds	r1, r4, r0
 8004630:	428b      	cmp	r3, r1
 8004632:	bf01      	itttt	eq
 8004634:	6819      	ldreq	r1, [r3, #0]
 8004636:	685b      	ldreq	r3, [r3, #4]
 8004638:	1809      	addeq	r1, r1, r0
 800463a:	6021      	streq	r1, [r4, #0]
 800463c:	6063      	str	r3, [r4, #4]
 800463e:	6054      	str	r4, [r2, #4]
 8004640:	e7cb      	b.n	80045da <_free_r+0x22>
 8004642:	bd38      	pop	{r3, r4, r5, pc}
 8004644:	20000550 	.word	0x20000550

08004648 <sbrk_aligned>:
 8004648:	b570      	push	{r4, r5, r6, lr}
 800464a:	4e0e      	ldr	r6, [pc, #56]	; (8004684 <sbrk_aligned+0x3c>)
 800464c:	460c      	mov	r4, r1
 800464e:	6831      	ldr	r1, [r6, #0]
 8004650:	4605      	mov	r5, r0
 8004652:	b911      	cbnz	r1, 800465a <sbrk_aligned+0x12>
 8004654:	f000 f8bc 	bl	80047d0 <_sbrk_r>
 8004658:	6030      	str	r0, [r6, #0]
 800465a:	4621      	mov	r1, r4
 800465c:	4628      	mov	r0, r5
 800465e:	f000 f8b7 	bl	80047d0 <_sbrk_r>
 8004662:	1c43      	adds	r3, r0, #1
 8004664:	d00a      	beq.n	800467c <sbrk_aligned+0x34>
 8004666:	1cc4      	adds	r4, r0, #3
 8004668:	f024 0403 	bic.w	r4, r4, #3
 800466c:	42a0      	cmp	r0, r4
 800466e:	d007      	beq.n	8004680 <sbrk_aligned+0x38>
 8004670:	1a21      	subs	r1, r4, r0
 8004672:	4628      	mov	r0, r5
 8004674:	f000 f8ac 	bl	80047d0 <_sbrk_r>
 8004678:	3001      	adds	r0, #1
 800467a:	d101      	bne.n	8004680 <sbrk_aligned+0x38>
 800467c:	f04f 34ff 	mov.w	r4, #4294967295
 8004680:	4620      	mov	r0, r4
 8004682:	bd70      	pop	{r4, r5, r6, pc}
 8004684:	20000554 	.word	0x20000554

08004688 <_malloc_r>:
 8004688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800468c:	1ccd      	adds	r5, r1, #3
 800468e:	f025 0503 	bic.w	r5, r5, #3
 8004692:	3508      	adds	r5, #8
 8004694:	2d0c      	cmp	r5, #12
 8004696:	bf38      	it	cc
 8004698:	250c      	movcc	r5, #12
 800469a:	2d00      	cmp	r5, #0
 800469c:	4607      	mov	r7, r0
 800469e:	db01      	blt.n	80046a4 <_malloc_r+0x1c>
 80046a0:	42a9      	cmp	r1, r5
 80046a2:	d905      	bls.n	80046b0 <_malloc_r+0x28>
 80046a4:	230c      	movs	r3, #12
 80046a6:	2600      	movs	r6, #0
 80046a8:	603b      	str	r3, [r7, #0]
 80046aa:	4630      	mov	r0, r6
 80046ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046b0:	4e2e      	ldr	r6, [pc, #184]	; (800476c <_malloc_r+0xe4>)
 80046b2:	f000 f89d 	bl	80047f0 <__malloc_lock>
 80046b6:	6833      	ldr	r3, [r6, #0]
 80046b8:	461c      	mov	r4, r3
 80046ba:	bb34      	cbnz	r4, 800470a <_malloc_r+0x82>
 80046bc:	4629      	mov	r1, r5
 80046be:	4638      	mov	r0, r7
 80046c0:	f7ff ffc2 	bl	8004648 <sbrk_aligned>
 80046c4:	1c43      	adds	r3, r0, #1
 80046c6:	4604      	mov	r4, r0
 80046c8:	d14d      	bne.n	8004766 <_malloc_r+0xde>
 80046ca:	6834      	ldr	r4, [r6, #0]
 80046cc:	4626      	mov	r6, r4
 80046ce:	2e00      	cmp	r6, #0
 80046d0:	d140      	bne.n	8004754 <_malloc_r+0xcc>
 80046d2:	6823      	ldr	r3, [r4, #0]
 80046d4:	4631      	mov	r1, r6
 80046d6:	4638      	mov	r0, r7
 80046d8:	eb04 0803 	add.w	r8, r4, r3
 80046dc:	f000 f878 	bl	80047d0 <_sbrk_r>
 80046e0:	4580      	cmp	r8, r0
 80046e2:	d13a      	bne.n	800475a <_malloc_r+0xd2>
 80046e4:	6821      	ldr	r1, [r4, #0]
 80046e6:	3503      	adds	r5, #3
 80046e8:	1a6d      	subs	r5, r5, r1
 80046ea:	f025 0503 	bic.w	r5, r5, #3
 80046ee:	3508      	adds	r5, #8
 80046f0:	2d0c      	cmp	r5, #12
 80046f2:	bf38      	it	cc
 80046f4:	250c      	movcc	r5, #12
 80046f6:	4638      	mov	r0, r7
 80046f8:	4629      	mov	r1, r5
 80046fa:	f7ff ffa5 	bl	8004648 <sbrk_aligned>
 80046fe:	3001      	adds	r0, #1
 8004700:	d02b      	beq.n	800475a <_malloc_r+0xd2>
 8004702:	6823      	ldr	r3, [r4, #0]
 8004704:	442b      	add	r3, r5
 8004706:	6023      	str	r3, [r4, #0]
 8004708:	e00e      	b.n	8004728 <_malloc_r+0xa0>
 800470a:	6822      	ldr	r2, [r4, #0]
 800470c:	1b52      	subs	r2, r2, r5
 800470e:	d41e      	bmi.n	800474e <_malloc_r+0xc6>
 8004710:	2a0b      	cmp	r2, #11
 8004712:	d916      	bls.n	8004742 <_malloc_r+0xba>
 8004714:	1961      	adds	r1, r4, r5
 8004716:	42a3      	cmp	r3, r4
 8004718:	6025      	str	r5, [r4, #0]
 800471a:	bf18      	it	ne
 800471c:	6059      	strne	r1, [r3, #4]
 800471e:	6863      	ldr	r3, [r4, #4]
 8004720:	bf08      	it	eq
 8004722:	6031      	streq	r1, [r6, #0]
 8004724:	5162      	str	r2, [r4, r5]
 8004726:	604b      	str	r3, [r1, #4]
 8004728:	4638      	mov	r0, r7
 800472a:	f104 060b 	add.w	r6, r4, #11
 800472e:	f000 f865 	bl	80047fc <__malloc_unlock>
 8004732:	f026 0607 	bic.w	r6, r6, #7
 8004736:	1d23      	adds	r3, r4, #4
 8004738:	1af2      	subs	r2, r6, r3
 800473a:	d0b6      	beq.n	80046aa <_malloc_r+0x22>
 800473c:	1b9b      	subs	r3, r3, r6
 800473e:	50a3      	str	r3, [r4, r2]
 8004740:	e7b3      	b.n	80046aa <_malloc_r+0x22>
 8004742:	6862      	ldr	r2, [r4, #4]
 8004744:	42a3      	cmp	r3, r4
 8004746:	bf0c      	ite	eq
 8004748:	6032      	streq	r2, [r6, #0]
 800474a:	605a      	strne	r2, [r3, #4]
 800474c:	e7ec      	b.n	8004728 <_malloc_r+0xa0>
 800474e:	4623      	mov	r3, r4
 8004750:	6864      	ldr	r4, [r4, #4]
 8004752:	e7b2      	b.n	80046ba <_malloc_r+0x32>
 8004754:	4634      	mov	r4, r6
 8004756:	6876      	ldr	r6, [r6, #4]
 8004758:	e7b9      	b.n	80046ce <_malloc_r+0x46>
 800475a:	230c      	movs	r3, #12
 800475c:	4638      	mov	r0, r7
 800475e:	603b      	str	r3, [r7, #0]
 8004760:	f000 f84c 	bl	80047fc <__malloc_unlock>
 8004764:	e7a1      	b.n	80046aa <_malloc_r+0x22>
 8004766:	6025      	str	r5, [r4, #0]
 8004768:	e7de      	b.n	8004728 <_malloc_r+0xa0>
 800476a:	bf00      	nop
 800476c:	20000550 	.word	0x20000550

08004770 <_realloc_r>:
 8004770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004774:	4680      	mov	r8, r0
 8004776:	4614      	mov	r4, r2
 8004778:	460e      	mov	r6, r1
 800477a:	b921      	cbnz	r1, 8004786 <_realloc_r+0x16>
 800477c:	4611      	mov	r1, r2
 800477e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004782:	f7ff bf81 	b.w	8004688 <_malloc_r>
 8004786:	b92a      	cbnz	r2, 8004794 <_realloc_r+0x24>
 8004788:	f7ff ff16 	bl	80045b8 <_free_r>
 800478c:	4625      	mov	r5, r4
 800478e:	4628      	mov	r0, r5
 8004790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004794:	f000 f838 	bl	8004808 <_malloc_usable_size_r>
 8004798:	4284      	cmp	r4, r0
 800479a:	4607      	mov	r7, r0
 800479c:	d802      	bhi.n	80047a4 <_realloc_r+0x34>
 800479e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80047a2:	d812      	bhi.n	80047ca <_realloc_r+0x5a>
 80047a4:	4621      	mov	r1, r4
 80047a6:	4640      	mov	r0, r8
 80047a8:	f7ff ff6e 	bl	8004688 <_malloc_r>
 80047ac:	4605      	mov	r5, r0
 80047ae:	2800      	cmp	r0, #0
 80047b0:	d0ed      	beq.n	800478e <_realloc_r+0x1e>
 80047b2:	42bc      	cmp	r4, r7
 80047b4:	4622      	mov	r2, r4
 80047b6:	4631      	mov	r1, r6
 80047b8:	bf28      	it	cs
 80047ba:	463a      	movcs	r2, r7
 80047bc:	f7ff fed4 	bl	8004568 <memcpy>
 80047c0:	4631      	mov	r1, r6
 80047c2:	4640      	mov	r0, r8
 80047c4:	f7ff fef8 	bl	80045b8 <_free_r>
 80047c8:	e7e1      	b.n	800478e <_realloc_r+0x1e>
 80047ca:	4635      	mov	r5, r6
 80047cc:	e7df      	b.n	800478e <_realloc_r+0x1e>
	...

080047d0 <_sbrk_r>:
 80047d0:	b538      	push	{r3, r4, r5, lr}
 80047d2:	2300      	movs	r3, #0
 80047d4:	4d05      	ldr	r5, [pc, #20]	; (80047ec <_sbrk_r+0x1c>)
 80047d6:	4604      	mov	r4, r0
 80047d8:	4608      	mov	r0, r1
 80047da:	602b      	str	r3, [r5, #0]
 80047dc:	f7fc fe7a 	bl	80014d4 <_sbrk>
 80047e0:	1c43      	adds	r3, r0, #1
 80047e2:	d102      	bne.n	80047ea <_sbrk_r+0x1a>
 80047e4:	682b      	ldr	r3, [r5, #0]
 80047e6:	b103      	cbz	r3, 80047ea <_sbrk_r+0x1a>
 80047e8:	6023      	str	r3, [r4, #0]
 80047ea:	bd38      	pop	{r3, r4, r5, pc}
 80047ec:	20000558 	.word	0x20000558

080047f0 <__malloc_lock>:
 80047f0:	4801      	ldr	r0, [pc, #4]	; (80047f8 <__malloc_lock+0x8>)
 80047f2:	f000 b811 	b.w	8004818 <__retarget_lock_acquire_recursive>
 80047f6:	bf00      	nop
 80047f8:	2000055c 	.word	0x2000055c

080047fc <__malloc_unlock>:
 80047fc:	4801      	ldr	r0, [pc, #4]	; (8004804 <__malloc_unlock+0x8>)
 80047fe:	f000 b80c 	b.w	800481a <__retarget_lock_release_recursive>
 8004802:	bf00      	nop
 8004804:	2000055c 	.word	0x2000055c

08004808 <_malloc_usable_size_r>:
 8004808:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800480c:	1f18      	subs	r0, r3, #4
 800480e:	2b00      	cmp	r3, #0
 8004810:	bfbc      	itt	lt
 8004812:	580b      	ldrlt	r3, [r1, r0]
 8004814:	18c0      	addlt	r0, r0, r3
 8004816:	4770      	bx	lr

08004818 <__retarget_lock_acquire_recursive>:
 8004818:	4770      	bx	lr

0800481a <__retarget_lock_release_recursive>:
 800481a:	4770      	bx	lr

0800481c <_init>:
 800481c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481e:	bf00      	nop
 8004820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004822:	bc08      	pop	{r3}
 8004824:	469e      	mov	lr, r3
 8004826:	4770      	bx	lr

08004828 <_fini>:
 8004828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800482a:	bf00      	nop
 800482c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800482e:	bc08      	pop	{r3}
 8004830:	469e      	mov	lr, r3
 8004832:	4770      	bx	lr
