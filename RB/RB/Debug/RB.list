
RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028fc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08002a08  08002a08  00012a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a3c  08002a3c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a3c  08002a3c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a3c  08002a3c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a3c  08002a3c  00012a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a40  08002a40  00012a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002a44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  08002a50  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002a50  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c6c8  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d79  00000000  00000000  0002c6fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac8  00000000  00000000  0002e478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a28  00000000  00000000  0002ef40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017005  00000000  00000000  0002f968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc3e  00000000  00000000  0004696d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085f4b  00000000  00000000  000545ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000da4f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bec  00000000  00000000  000da548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080029f0 	.word	0x080029f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080029f0 	.word	0x080029f0

0800014c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f023 030f 	bic.w	r3, r3, #15
 800015c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	011b      	lsls	r3, r3, #4
 8000162:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000164:	7bfb      	ldrb	r3, [r7, #15]
 8000166:	f043 030c 	orr.w	r3, r3, #12
 800016a:	b2db      	uxtb	r3, r3
 800016c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800016e:	7bfb      	ldrb	r3, [r7, #15]
 8000170:	f043 0308 	orr.w	r3, r3, #8
 8000174:	b2db      	uxtb	r3, r3
 8000176:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000178:	7bbb      	ldrb	r3, [r7, #14]
 800017a:	f043 030c 	orr.w	r3, r3, #12
 800017e:	b2db      	uxtb	r3, r3
 8000180:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000182:	7bbb      	ldrb	r3, [r7, #14]
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	b2db      	uxtb	r3, r3
 800018a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800018c:	f107 0208 	add.w	r2, r7, #8
 8000190:	2364      	movs	r3, #100	; 0x64
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2304      	movs	r3, #4
 8000196:	2142      	movs	r1, #66	; 0x42
 8000198:	4803      	ldr	r0, [pc, #12]	; (80001a8 <lcd_send_cmd+0x5c>)
 800019a:	f001 fb01 	bl	80017a0 <HAL_I2C_Master_Transmit>
}
 800019e:	bf00      	nop
 80001a0:	3710      	adds	r7, #16
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	20000058 	.word	0x20000058

080001ac <lcd_send_data>:

void lcd_send_data (char data)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b086      	sub	sp, #24
 80001b0:	af02      	add	r7, sp, #8
 80001b2:	4603      	mov	r3, r0
 80001b4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	f023 030f 	bic.w	r3, r3, #15
 80001bc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	011b      	lsls	r3, r3, #4
 80001c2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80001c4:	7bfb      	ldrb	r3, [r7, #15]
 80001c6:	f043 030d 	orr.w	r3, r3, #13
 80001ca:	b2db      	uxtb	r3, r3
 80001cc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	f043 0309 	orr.w	r3, r3, #9
 80001d4:	b2db      	uxtb	r3, r3
 80001d6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80001d8:	7bbb      	ldrb	r3, [r7, #14]
 80001da:	f043 030d 	orr.w	r3, r3, #13
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80001e2:	7bbb      	ldrb	r3, [r7, #14]
 80001e4:	f043 0309 	orr.w	r3, r3, #9
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80001ec:	f107 0208 	add.w	r2, r7, #8
 80001f0:	2364      	movs	r3, #100	; 0x64
 80001f2:	9300      	str	r3, [sp, #0]
 80001f4:	2304      	movs	r3, #4
 80001f6:	2142      	movs	r1, #66	; 0x42
 80001f8:	4803      	ldr	r0, [pc, #12]	; (8000208 <lcd_send_data+0x5c>)
 80001fa:	f001 fad1 	bl	80017a0 <HAL_I2C_Master_Transmit>
}
 80001fe:	bf00      	nop
 8000200:	3710      	adds	r7, #16
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	20000058 	.word	0x20000058

0800020c <lcd_init>:

void lcd_init (void) {
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000210:	2033      	movs	r0, #51	; 0x33
 8000212:	f7ff ff9b 	bl	800014c <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000216:	2032      	movs	r0, #50	; 0x32
 8000218:	f7ff ff98 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 800021c:	2032      	movs	r0, #50	; 0x32
 800021e:	f000 fba9 	bl	8000974 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000222:	2028      	movs	r0, #40	; 0x28
 8000224:	f7ff ff92 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 8000228:	2032      	movs	r0, #50	; 0x32
 800022a:	f000 fba3 	bl	8000974 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 800022e:	2001      	movs	r0, #1
 8000230:	f7ff ff8c 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 8000234:	2032      	movs	r0, #50	; 0x32
 8000236:	f000 fb9d 	bl	8000974 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 800023a:	2006      	movs	r0, #6
 800023c:	f7ff ff86 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 8000240:	2032      	movs	r0, #50	; 0x32
 8000242:	f000 fb97 	bl	8000974 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 8000246:	200c      	movs	r0, #12
 8000248:	f7ff ff80 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 800024c:	2032      	movs	r0, #50	; 0x32
 800024e:	f000 fb91 	bl	8000974 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000252:	2002      	movs	r0, #2
 8000254:	f7ff ff7a 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 8000258:	2032      	movs	r0, #50	; 0x32
 800025a:	f000 fb8b 	bl	8000974 <HAL_Delay>
	lcd_send_cmd (0x80);
 800025e:	2080      	movs	r0, #128	; 0x80
 8000260:	f7ff ff74 	bl	800014c <lcd_send_cmd>
}
 8000264:	bf00      	nop
 8000266:	bd80      	pop	{r7, pc}

08000268 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000270:	e006      	b.n	8000280 <lcd_send_string+0x18>
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	1c5a      	adds	r2, r3, #1
 8000276:	607a      	str	r2, [r7, #4]
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	4618      	mov	r0, r3
 800027c:	f7ff ff96 	bl	80001ac <lcd_send_data>
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d1f4      	bne.n	8000272 <lcd_send_string+0xa>
}
 8000288:	bf00      	nop
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}

08000292 <lcd_goto_XY>:
{
	lcd_send_cmd (0x01); //clear display
}

void lcd_goto_XY (int row, int col)
{
 8000292:	b580      	push	{r7, lr}
 8000294:	b084      	sub	sp, #16
 8000296:	af00      	add	r7, sp, #0
 8000298:	6078      	str	r0, [r7, #4]
 800029a:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d108      	bne.n	80002b4 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	b2da      	uxtb	r2, r3
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	b2db      	uxtb	r3, r3
 80002aa:	4413      	add	r3, r2
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	337f      	adds	r3, #127	; 0x7f
 80002b0:	73fb      	strb	r3, [r7, #15]
 80002b2:	e008      	b.n	80002c6 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	3340      	adds	r3, #64	; 0x40
 80002ba:	b2db      	uxtb	r3, r3
 80002bc:	b25b      	sxtb	r3, r3
 80002be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80002c2:	b25b      	sxtb	r3, r3
 80002c4:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 80002c6:	7bfb      	ldrb	r3, [r7, #15]
 80002c8:	4618      	mov	r0, r3
 80002ca:	f7ff ff3f 	bl	800014c <lcd_send_cmd>
}
 80002ce:	bf00      	nop
 80002d0:	3710      	adds	r7, #16
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}

080002d6 <HAL_ADC_ConvCpltCallback>:
ADC_HandleTypeDef hadc1;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef * hadc){
 80002d6:	b480      	push	{r7}
 80002d8:	b083      	sub	sp, #12
 80002da:	af00      	add	r7, sp, #0
 80002dc:	6078      	str	r0, [r7, #4]

}
 80002de:	bf00      	nop
 80002e0:	370c      	adds	r7, #12
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bc80      	pop	{r7}
 80002e6:	4770      	bx	lr

080002e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ec:	f000 fae0 	bl	80008b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f0:	f000 f814 	bl	800031c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002f4:	f000 f8fe 	bl	80004f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002f8:	f000 f8d2 	bl	80004a0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80002fc:	f000 f8a2 	bl	8000444 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000300:	f000 f862 	bl	80003c8 <MX_ADC1_Init>

  /* USER CODE BEGIN 2 */
  lcd_init();
 8000304:	f7ff ff82 	bl	800020c <lcd_init>
  //lcd_clear();
  lcd_goto_XY(1, 0);
 8000308:	2100      	movs	r1, #0
 800030a:	2001      	movs	r0, #1
 800030c:	f7ff ffc1 	bl	8000292 <lcd_goto_XY>
  lcd_send_string("hehe");
 8000310:	4801      	ldr	r0, [pc, #4]	; (8000318 <main+0x30>)
 8000312:	f7ff ffa9 	bl	8000268 <lcd_send_string>
  //HAL_ADC_Start_IT(&hadc1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000316:	e7fe      	b.n	8000316 <main+0x2e>
 8000318:	08002a08 	.word	0x08002a08

0800031c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b094      	sub	sp, #80	; 0x50
 8000320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000322:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000326:	2228      	movs	r2, #40	; 0x28
 8000328:	2100      	movs	r1, #0
 800032a:	4618      	mov	r0, r3
 800032c:	f002 fb58 	bl	80029e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000330:	f107 0314 	add.w	r3, r7, #20
 8000334:	2200      	movs	r2, #0
 8000336:	601a      	str	r2, [r3, #0]
 8000338:	605a      	str	r2, [r3, #4]
 800033a:	609a      	str	r2, [r3, #8]
 800033c:	60da      	str	r2, [r3, #12]
 800033e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800034c:	2302      	movs	r3, #2
 800034e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000350:	2301      	movs	r3, #1
 8000352:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000354:	2310      	movs	r3, #16
 8000356:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000358:	2302      	movs	r3, #2
 800035a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800035c:	2300      	movs	r3, #0
 800035e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000360:	2300      	movs	r3, #0
 8000362:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000364:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000368:	4618      	mov	r0, r3
 800036a:	f001 fd71 	bl	8001e50 <HAL_RCC_OscConfig>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000374:	f000 f92c 	bl	80005d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000378:	230f      	movs	r3, #15
 800037a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800037c:	2302      	movs	r3, #2
 800037e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000380:	2300      	movs	r3, #0
 8000382:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000384:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000388:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800038a:	2300      	movs	r3, #0
 800038c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800038e:	f107 0314 	add.w	r3, r7, #20
 8000392:	2100      	movs	r1, #0
 8000394:	4618      	mov	r0, r3
 8000396:	f001 ffdd 	bl	8002354 <HAL_RCC_ClockConfig>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80003a0:	f000 f916 	bl	80005d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80003a4:	2302      	movs	r3, #2
 80003a6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80003a8:	2300      	movs	r3, #0
 80003aa:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	4618      	mov	r0, r3
 80003b0:	f002 f95e 	bl	8002670 <HAL_RCCEx_PeriphCLKConfig>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80003ba:	f000 f909 	bl	80005d0 <Error_Handler>
  }
}
 80003be:	bf00      	nop
 80003c0:	3750      	adds	r7, #80	; 0x50
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
	...

080003c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b084      	sub	sp, #16
 80003cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	2200      	movs	r2, #0
 80003d2:	601a      	str	r2, [r3, #0]
 80003d4:	605a      	str	r2, [r3, #4]
 80003d6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003d8:	4b18      	ldr	r3, [pc, #96]	; (800043c <MX_ADC1_Init+0x74>)
 80003da:	4a19      	ldr	r2, [pc, #100]	; (8000440 <MX_ADC1_Init+0x78>)
 80003dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003de:	4b17      	ldr	r3, [pc, #92]	; (800043c <MX_ADC1_Init+0x74>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003e4:	4b15      	ldr	r3, [pc, #84]	; (800043c <MX_ADC1_Init+0x74>)
 80003e6:	2201      	movs	r2, #1
 80003e8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003ea:	4b14      	ldr	r3, [pc, #80]	; (800043c <MX_ADC1_Init+0x74>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003f0:	4b12      	ldr	r3, [pc, #72]	; (800043c <MX_ADC1_Init+0x74>)
 80003f2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80003f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003f8:	4b10      	ldr	r3, [pc, #64]	; (800043c <MX_ADC1_Init+0x74>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80003fe:	4b0f      	ldr	r3, [pc, #60]	; (800043c <MX_ADC1_Init+0x74>)
 8000400:	2201      	movs	r2, #1
 8000402:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000404:	480d      	ldr	r0, [pc, #52]	; (800043c <MX_ADC1_Init+0x74>)
 8000406:	f000 fad9 	bl	80009bc <HAL_ADC_Init>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000410:	f000 f8de 	bl	80005d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000414:	2300      	movs	r3, #0
 8000416:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000418:	2301      	movs	r3, #1
 800041a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800041c:	2300      	movs	r3, #0
 800041e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	4619      	mov	r1, r3
 8000424:	4805      	ldr	r0, [pc, #20]	; (800043c <MX_ADC1_Init+0x74>)
 8000426:	f000 fc69 	bl	8000cfc <HAL_ADC_ConfigChannel>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000430:	f000 f8ce 	bl	80005d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000434:	bf00      	nop
 8000436:	3710      	adds	r7, #16
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	20000028 	.word	0x20000028
 8000440:	40012400 	.word	0x40012400

08000444 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000448:	4b12      	ldr	r3, [pc, #72]	; (8000494 <MX_I2C1_Init+0x50>)
 800044a:	4a13      	ldr	r2, [pc, #76]	; (8000498 <MX_I2C1_Init+0x54>)
 800044c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800044e:	4b11      	ldr	r3, [pc, #68]	; (8000494 <MX_I2C1_Init+0x50>)
 8000450:	4a12      	ldr	r2, [pc, #72]	; (800049c <MX_I2C1_Init+0x58>)
 8000452:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <MX_I2C1_Init+0x50>)
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800045a:	4b0e      	ldr	r3, [pc, #56]	; (8000494 <MX_I2C1_Init+0x50>)
 800045c:	2200      	movs	r2, #0
 800045e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000460:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <MX_I2C1_Init+0x50>)
 8000462:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000466:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000468:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <MX_I2C1_Init+0x50>)
 800046a:	2200      	movs	r2, #0
 800046c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800046e:	4b09      	ldr	r3, [pc, #36]	; (8000494 <MX_I2C1_Init+0x50>)
 8000470:	2200      	movs	r2, #0
 8000472:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000474:	4b07      	ldr	r3, [pc, #28]	; (8000494 <MX_I2C1_Init+0x50>)
 8000476:	2200      	movs	r2, #0
 8000478:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800047a:	4b06      	ldr	r3, [pc, #24]	; (8000494 <MX_I2C1_Init+0x50>)
 800047c:	2200      	movs	r2, #0
 800047e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000480:	4804      	ldr	r0, [pc, #16]	; (8000494 <MX_I2C1_Init+0x50>)
 8000482:	f001 f849 	bl	8001518 <HAL_I2C_Init>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800048c:	f000 f8a0 	bl	80005d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}
 8000494:	20000058 	.word	0x20000058
 8000498:	40005400 	.word	0x40005400
 800049c:	000186a0 	.word	0x000186a0

080004a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004a4:	4b11      	ldr	r3, [pc, #68]	; (80004ec <MX_USART2_UART_Init+0x4c>)
 80004a6:	4a12      	ldr	r2, [pc, #72]	; (80004f0 <MX_USART2_UART_Init+0x50>)
 80004a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004aa:	4b10      	ldr	r3, [pc, #64]	; (80004ec <MX_USART2_UART_Init+0x4c>)
 80004ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004b2:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <MX_USART2_UART_Init+0x4c>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004b8:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <MX_USART2_UART_Init+0x4c>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004be:	4b0b      	ldr	r3, [pc, #44]	; (80004ec <MX_USART2_UART_Init+0x4c>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004c4:	4b09      	ldr	r3, [pc, #36]	; (80004ec <MX_USART2_UART_Init+0x4c>)
 80004c6:	220c      	movs	r2, #12
 80004c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ca:	4b08      	ldr	r3, [pc, #32]	; (80004ec <MX_USART2_UART_Init+0x4c>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <MX_USART2_UART_Init+0x4c>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004d6:	4805      	ldr	r0, [pc, #20]	; (80004ec <MX_USART2_UART_Init+0x4c>)
 80004d8:	f002 f980 	bl	80027dc <HAL_UART_Init>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80004e2:	f000 f875 	bl	80005d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	200000ac 	.word	0x200000ac
 80004f0:	40004400 	.word	0x40004400

080004f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b088      	sub	sp, #32
 80004f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fa:	f107 0310 	add.w	r3, r7, #16
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000508:	4b2d      	ldr	r3, [pc, #180]	; (80005c0 <MX_GPIO_Init+0xcc>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	4a2c      	ldr	r2, [pc, #176]	; (80005c0 <MX_GPIO_Init+0xcc>)
 800050e:	f043 0310 	orr.w	r3, r3, #16
 8000512:	6193      	str	r3, [r2, #24]
 8000514:	4b2a      	ldr	r3, [pc, #168]	; (80005c0 <MX_GPIO_Init+0xcc>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	f003 0310 	and.w	r3, r3, #16
 800051c:	60fb      	str	r3, [r7, #12]
 800051e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000520:	4b27      	ldr	r3, [pc, #156]	; (80005c0 <MX_GPIO_Init+0xcc>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	4a26      	ldr	r2, [pc, #152]	; (80005c0 <MX_GPIO_Init+0xcc>)
 8000526:	f043 0320 	orr.w	r3, r3, #32
 800052a:	6193      	str	r3, [r2, #24]
 800052c:	4b24      	ldr	r3, [pc, #144]	; (80005c0 <MX_GPIO_Init+0xcc>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	f003 0320 	and.w	r3, r3, #32
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000538:	4b21      	ldr	r3, [pc, #132]	; (80005c0 <MX_GPIO_Init+0xcc>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	4a20      	ldr	r2, [pc, #128]	; (80005c0 <MX_GPIO_Init+0xcc>)
 800053e:	f043 0304 	orr.w	r3, r3, #4
 8000542:	6193      	str	r3, [r2, #24]
 8000544:	4b1e      	ldr	r3, [pc, #120]	; (80005c0 <MX_GPIO_Init+0xcc>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	f003 0304 	and.w	r3, r3, #4
 800054c:	607b      	str	r3, [r7, #4]
 800054e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000550:	4b1b      	ldr	r3, [pc, #108]	; (80005c0 <MX_GPIO_Init+0xcc>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	4a1a      	ldr	r2, [pc, #104]	; (80005c0 <MX_GPIO_Init+0xcc>)
 8000556:	f043 0308 	orr.w	r3, r3, #8
 800055a:	6193      	str	r3, [r2, #24]
 800055c:	4b18      	ldr	r3, [pc, #96]	; (80005c0 <MX_GPIO_Init+0xcc>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	f003 0308 	and.w	r3, r3, #8
 8000564:	603b      	str	r3, [r7, #0]
 8000566:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	2120      	movs	r1, #32
 800056c:	4815      	ldr	r0, [pc, #84]	; (80005c4 <MX_GPIO_Init+0xd0>)
 800056e:	f000 ff99 	bl	80014a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000572:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000576:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <MX_GPIO_Init+0xd4>)
 800057a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	2300      	movs	r3, #0
 800057e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000580:	f107 0310 	add.w	r3, r7, #16
 8000584:	4619      	mov	r1, r3
 8000586:	4811      	ldr	r0, [pc, #68]	; (80005cc <MX_GPIO_Init+0xd8>)
 8000588:	f000 fe08 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800058c:	2320      	movs	r3, #32
 800058e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000590:	2301      	movs	r3, #1
 8000592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000594:	2300      	movs	r3, #0
 8000596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000598:	2302      	movs	r3, #2
 800059a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800059c:	f107 0310 	add.w	r3, r7, #16
 80005a0:	4619      	mov	r1, r3
 80005a2:	4808      	ldr	r0, [pc, #32]	; (80005c4 <MX_GPIO_Init+0xd0>)
 80005a4:	f000 fdfa 	bl	800119c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2100      	movs	r1, #0
 80005ac:	2028      	movs	r0, #40	; 0x28
 80005ae:	f000 fdbe 	bl	800112e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005b2:	2028      	movs	r0, #40	; 0x28
 80005b4:	f000 fdd7 	bl	8001166 <HAL_NVIC_EnableIRQ>

}
 80005b8:	bf00      	nop
 80005ba:	3720      	adds	r7, #32
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40021000 	.word	0x40021000
 80005c4:	40010800 	.word	0x40010800
 80005c8:	10110000 	.word	0x10110000
 80005cc:	40011000 	.word	0x40011000

080005d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d4:	b672      	cpsid	i
}
 80005d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <Error_Handler+0x8>
	...

080005dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005e2:	4b15      	ldr	r3, [pc, #84]	; (8000638 <HAL_MspInit+0x5c>)
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	4a14      	ldr	r2, [pc, #80]	; (8000638 <HAL_MspInit+0x5c>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6193      	str	r3, [r2, #24]
 80005ee:	4b12      	ldr	r3, [pc, #72]	; (8000638 <HAL_MspInit+0x5c>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fa:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <HAL_MspInit+0x5c>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	4a0e      	ldr	r2, [pc, #56]	; (8000638 <HAL_MspInit+0x5c>)
 8000600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000604:	61d3      	str	r3, [r2, #28]
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <HAL_MspInit+0x5c>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000612:	4b0a      	ldr	r3, [pc, #40]	; (800063c <HAL_MspInit+0x60>)
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	4a04      	ldr	r2, [pc, #16]	; (800063c <HAL_MspInit+0x60>)
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800062e:	bf00      	nop
 8000630:	3714      	adds	r7, #20
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr
 8000638:	40021000 	.word	0x40021000
 800063c:	40010000 	.word	0x40010000

08000640 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b088      	sub	sp, #32
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 0310 	add.w	r3, r7, #16
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a18      	ldr	r2, [pc, #96]	; (80006bc <HAL_ADC_MspInit+0x7c>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d129      	bne.n	80006b4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000660:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <HAL_ADC_MspInit+0x80>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4a16      	ldr	r2, [pc, #88]	; (80006c0 <HAL_ADC_MspInit+0x80>)
 8000666:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800066a:	6193      	str	r3, [r2, #24]
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <HAL_ADC_MspInit+0x80>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000674:	60fb      	str	r3, [r7, #12]
 8000676:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <HAL_ADC_MspInit+0x80>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	4a10      	ldr	r2, [pc, #64]	; (80006c0 <HAL_ADC_MspInit+0x80>)
 800067e:	f043 0304 	orr.w	r3, r3, #4
 8000682:	6193      	str	r3, [r2, #24]
 8000684:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <HAL_ADC_MspInit+0x80>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f003 0304 	and.w	r3, r3, #4
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000690:	2301      	movs	r3, #1
 8000692:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000694:	2303      	movs	r3, #3
 8000696:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000698:	f107 0310 	add.w	r3, r7, #16
 800069c:	4619      	mov	r1, r3
 800069e:	4809      	ldr	r0, [pc, #36]	; (80006c4 <HAL_ADC_MspInit+0x84>)
 80006a0:	f000 fd7c 	bl	800119c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2100      	movs	r1, #0
 80006a8:	2012      	movs	r0, #18
 80006aa:	f000 fd40 	bl	800112e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80006ae:	2012      	movs	r0, #18
 80006b0:	f000 fd59 	bl	8001166 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80006b4:	bf00      	nop
 80006b6:	3720      	adds	r7, #32
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40012400 	.word	0x40012400
 80006c0:	40021000 	.word	0x40021000
 80006c4:	40010800 	.word	0x40010800

080006c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08a      	sub	sp, #40	; 0x28
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d0:	f107 0314 	add.w	r3, r7, #20
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a1d      	ldr	r2, [pc, #116]	; (8000758 <HAL_I2C_MspInit+0x90>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d132      	bne.n	800074e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e8:	4b1c      	ldr	r3, [pc, #112]	; (800075c <HAL_I2C_MspInit+0x94>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	4a1b      	ldr	r2, [pc, #108]	; (800075c <HAL_I2C_MspInit+0x94>)
 80006ee:	f043 0308 	orr.w	r3, r3, #8
 80006f2:	6193      	str	r3, [r2, #24]
 80006f4:	4b19      	ldr	r3, [pc, #100]	; (800075c <HAL_I2C_MspInit+0x94>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	f003 0308 	and.w	r3, r3, #8
 80006fc:	613b      	str	r3, [r7, #16]
 80006fe:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000700:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000706:	2312      	movs	r3, #18
 8000708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800070a:	2303      	movs	r3, #3
 800070c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	4619      	mov	r1, r3
 8000714:	4812      	ldr	r0, [pc, #72]	; (8000760 <HAL_I2C_MspInit+0x98>)
 8000716:	f000 fd41 	bl	800119c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800071a:	4b12      	ldr	r3, [pc, #72]	; (8000764 <HAL_I2C_MspInit+0x9c>)
 800071c:	685b      	ldr	r3, [r3, #4]
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
 8000720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000722:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
 8000728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800072a:	f043 0302 	orr.w	r3, r3, #2
 800072e:	627b      	str	r3, [r7, #36]	; 0x24
 8000730:	4a0c      	ldr	r2, [pc, #48]	; (8000764 <HAL_I2C_MspInit+0x9c>)
 8000732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000734:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <HAL_I2C_MspInit+0x94>)
 8000738:	69db      	ldr	r3, [r3, #28]
 800073a:	4a08      	ldr	r2, [pc, #32]	; (800075c <HAL_I2C_MspInit+0x94>)
 800073c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000740:	61d3      	str	r3, [r2, #28]
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <HAL_I2C_MspInit+0x94>)
 8000744:	69db      	ldr	r3, [r3, #28]
 8000746:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800074e:	bf00      	nop
 8000750:	3728      	adds	r7, #40	; 0x28
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40005400 	.word	0x40005400
 800075c:	40021000 	.word	0x40021000
 8000760:	40010c00 	.word	0x40010c00
 8000764:	40010000 	.word	0x40010000

08000768 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000770:	f107 0310 	add.w	r3, r7, #16
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a15      	ldr	r2, [pc, #84]	; (80007d8 <HAL_UART_MspInit+0x70>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d123      	bne.n	80007d0 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000788:	4b14      	ldr	r3, [pc, #80]	; (80007dc <HAL_UART_MspInit+0x74>)
 800078a:	69db      	ldr	r3, [r3, #28]
 800078c:	4a13      	ldr	r2, [pc, #76]	; (80007dc <HAL_UART_MspInit+0x74>)
 800078e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000792:	61d3      	str	r3, [r2, #28]
 8000794:	4b11      	ldr	r3, [pc, #68]	; (80007dc <HAL_UART_MspInit+0x74>)
 8000796:	69db      	ldr	r3, [r3, #28]
 8000798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a0:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <HAL_UART_MspInit+0x74>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	4a0d      	ldr	r2, [pc, #52]	; (80007dc <HAL_UART_MspInit+0x74>)
 80007a6:	f043 0304 	orr.w	r3, r3, #4
 80007aa:	6193      	str	r3, [r2, #24]
 80007ac:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <HAL_UART_MspInit+0x74>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	f003 0304 	and.w	r3, r3, #4
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007b8:	230c      	movs	r3, #12
 80007ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007bc:	2302      	movs	r3, #2
 80007be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2302      	movs	r3, #2
 80007c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c4:	f107 0310 	add.w	r3, r7, #16
 80007c8:	4619      	mov	r1, r3
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <HAL_UART_MspInit+0x78>)
 80007cc:	f000 fce6 	bl	800119c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007d0:	bf00      	nop
 80007d2:	3720      	adds	r7, #32
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40004400 	.word	0x40004400
 80007dc:	40021000 	.word	0x40021000
 80007e0:	40010800 	.word	0x40010800

080007e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <NMI_Handler+0x4>

080007ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ee:	e7fe      	b.n	80007ee <HardFault_Handler+0x4>

080007f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <MemManage_Handler+0x4>

080007f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007fa:	e7fe      	b.n	80007fa <BusFault_Handler+0x4>

080007fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000800:	e7fe      	b.n	8000800 <UsageFault_Handler+0x4>

08000802 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr

0800080e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	46bd      	mov	sp, r7
 8000816:	bc80      	pop	{r7}
 8000818:	4770      	bx	lr

0800081a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	46bd      	mov	sp, r7
 8000822:	bc80      	pop	{r7}
 8000824:	4770      	bx	lr

08000826 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800082a:	f000 f887 	bl	800093c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000838:	4802      	ldr	r0, [pc, #8]	; (8000844 <ADC1_2_IRQHandler+0x10>)
 800083a:	f000 f997 	bl	8000b6c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000028 	.word	0x20000028

08000848 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800084c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000850:	f000 fe40 	bl	80014d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}

08000858 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr

08000864 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000864:	f7ff fff8 	bl	8000858 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000868:	480b      	ldr	r0, [pc, #44]	; (8000898 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800086a:	490c      	ldr	r1, [pc, #48]	; (800089c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800086c:	4a0c      	ldr	r2, [pc, #48]	; (80008a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800086e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000870:	e002      	b.n	8000878 <LoopCopyDataInit>

08000872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000876:	3304      	adds	r3, #4

08000878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800087a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800087c:	d3f9      	bcc.n	8000872 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087e:	4a09      	ldr	r2, [pc, #36]	; (80008a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000880:	4c09      	ldr	r4, [pc, #36]	; (80008a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000884:	e001      	b.n	800088a <LoopFillZerobss>

08000886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000888:	3204      	adds	r2, #4

0800088a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800088a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800088c:	d3fb      	bcc.n	8000886 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800088e:	f002 f883 	bl	8002998 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000892:	f7ff fd29 	bl	80002e8 <main>
  bx lr
 8000896:	4770      	bx	lr
  ldr r0, =_sdata
 8000898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800089c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008a0:	08002a44 	.word	0x08002a44
  ldr r2, =_sbss
 80008a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008a8:	200000f8 	.word	0x200000f8

080008ac <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008ac:	e7fe      	b.n	80008ac <CAN1_RX1_IRQHandler>
	...

080008b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008b4:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <HAL_Init+0x28>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a07      	ldr	r2, [pc, #28]	; (80008d8 <HAL_Init+0x28>)
 80008ba:	f043 0310 	orr.w	r3, r3, #16
 80008be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008c0:	2003      	movs	r0, #3
 80008c2:	f000 fc29 	bl	8001118 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008c6:	2000      	movs	r0, #0
 80008c8:	f000 f808 	bl	80008dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008cc:	f7ff fe86 	bl	80005dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008d0:	2300      	movs	r3, #0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40022000 	.word	0x40022000

080008dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <HAL_InitTick+0x54>)
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <HAL_InitTick+0x58>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	4619      	mov	r1, r3
 80008ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 fc41 	bl	8001182 <HAL_SYSTICK_Config>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000906:	2301      	movs	r3, #1
 8000908:	e00e      	b.n	8000928 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2b0f      	cmp	r3, #15
 800090e:	d80a      	bhi.n	8000926 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000910:	2200      	movs	r2, #0
 8000912:	6879      	ldr	r1, [r7, #4]
 8000914:	f04f 30ff 	mov.w	r0, #4294967295
 8000918:	f000 fc09 	bl	800112e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800091c:	4a06      	ldr	r2, [pc, #24]	; (8000938 <HAL_InitTick+0x5c>)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000922:	2300      	movs	r3, #0
 8000924:	e000      	b.n	8000928 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000926:	2301      	movs	r3, #1
}
 8000928:	4618      	mov	r0, r3
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000000 	.word	0x20000000
 8000934:	20000008 	.word	0x20000008
 8000938:	20000004 	.word	0x20000004

0800093c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000940:	4b05      	ldr	r3, [pc, #20]	; (8000958 <HAL_IncTick+0x1c>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	461a      	mov	r2, r3
 8000946:	4b05      	ldr	r3, [pc, #20]	; (800095c <HAL_IncTick+0x20>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4413      	add	r3, r2
 800094c:	4a03      	ldr	r2, [pc, #12]	; (800095c <HAL_IncTick+0x20>)
 800094e:	6013      	str	r3, [r2, #0]
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr
 8000958:	20000008 	.word	0x20000008
 800095c:	200000f4 	.word	0x200000f4

08000960 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  return uwTick;
 8000964:	4b02      	ldr	r3, [pc, #8]	; (8000970 <HAL_GetTick+0x10>)
 8000966:	681b      	ldr	r3, [r3, #0]
}
 8000968:	4618      	mov	r0, r3
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr
 8000970:	200000f4 	.word	0x200000f4

08000974 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800097c:	f7ff fff0 	bl	8000960 <HAL_GetTick>
 8000980:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800098c:	d005      	beq.n	800099a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <HAL_Delay+0x44>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	461a      	mov	r2, r3
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	4413      	add	r3, r2
 8000998:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800099a:	bf00      	nop
 800099c:	f7ff ffe0 	bl	8000960 <HAL_GetTick>
 80009a0:	4602      	mov	r2, r0
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d8f7      	bhi.n	800099c <HAL_Delay+0x28>
  {
  }
}
 80009ac:	bf00      	nop
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000008 	.word	0x20000008

080009bc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009c4:	2300      	movs	r3, #0
 80009c6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80009c8:	2300      	movs	r3, #0
 80009ca:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80009cc:	2300      	movs	r3, #0
 80009ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d101      	bne.n	80009de <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80009da:	2301      	movs	r3, #1
 80009dc:	e0be      	b.n	8000b5c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d109      	bne.n	8000a00 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2200      	movs	r2, #0
 80009f0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2200      	movs	r2, #0
 80009f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f7ff fe20 	bl	8000640 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f000 fa73 	bl	8000eec <ADC_ConversionStop_Disable>
 8000a06:	4603      	mov	r3, r0
 8000a08:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a0e:	f003 0310 	and.w	r3, r3, #16
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	f040 8099 	bne.w	8000b4a <HAL_ADC_Init+0x18e>
 8000a18:	7dfb      	ldrb	r3, [r7, #23]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	f040 8095 	bne.w	8000b4a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a24:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a28:	f023 0302 	bic.w	r3, r3, #2
 8000a2c:	f043 0202 	orr.w	r2, r3, #2
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a3c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	7b1b      	ldrb	r3, [r3, #12]
 8000a42:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a44:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a54:	d003      	beq.n	8000a5e <HAL_ADC_Init+0xa2>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d102      	bne.n	8000a64 <HAL_ADC_Init+0xa8>
 8000a5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a62:	e000      	b.n	8000a66 <HAL_ADC_Init+0xaa>
 8000a64:	2300      	movs	r3, #0
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	7d1b      	ldrb	r3, [r3, #20]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d119      	bne.n	8000aa8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	7b1b      	ldrb	r3, [r3, #12]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d109      	bne.n	8000a90 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	3b01      	subs	r3, #1
 8000a82:	035a      	lsls	r2, r3, #13
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	e00b      	b.n	8000aa8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a94:	f043 0220 	orr.w	r2, r3, #32
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa0:	f043 0201 	orr.w	r2, r3, #1
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	430a      	orrs	r2, r1
 8000aba:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	689a      	ldr	r2, [r3, #8]
 8000ac2:	4b28      	ldr	r3, [pc, #160]	; (8000b64 <HAL_ADC_Init+0x1a8>)
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	6812      	ldr	r2, [r2, #0]
 8000aca:	68b9      	ldr	r1, [r7, #8]
 8000acc:	430b      	orrs	r3, r1
 8000ace:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ad8:	d003      	beq.n	8000ae2 <HAL_ADC_Init+0x126>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d104      	bne.n	8000aec <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	691b      	ldr	r3, [r3, #16]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	051b      	lsls	r3, r3, #20
 8000aea:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	68fa      	ldr	r2, [r7, #12]
 8000afc:	430a      	orrs	r2, r1
 8000afe:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	689a      	ldr	r2, [r3, #8]
 8000b06:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <HAL_ADC_Init+0x1ac>)
 8000b08:	4013      	ands	r3, r2
 8000b0a:	68ba      	ldr	r2, [r7, #8]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d10b      	bne.n	8000b28 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2200      	movs	r2, #0
 8000b14:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b1a:	f023 0303 	bic.w	r3, r3, #3
 8000b1e:	f043 0201 	orr.w	r2, r3, #1
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b26:	e018      	b.n	8000b5a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b2c:	f023 0312 	bic.w	r3, r3, #18
 8000b30:	f043 0210 	orr.w	r2, r3, #16
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b3c:	f043 0201 	orr.w	r2, r3, #1
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000b44:	2301      	movs	r3, #1
 8000b46:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b48:	e007      	b.n	8000b5a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b4e:	f043 0210 	orr.w	r2, r3, #16
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3718      	adds	r7, #24
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	ffe1f7fd 	.word	0xffe1f7fd
 8000b68:	ff1f0efe 	.word	0xff1f0efe

08000b6c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	f003 0320 	and.w	r3, r3, #32
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d03e      	beq.n	8000c0c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	f003 0302 	and.w	r3, r3, #2
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d039      	beq.n	8000c0c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b9c:	f003 0310 	and.w	r3, r3, #16
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d105      	bne.n	8000bb0 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ba8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000bba:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000bbe:	d11d      	bne.n	8000bfc <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d119      	bne.n	8000bfc <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	685a      	ldr	r2, [r3, #4]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f022 0220 	bic.w	r2, r2, #32
 8000bd6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bdc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d105      	bne.n	8000bfc <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf4:	f043 0201 	orr.w	r2, r3, #1
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff fb6a 	bl	80002d6 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f06f 0212 	mvn.w	r2, #18
 8000c0a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d04d      	beq.n	8000cb2 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	f003 0304 	and.w	r3, r3, #4
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d048      	beq.n	8000cb2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c24:	f003 0310 	and.w	r3, r3, #16
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d105      	bne.n	8000c38 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c30:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000c42:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000c46:	d012      	beq.n	8000c6e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d125      	bne.n	8000ca2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000c60:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000c64:	d11d      	bne.n	8000ca2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d119      	bne.n	8000ca2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	685a      	ldr	r2, [r3, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c7c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d105      	bne.n	8000ca2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c9a:	f043 0201 	orr.w	r2, r3, #1
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f000 f963 	bl	8000f6e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f06f 020c 	mvn.w	r2, #12
 8000cb0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d012      	beq.n	8000ce2 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d00d      	beq.n	8000ce2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f000 f809 	bl	8000cea <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f06f 0201 	mvn.w	r2, #1
 8000ce0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000ce2:	bf00      	nop
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b083      	sub	sp, #12
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr

08000cfc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d06:	2300      	movs	r3, #0
 8000d08:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d101      	bne.n	8000d1c <HAL_ADC_ConfigChannel+0x20>
 8000d18:	2302      	movs	r3, #2
 8000d1a:	e0dc      	b.n	8000ed6 <HAL_ADC_ConfigChannel+0x1da>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2201      	movs	r2, #1
 8000d20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	2b06      	cmp	r3, #6
 8000d2a:	d81c      	bhi.n	8000d66 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685a      	ldr	r2, [r3, #4]
 8000d36:	4613      	mov	r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	4413      	add	r3, r2
 8000d3c:	3b05      	subs	r3, #5
 8000d3e:	221f      	movs	r2, #31
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	4019      	ands	r1, r3
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	6818      	ldr	r0, [r3, #0]
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685a      	ldr	r2, [r3, #4]
 8000d50:	4613      	mov	r3, r2
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	4413      	add	r3, r2
 8000d56:	3b05      	subs	r3, #5
 8000d58:	fa00 f203 	lsl.w	r2, r0, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	430a      	orrs	r2, r1
 8000d62:	635a      	str	r2, [r3, #52]	; 0x34
 8000d64:	e03c      	b.n	8000de0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	2b0c      	cmp	r3, #12
 8000d6c:	d81c      	bhi.n	8000da8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685a      	ldr	r2, [r3, #4]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	4413      	add	r3, r2
 8000d7e:	3b23      	subs	r3, #35	; 0x23
 8000d80:	221f      	movs	r2, #31
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43db      	mvns	r3, r3
 8000d88:	4019      	ands	r1, r3
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	6818      	ldr	r0, [r3, #0]
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685a      	ldr	r2, [r3, #4]
 8000d92:	4613      	mov	r3, r2
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	4413      	add	r3, r2
 8000d98:	3b23      	subs	r3, #35	; 0x23
 8000d9a:	fa00 f203 	lsl.w	r2, r0, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	430a      	orrs	r2, r1
 8000da4:	631a      	str	r2, [r3, #48]	; 0x30
 8000da6:	e01b      	b.n	8000de0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685a      	ldr	r2, [r3, #4]
 8000db2:	4613      	mov	r3, r2
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	4413      	add	r3, r2
 8000db8:	3b41      	subs	r3, #65	; 0x41
 8000dba:	221f      	movs	r2, #31
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	4019      	ands	r1, r3
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	6818      	ldr	r0, [r3, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685a      	ldr	r2, [r3, #4]
 8000dcc:	4613      	mov	r3, r2
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	4413      	add	r3, r2
 8000dd2:	3b41      	subs	r3, #65	; 0x41
 8000dd4:	fa00 f203 	lsl.w	r2, r0, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b09      	cmp	r3, #9
 8000de6:	d91c      	bls.n	8000e22 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	68d9      	ldr	r1, [r3, #12]
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	4613      	mov	r3, r2
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	4413      	add	r3, r2
 8000df8:	3b1e      	subs	r3, #30
 8000dfa:	2207      	movs	r2, #7
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	4019      	ands	r1, r3
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	6898      	ldr	r0, [r3, #8]
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	4413      	add	r3, r2
 8000e12:	3b1e      	subs	r3, #30
 8000e14:	fa00 f203 	lsl.w	r2, r0, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	60da      	str	r2, [r3, #12]
 8000e20:	e019      	b.n	8000e56 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	6919      	ldr	r1, [r3, #16]
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	4413      	add	r3, r2
 8000e32:	2207      	movs	r2, #7
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	4019      	ands	r1, r3
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	6898      	ldr	r0, [r3, #8]
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4613      	mov	r3, r2
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	4413      	add	r3, r2
 8000e4a:	fa00 f203 	lsl.w	r2, r0, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	430a      	orrs	r2, r1
 8000e54:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2b10      	cmp	r3, #16
 8000e5c:	d003      	beq.n	8000e66 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e62:	2b11      	cmp	r3, #17
 8000e64:	d132      	bne.n	8000ecc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a1d      	ldr	r2, [pc, #116]	; (8000ee0 <HAL_ADC_ConfigChannel+0x1e4>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d125      	bne.n	8000ebc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d126      	bne.n	8000ecc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	689a      	ldr	r2, [r3, #8]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000e8c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2b10      	cmp	r3, #16
 8000e94:	d11a      	bne.n	8000ecc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e96:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <HAL_ADC_ConfigChannel+0x1e8>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a13      	ldr	r2, [pc, #76]	; (8000ee8 <HAL_ADC_ConfigChannel+0x1ec>)
 8000e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea0:	0c9a      	lsrs	r2, r3, #18
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	4413      	add	r3, r2
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000eac:	e002      	b.n	8000eb4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d1f9      	bne.n	8000eae <HAL_ADC_ConfigChannel+0x1b2>
 8000eba:	e007      	b.n	8000ecc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec0:	f043 0220 	orr.w	r2, r3, #32
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3714      	adds	r7, #20
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr
 8000ee0:	40012400 	.word	0x40012400
 8000ee4:	20000000 	.word	0x20000000
 8000ee8:	431bde83 	.word	0x431bde83

08000eec <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d12e      	bne.n	8000f64 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	689a      	ldr	r2, [r3, #8]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f022 0201 	bic.w	r2, r2, #1
 8000f14:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f16:	f7ff fd23 	bl	8000960 <HAL_GetTick>
 8000f1a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f1c:	e01b      	b.n	8000f56 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000f1e:	f7ff fd1f 	bl	8000960 <HAL_GetTick>
 8000f22:	4602      	mov	r2, r0
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d914      	bls.n	8000f56 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d10d      	bne.n	8000f56 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f3e:	f043 0210 	orr.w	r2, r3, #16
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4a:	f043 0201 	orr.w	r2, r3, #1
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e007      	b.n	8000f66 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d0dc      	beq.n	8000f1e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b083      	sub	sp, #12
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr

08000f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fb2:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	60d3      	str	r3, [r2, #12]
}
 8000fb8:	bf00      	nop
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fcc:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	0a1b      	lsrs	r3, r3, #8
 8000fd2:	f003 0307 	and.w	r3, r3, #7
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	db0b      	blt.n	800100e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	f003 021f 	and.w	r2, r3, #31
 8000ffc:	4906      	ldr	r1, [pc, #24]	; (8001018 <__NVIC_EnableIRQ+0x34>)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	095b      	lsrs	r3, r3, #5
 8001004:	2001      	movs	r0, #1
 8001006:	fa00 f202 	lsl.w	r2, r0, r2
 800100a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr
 8001018:	e000e100 	.word	0xe000e100

0800101c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102c:	2b00      	cmp	r3, #0
 800102e:	db0a      	blt.n	8001046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	b2da      	uxtb	r2, r3
 8001034:	490c      	ldr	r1, [pc, #48]	; (8001068 <__NVIC_SetPriority+0x4c>)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	0112      	lsls	r2, r2, #4
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	440b      	add	r3, r1
 8001040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001044:	e00a      	b.n	800105c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4908      	ldr	r1, [pc, #32]	; (800106c <__NVIC_SetPriority+0x50>)
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	f003 030f 	and.w	r3, r3, #15
 8001052:	3b04      	subs	r3, #4
 8001054:	0112      	lsls	r2, r2, #4
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	440b      	add	r3, r1
 800105a:	761a      	strb	r2, [r3, #24]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000e100 	.word	0xe000e100
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001070:	b480      	push	{r7}
 8001072:	b089      	sub	sp, #36	; 0x24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f1c3 0307 	rsb	r3, r3, #7
 800108a:	2b04      	cmp	r3, #4
 800108c:	bf28      	it	cs
 800108e:	2304      	movcs	r3, #4
 8001090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3304      	adds	r3, #4
 8001096:	2b06      	cmp	r3, #6
 8001098:	d902      	bls.n	80010a0 <NVIC_EncodePriority+0x30>
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3b03      	subs	r3, #3
 800109e:	e000      	b.n	80010a2 <NVIC_EncodePriority+0x32>
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	f04f 32ff 	mov.w	r2, #4294967295
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43da      	mvns	r2, r3
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	401a      	ands	r2, r3
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b8:	f04f 31ff 	mov.w	r1, #4294967295
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	fa01 f303 	lsl.w	r3, r1, r3
 80010c2:	43d9      	mvns	r1, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	4313      	orrs	r3, r2
         );
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3724      	adds	r7, #36	; 0x24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr

080010d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010e4:	d301      	bcc.n	80010ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010e6:	2301      	movs	r3, #1
 80010e8:	e00f      	b.n	800110a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <SysTick_Config+0x40>)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010f2:	210f      	movs	r1, #15
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295
 80010f8:	f7ff ff90 	bl	800101c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <SysTick_Config+0x40>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001102:	4b04      	ldr	r3, [pc, #16]	; (8001114 <SysTick_Config+0x40>)
 8001104:	2207      	movs	r2, #7
 8001106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	e000e010 	.word	0xe000e010

08001118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ff2d 	bl	8000f80 <__NVIC_SetPriorityGrouping>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800112e:	b580      	push	{r7, lr}
 8001130:	b086      	sub	sp, #24
 8001132:	af00      	add	r7, sp, #0
 8001134:	4603      	mov	r3, r0
 8001136:	60b9      	str	r1, [r7, #8]
 8001138:	607a      	str	r2, [r7, #4]
 800113a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001140:	f7ff ff42 	bl	8000fc8 <__NVIC_GetPriorityGrouping>
 8001144:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	68b9      	ldr	r1, [r7, #8]
 800114a:	6978      	ldr	r0, [r7, #20]
 800114c:	f7ff ff90 	bl	8001070 <NVIC_EncodePriority>
 8001150:	4602      	mov	r2, r0
 8001152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001156:	4611      	mov	r1, r2
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff5f 	bl	800101c <__NVIC_SetPriority>
}
 800115e:	bf00      	nop
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	4603      	mov	r3, r0
 800116e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff ff35 	bl	8000fe4 <__NVIC_EnableIRQ>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff ffa2 	bl	80010d4 <SysTick_Config>
 8001190:	4603      	mov	r3, r0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800119c:	b480      	push	{r7}
 800119e:	b08b      	sub	sp, #44	; 0x2c
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011a6:	2300      	movs	r3, #0
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011aa:	2300      	movs	r3, #0
 80011ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ae:	e169      	b.n	8001484 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011b0:	2201      	movs	r2, #1
 80011b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	69fa      	ldr	r2, [r7, #28]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	f040 8158 	bne.w	800147e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	4a9a      	ldr	r2, [pc, #616]	; (800143c <HAL_GPIO_Init+0x2a0>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d05e      	beq.n	8001296 <HAL_GPIO_Init+0xfa>
 80011d8:	4a98      	ldr	r2, [pc, #608]	; (800143c <HAL_GPIO_Init+0x2a0>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d875      	bhi.n	80012ca <HAL_GPIO_Init+0x12e>
 80011de:	4a98      	ldr	r2, [pc, #608]	; (8001440 <HAL_GPIO_Init+0x2a4>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d058      	beq.n	8001296 <HAL_GPIO_Init+0xfa>
 80011e4:	4a96      	ldr	r2, [pc, #600]	; (8001440 <HAL_GPIO_Init+0x2a4>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d86f      	bhi.n	80012ca <HAL_GPIO_Init+0x12e>
 80011ea:	4a96      	ldr	r2, [pc, #600]	; (8001444 <HAL_GPIO_Init+0x2a8>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d052      	beq.n	8001296 <HAL_GPIO_Init+0xfa>
 80011f0:	4a94      	ldr	r2, [pc, #592]	; (8001444 <HAL_GPIO_Init+0x2a8>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d869      	bhi.n	80012ca <HAL_GPIO_Init+0x12e>
 80011f6:	4a94      	ldr	r2, [pc, #592]	; (8001448 <HAL_GPIO_Init+0x2ac>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d04c      	beq.n	8001296 <HAL_GPIO_Init+0xfa>
 80011fc:	4a92      	ldr	r2, [pc, #584]	; (8001448 <HAL_GPIO_Init+0x2ac>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d863      	bhi.n	80012ca <HAL_GPIO_Init+0x12e>
 8001202:	4a92      	ldr	r2, [pc, #584]	; (800144c <HAL_GPIO_Init+0x2b0>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d046      	beq.n	8001296 <HAL_GPIO_Init+0xfa>
 8001208:	4a90      	ldr	r2, [pc, #576]	; (800144c <HAL_GPIO_Init+0x2b0>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d85d      	bhi.n	80012ca <HAL_GPIO_Init+0x12e>
 800120e:	2b12      	cmp	r3, #18
 8001210:	d82a      	bhi.n	8001268 <HAL_GPIO_Init+0xcc>
 8001212:	2b12      	cmp	r3, #18
 8001214:	d859      	bhi.n	80012ca <HAL_GPIO_Init+0x12e>
 8001216:	a201      	add	r2, pc, #4	; (adr r2, 800121c <HAL_GPIO_Init+0x80>)
 8001218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800121c:	08001297 	.word	0x08001297
 8001220:	08001271 	.word	0x08001271
 8001224:	08001283 	.word	0x08001283
 8001228:	080012c5 	.word	0x080012c5
 800122c:	080012cb 	.word	0x080012cb
 8001230:	080012cb 	.word	0x080012cb
 8001234:	080012cb 	.word	0x080012cb
 8001238:	080012cb 	.word	0x080012cb
 800123c:	080012cb 	.word	0x080012cb
 8001240:	080012cb 	.word	0x080012cb
 8001244:	080012cb 	.word	0x080012cb
 8001248:	080012cb 	.word	0x080012cb
 800124c:	080012cb 	.word	0x080012cb
 8001250:	080012cb 	.word	0x080012cb
 8001254:	080012cb 	.word	0x080012cb
 8001258:	080012cb 	.word	0x080012cb
 800125c:	080012cb 	.word	0x080012cb
 8001260:	08001279 	.word	0x08001279
 8001264:	0800128d 	.word	0x0800128d
 8001268:	4a79      	ldr	r2, [pc, #484]	; (8001450 <HAL_GPIO_Init+0x2b4>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d013      	beq.n	8001296 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800126e:	e02c      	b.n	80012ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	623b      	str	r3, [r7, #32]
          break;
 8001276:	e029      	b.n	80012cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	3304      	adds	r3, #4
 800127e:	623b      	str	r3, [r7, #32]
          break;
 8001280:	e024      	b.n	80012cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	3308      	adds	r3, #8
 8001288:	623b      	str	r3, [r7, #32]
          break;
 800128a:	e01f      	b.n	80012cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	330c      	adds	r3, #12
 8001292:	623b      	str	r3, [r7, #32]
          break;
 8001294:	e01a      	b.n	80012cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d102      	bne.n	80012a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800129e:	2304      	movs	r3, #4
 80012a0:	623b      	str	r3, [r7, #32]
          break;
 80012a2:	e013      	b.n	80012cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d105      	bne.n	80012b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012ac:	2308      	movs	r3, #8
 80012ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	69fa      	ldr	r2, [r7, #28]
 80012b4:	611a      	str	r2, [r3, #16]
          break;
 80012b6:	e009      	b.n	80012cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012b8:	2308      	movs	r3, #8
 80012ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	69fa      	ldr	r2, [r7, #28]
 80012c0:	615a      	str	r2, [r3, #20]
          break;
 80012c2:	e003      	b.n	80012cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012c4:	2300      	movs	r3, #0
 80012c6:	623b      	str	r3, [r7, #32]
          break;
 80012c8:	e000      	b.n	80012cc <HAL_GPIO_Init+0x130>
          break;
 80012ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	2bff      	cmp	r3, #255	; 0xff
 80012d0:	d801      	bhi.n	80012d6 <HAL_GPIO_Init+0x13a>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	e001      	b.n	80012da <HAL_GPIO_Init+0x13e>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3304      	adds	r3, #4
 80012da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	2bff      	cmp	r3, #255	; 0xff
 80012e0:	d802      	bhi.n	80012e8 <HAL_GPIO_Init+0x14c>
 80012e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	e002      	b.n	80012ee <HAL_GPIO_Init+0x152>
 80012e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ea:	3b08      	subs	r3, #8
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	210f      	movs	r1, #15
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	fa01 f303 	lsl.w	r3, r1, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	401a      	ands	r2, r3
 8001300:	6a39      	ldr	r1, [r7, #32]
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	fa01 f303 	lsl.w	r3, r1, r3
 8001308:	431a      	orrs	r2, r3
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001316:	2b00      	cmp	r3, #0
 8001318:	f000 80b1 	beq.w	800147e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800131c:	4b4d      	ldr	r3, [pc, #308]	; (8001454 <HAL_GPIO_Init+0x2b8>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	4a4c      	ldr	r2, [pc, #304]	; (8001454 <HAL_GPIO_Init+0x2b8>)
 8001322:	f043 0301 	orr.w	r3, r3, #1
 8001326:	6193      	str	r3, [r2, #24]
 8001328:	4b4a      	ldr	r3, [pc, #296]	; (8001454 <HAL_GPIO_Init+0x2b8>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001334:	4a48      	ldr	r2, [pc, #288]	; (8001458 <HAL_GPIO_Init+0x2bc>)
 8001336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001338:	089b      	lsrs	r3, r3, #2
 800133a:	3302      	adds	r3, #2
 800133c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001340:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001344:	f003 0303 	and.w	r3, r3, #3
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	220f      	movs	r2, #15
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	4013      	ands	r3, r2
 8001356:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a40      	ldr	r2, [pc, #256]	; (800145c <HAL_GPIO_Init+0x2c0>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d013      	beq.n	8001388 <HAL_GPIO_Init+0x1ec>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a3f      	ldr	r2, [pc, #252]	; (8001460 <HAL_GPIO_Init+0x2c4>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d00d      	beq.n	8001384 <HAL_GPIO_Init+0x1e8>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a3e      	ldr	r2, [pc, #248]	; (8001464 <HAL_GPIO_Init+0x2c8>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d007      	beq.n	8001380 <HAL_GPIO_Init+0x1e4>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4a3d      	ldr	r2, [pc, #244]	; (8001468 <HAL_GPIO_Init+0x2cc>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d101      	bne.n	800137c <HAL_GPIO_Init+0x1e0>
 8001378:	2303      	movs	r3, #3
 800137a:	e006      	b.n	800138a <HAL_GPIO_Init+0x1ee>
 800137c:	2304      	movs	r3, #4
 800137e:	e004      	b.n	800138a <HAL_GPIO_Init+0x1ee>
 8001380:	2302      	movs	r3, #2
 8001382:	e002      	b.n	800138a <HAL_GPIO_Init+0x1ee>
 8001384:	2301      	movs	r3, #1
 8001386:	e000      	b.n	800138a <HAL_GPIO_Init+0x1ee>
 8001388:	2300      	movs	r3, #0
 800138a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800138c:	f002 0203 	and.w	r2, r2, #3
 8001390:	0092      	lsls	r2, r2, #2
 8001392:	4093      	lsls	r3, r2
 8001394:	68fa      	ldr	r2, [r7, #12]
 8001396:	4313      	orrs	r3, r2
 8001398:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800139a:	492f      	ldr	r1, [pc, #188]	; (8001458 <HAL_GPIO_Init+0x2bc>)
 800139c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139e:	089b      	lsrs	r3, r3, #2
 80013a0:	3302      	adds	r3, #2
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d006      	beq.n	80013c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013b4:	4b2d      	ldr	r3, [pc, #180]	; (800146c <HAL_GPIO_Init+0x2d0>)
 80013b6:	689a      	ldr	r2, [r3, #8]
 80013b8:	492c      	ldr	r1, [pc, #176]	; (800146c <HAL_GPIO_Init+0x2d0>)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	4313      	orrs	r3, r2
 80013be:	608b      	str	r3, [r1, #8]
 80013c0:	e006      	b.n	80013d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013c2:	4b2a      	ldr	r3, [pc, #168]	; (800146c <HAL_GPIO_Init+0x2d0>)
 80013c4:	689a      	ldr	r2, [r3, #8]
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	4928      	ldr	r1, [pc, #160]	; (800146c <HAL_GPIO_Init+0x2d0>)
 80013cc:	4013      	ands	r3, r2
 80013ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d006      	beq.n	80013ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013dc:	4b23      	ldr	r3, [pc, #140]	; (800146c <HAL_GPIO_Init+0x2d0>)
 80013de:	68da      	ldr	r2, [r3, #12]
 80013e0:	4922      	ldr	r1, [pc, #136]	; (800146c <HAL_GPIO_Init+0x2d0>)
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	60cb      	str	r3, [r1, #12]
 80013e8:	e006      	b.n	80013f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013ea:	4b20      	ldr	r3, [pc, #128]	; (800146c <HAL_GPIO_Init+0x2d0>)
 80013ec:	68da      	ldr	r2, [r3, #12]
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	43db      	mvns	r3, r3
 80013f2:	491e      	ldr	r1, [pc, #120]	; (800146c <HAL_GPIO_Init+0x2d0>)
 80013f4:	4013      	ands	r3, r2
 80013f6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d006      	beq.n	8001412 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001404:	4b19      	ldr	r3, [pc, #100]	; (800146c <HAL_GPIO_Init+0x2d0>)
 8001406:	685a      	ldr	r2, [r3, #4]
 8001408:	4918      	ldr	r1, [pc, #96]	; (800146c <HAL_GPIO_Init+0x2d0>)
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	4313      	orrs	r3, r2
 800140e:	604b      	str	r3, [r1, #4]
 8001410:	e006      	b.n	8001420 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001412:	4b16      	ldr	r3, [pc, #88]	; (800146c <HAL_GPIO_Init+0x2d0>)
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	43db      	mvns	r3, r3
 800141a:	4914      	ldr	r1, [pc, #80]	; (800146c <HAL_GPIO_Init+0x2d0>)
 800141c:	4013      	ands	r3, r2
 800141e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d021      	beq.n	8001470 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800142c:	4b0f      	ldr	r3, [pc, #60]	; (800146c <HAL_GPIO_Init+0x2d0>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	490e      	ldr	r1, [pc, #56]	; (800146c <HAL_GPIO_Init+0x2d0>)
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	4313      	orrs	r3, r2
 8001436:	600b      	str	r3, [r1, #0]
 8001438:	e021      	b.n	800147e <HAL_GPIO_Init+0x2e2>
 800143a:	bf00      	nop
 800143c:	10320000 	.word	0x10320000
 8001440:	10310000 	.word	0x10310000
 8001444:	10220000 	.word	0x10220000
 8001448:	10210000 	.word	0x10210000
 800144c:	10120000 	.word	0x10120000
 8001450:	10110000 	.word	0x10110000
 8001454:	40021000 	.word	0x40021000
 8001458:	40010000 	.word	0x40010000
 800145c:	40010800 	.word	0x40010800
 8001460:	40010c00 	.word	0x40010c00
 8001464:	40011000 	.word	0x40011000
 8001468:	40011400 	.word	0x40011400
 800146c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001470:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <HAL_GPIO_Init+0x304>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	43db      	mvns	r3, r3
 8001478:	4909      	ldr	r1, [pc, #36]	; (80014a0 <HAL_GPIO_Init+0x304>)
 800147a:	4013      	ands	r3, r2
 800147c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	3301      	adds	r3, #1
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148a:	fa22 f303 	lsr.w	r3, r2, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	f47f ae8e 	bne.w	80011b0 <HAL_GPIO_Init+0x14>
  }
}
 8001494:	bf00      	nop
 8001496:	bf00      	nop
 8001498:	372c      	adds	r7, #44	; 0x2c
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr
 80014a0:	40010400 	.word	0x40010400

080014a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	807b      	strh	r3, [r7, #2]
 80014b0:	4613      	mov	r3, r2
 80014b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014b4:	787b      	ldrb	r3, [r7, #1]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ba:	887a      	ldrh	r2, [r7, #2]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014c0:	e003      	b.n	80014ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014c2:	887b      	ldrh	r3, [r7, #2]
 80014c4:	041a      	lsls	r2, r3, #16
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	611a      	str	r2, [r3, #16]
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr

080014d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014de:	4b08      	ldr	r3, [pc, #32]	; (8001500 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014e0:	695a      	ldr	r2, [r3, #20]
 80014e2:	88fb      	ldrh	r3, [r7, #6]
 80014e4:	4013      	ands	r3, r2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d006      	beq.n	80014f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014ea:	4a05      	ldr	r2, [pc, #20]	; (8001500 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014ec:	88fb      	ldrh	r3, [r7, #6]
 80014ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014f0:	88fb      	ldrh	r3, [r7, #6]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 f806 	bl	8001504 <HAL_GPIO_EXTI_Callback>
  }
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40010400 	.word	0x40010400

08001504 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr

08001518 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e12b      	b.n	8001782 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d106      	bne.n	8001544 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff f8c2 	bl	80006c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2224      	movs	r2, #36	; 0x24
 8001548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 0201 	bic.w	r2, r2, #1
 800155a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800156a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800157a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800157c:	f001 f832 	bl	80025e4 <HAL_RCC_GetPCLK1Freq>
 8001580:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	4a81      	ldr	r2, [pc, #516]	; (800178c <HAL_I2C_Init+0x274>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d807      	bhi.n	800159c <HAL_I2C_Init+0x84>
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4a80      	ldr	r2, [pc, #512]	; (8001790 <HAL_I2C_Init+0x278>)
 8001590:	4293      	cmp	r3, r2
 8001592:	bf94      	ite	ls
 8001594:	2301      	movls	r3, #1
 8001596:	2300      	movhi	r3, #0
 8001598:	b2db      	uxtb	r3, r3
 800159a:	e006      	b.n	80015aa <HAL_I2C_Init+0x92>
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4a7d      	ldr	r2, [pc, #500]	; (8001794 <HAL_I2C_Init+0x27c>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	bf94      	ite	ls
 80015a4:	2301      	movls	r3, #1
 80015a6:	2300      	movhi	r3, #0
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e0e7      	b.n	8001782 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4a78      	ldr	r2, [pc, #480]	; (8001798 <HAL_I2C_Init+0x280>)
 80015b6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ba:	0c9b      	lsrs	r3, r3, #18
 80015bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	68ba      	ldr	r2, [r7, #8]
 80015ce:	430a      	orrs	r2, r1
 80015d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6a1b      	ldr	r3, [r3, #32]
 80015d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	4a6a      	ldr	r2, [pc, #424]	; (800178c <HAL_I2C_Init+0x274>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d802      	bhi.n	80015ec <HAL_I2C_Init+0xd4>
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	3301      	adds	r3, #1
 80015ea:	e009      	b.n	8001600 <HAL_I2C_Init+0xe8>
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015f2:	fb02 f303 	mul.w	r3, r2, r3
 80015f6:	4a69      	ldr	r2, [pc, #420]	; (800179c <HAL_I2C_Init+0x284>)
 80015f8:	fba2 2303 	umull	r2, r3, r2, r3
 80015fc:	099b      	lsrs	r3, r3, #6
 80015fe:	3301      	adds	r3, #1
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	6812      	ldr	r2, [r2, #0]
 8001604:	430b      	orrs	r3, r1
 8001606:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001612:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	495c      	ldr	r1, [pc, #368]	; (800178c <HAL_I2C_Init+0x274>)
 800161c:	428b      	cmp	r3, r1
 800161e:	d819      	bhi.n	8001654 <HAL_I2C_Init+0x13c>
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	1e59      	subs	r1, r3, #1
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	fbb1 f3f3 	udiv	r3, r1, r3
 800162e:	1c59      	adds	r1, r3, #1
 8001630:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001634:	400b      	ands	r3, r1
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00a      	beq.n	8001650 <HAL_I2C_Init+0x138>
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	1e59      	subs	r1, r3, #1
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	fbb1 f3f3 	udiv	r3, r1, r3
 8001648:	3301      	adds	r3, #1
 800164a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800164e:	e051      	b.n	80016f4 <HAL_I2C_Init+0x1dc>
 8001650:	2304      	movs	r3, #4
 8001652:	e04f      	b.n	80016f4 <HAL_I2C_Init+0x1dc>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d111      	bne.n	8001680 <HAL_I2C_Init+0x168>
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	1e58      	subs	r0, r3, #1
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6859      	ldr	r1, [r3, #4]
 8001664:	460b      	mov	r3, r1
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	440b      	add	r3, r1
 800166a:	fbb0 f3f3 	udiv	r3, r0, r3
 800166e:	3301      	adds	r3, #1
 8001670:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001674:	2b00      	cmp	r3, #0
 8001676:	bf0c      	ite	eq
 8001678:	2301      	moveq	r3, #1
 800167a:	2300      	movne	r3, #0
 800167c:	b2db      	uxtb	r3, r3
 800167e:	e012      	b.n	80016a6 <HAL_I2C_Init+0x18e>
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	1e58      	subs	r0, r3, #1
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6859      	ldr	r1, [r3, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	440b      	add	r3, r1
 800168e:	0099      	lsls	r1, r3, #2
 8001690:	440b      	add	r3, r1
 8001692:	fbb0 f3f3 	udiv	r3, r0, r3
 8001696:	3301      	adds	r3, #1
 8001698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800169c:	2b00      	cmp	r3, #0
 800169e:	bf0c      	ite	eq
 80016a0:	2301      	moveq	r3, #1
 80016a2:	2300      	movne	r3, #0
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <HAL_I2C_Init+0x196>
 80016aa:	2301      	movs	r3, #1
 80016ac:	e022      	b.n	80016f4 <HAL_I2C_Init+0x1dc>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d10e      	bne.n	80016d4 <HAL_I2C_Init+0x1bc>
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	1e58      	subs	r0, r3, #1
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6859      	ldr	r1, [r3, #4]
 80016be:	460b      	mov	r3, r1
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	440b      	add	r3, r1
 80016c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80016c8:	3301      	adds	r3, #1
 80016ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016d2:	e00f      	b.n	80016f4 <HAL_I2C_Init+0x1dc>
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	1e58      	subs	r0, r3, #1
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6859      	ldr	r1, [r3, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	440b      	add	r3, r1
 80016e2:	0099      	lsls	r1, r3, #2
 80016e4:	440b      	add	r3, r1
 80016e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ea:	3301      	adds	r3, #1
 80016ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016f4:	6879      	ldr	r1, [r7, #4]
 80016f6:	6809      	ldr	r1, [r1, #0]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	69da      	ldr	r2, [r3, #28]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a1b      	ldr	r3, [r3, #32]
 800170e:	431a      	orrs	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	430a      	orrs	r2, r1
 8001716:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001722:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	6911      	ldr	r1, [r2, #16]
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	68d2      	ldr	r2, [r2, #12]
 800172e:	4311      	orrs	r1, r2
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	6812      	ldr	r2, [r2, #0]
 8001734:	430b      	orrs	r3, r1
 8001736:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	695a      	ldr	r2, [r3, #20]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	431a      	orrs	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	430a      	orrs	r2, r1
 8001752:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f042 0201 	orr.w	r2, r2, #1
 8001762:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2220      	movs	r2, #32
 800176e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	000186a0 	.word	0x000186a0
 8001790:	001e847f 	.word	0x001e847f
 8001794:	003d08ff 	.word	0x003d08ff
 8001798:	431bde83 	.word	0x431bde83
 800179c:	10624dd3 	.word	0x10624dd3

080017a0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b088      	sub	sp, #32
 80017a4:	af02      	add	r7, sp, #8
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	607a      	str	r2, [r7, #4]
 80017aa:	461a      	mov	r2, r3
 80017ac:	460b      	mov	r3, r1
 80017ae:	817b      	strh	r3, [r7, #10]
 80017b0:	4613      	mov	r3, r2
 80017b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017b4:	f7ff f8d4 	bl	8000960 <HAL_GetTick>
 80017b8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b20      	cmp	r3, #32
 80017c4:	f040 80e0 	bne.w	8001988 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	2319      	movs	r3, #25
 80017ce:	2201      	movs	r2, #1
 80017d0:	4970      	ldr	r1, [pc, #448]	; (8001994 <HAL_I2C_Master_Transmit+0x1f4>)
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	f000 f964 	bl	8001aa0 <I2C_WaitOnFlagUntilTimeout>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80017de:	2302      	movs	r3, #2
 80017e0:	e0d3      	b.n	800198a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d101      	bne.n	80017f0 <HAL_I2C_Master_Transmit+0x50>
 80017ec:	2302      	movs	r3, #2
 80017ee:	e0cc      	b.n	800198a <HAL_I2C_Master_Transmit+0x1ea>
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2201      	movs	r2, #1
 80017f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b01      	cmp	r3, #1
 8001804:	d007      	beq.n	8001816 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f042 0201 	orr.w	r2, r2, #1
 8001814:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001824:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2221      	movs	r2, #33	; 0x21
 800182a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2210      	movs	r2, #16
 8001832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2200      	movs	r2, #0
 800183a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	893a      	ldrh	r2, [r7, #8]
 8001846:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800184c:	b29a      	uxth	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	4a50      	ldr	r2, [pc, #320]	; (8001998 <HAL_I2C_Master_Transmit+0x1f8>)
 8001856:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001858:	8979      	ldrh	r1, [r7, #10]
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	6a3a      	ldr	r2, [r7, #32]
 800185e:	68f8      	ldr	r0, [r7, #12]
 8001860:	f000 f89c 	bl	800199c <I2C_MasterRequestWrite>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e08d      	b.n	800198a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800186e:	2300      	movs	r3, #0
 8001870:	613b      	str	r3, [r7, #16]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	695b      	ldr	r3, [r3, #20]
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001884:	e066      	b.n	8001954 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	6a39      	ldr	r1, [r7, #32]
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f000 fa22 	bl	8001cd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d00d      	beq.n	80018b2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	2b04      	cmp	r3, #4
 800189c:	d107      	bne.n	80018ae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e06b      	b.n	800198a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b6:	781a      	ldrb	r2, [r3, #0]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c2:	1c5a      	adds	r2, r3, #1
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	3b01      	subs	r3, #1
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018da:	3b01      	subs	r3, #1
 80018dc:	b29a      	uxth	r2, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	2b04      	cmp	r3, #4
 80018ee:	d11b      	bne.n	8001928 <HAL_I2C_Master_Transmit+0x188>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d017      	beq.n	8001928 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fc:	781a      	ldrb	r2, [r3, #0]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001908:	1c5a      	adds	r2, r3, #1
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001912:	b29b      	uxth	r3, r3
 8001914:	3b01      	subs	r3, #1
 8001916:	b29a      	uxth	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001920:	3b01      	subs	r3, #1
 8001922:	b29a      	uxth	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	6a39      	ldr	r1, [r7, #32]
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	f000 fa19 	bl	8001d64 <I2C_WaitOnBTFFlagUntilTimeout>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d00d      	beq.n	8001954 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193c:	2b04      	cmp	r3, #4
 800193e:	d107      	bne.n	8001950 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800194e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e01a      	b.n	800198a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001958:	2b00      	cmp	r3, #0
 800195a:	d194      	bne.n	8001886 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800196a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2220      	movs	r2, #32
 8001970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001984:	2300      	movs	r3, #0
 8001986:	e000      	b.n	800198a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001988:	2302      	movs	r3, #2
  }
}
 800198a:	4618      	mov	r0, r3
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	00100002 	.word	0x00100002
 8001998:	ffff0000 	.word	0xffff0000

0800199c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b088      	sub	sp, #32
 80019a0:	af02      	add	r7, sp, #8
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	607a      	str	r2, [r7, #4]
 80019a6:	603b      	str	r3, [r7, #0]
 80019a8:	460b      	mov	r3, r1
 80019aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	2b08      	cmp	r3, #8
 80019b6:	d006      	beq.n	80019c6 <I2C_MasterRequestWrite+0x2a>
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d003      	beq.n	80019c6 <I2C_MasterRequestWrite+0x2a>
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80019c4:	d108      	bne.n	80019d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	e00b      	b.n	80019f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019dc:	2b12      	cmp	r3, #18
 80019de:	d107      	bne.n	80019f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80019fc:	68f8      	ldr	r0, [r7, #12]
 80019fe:	f000 f84f 	bl	8001aa0 <I2C_WaitOnFlagUntilTimeout>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d00d      	beq.n	8001a24 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a16:	d103      	bne.n	8001a20 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e035      	b.n	8001a90 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a2c:	d108      	bne.n	8001a40 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a2e:	897b      	ldrh	r3, [r7, #10]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	461a      	mov	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001a3c:	611a      	str	r2, [r3, #16]
 8001a3e:	e01b      	b.n	8001a78 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001a40:	897b      	ldrh	r3, [r7, #10]
 8001a42:	11db      	asrs	r3, r3, #7
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	f003 0306 	and.w	r3, r3, #6
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	f063 030f 	orn	r3, r3, #15
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	490e      	ldr	r1, [pc, #56]	; (8001a98 <I2C_MasterRequestWrite+0xfc>)
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f000 f898 	bl	8001b94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e010      	b.n	8001a90 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001a6e:	897b      	ldrh	r3, [r7, #10]
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	4907      	ldr	r1, [pc, #28]	; (8001a9c <I2C_MasterRequestWrite+0x100>)
 8001a7e:	68f8      	ldr	r0, [r7, #12]
 8001a80:	f000 f888 	bl	8001b94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	00010008 	.word	0x00010008
 8001a9c:	00010002 	.word	0x00010002

08001aa0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	603b      	str	r3, [r7, #0]
 8001aac:	4613      	mov	r3, r2
 8001aae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ab0:	e048      	b.n	8001b44 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab8:	d044      	beq.n	8001b44 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aba:	f7fe ff51 	bl	8000960 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d302      	bcc.n	8001ad0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d139      	bne.n	8001b44 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	0c1b      	lsrs	r3, r3, #16
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d10d      	bne.n	8001af6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	43da      	mvns	r2, r3
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	bf0c      	ite	eq
 8001aec:	2301      	moveq	r3, #1
 8001aee:	2300      	movne	r3, #0
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	461a      	mov	r2, r3
 8001af4:	e00c      	b.n	8001b10 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	43da      	mvns	r2, r3
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	4013      	ands	r3, r2
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	bf0c      	ite	eq
 8001b08:	2301      	moveq	r3, #1
 8001b0a:	2300      	movne	r3, #0
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	461a      	mov	r2, r3
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d116      	bne.n	8001b44 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2220      	movs	r2, #32
 8001b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b30:	f043 0220 	orr.w	r2, r3, #32
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e023      	b.n	8001b8c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	0c1b      	lsrs	r3, r3, #16
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d10d      	bne.n	8001b6a <I2C_WaitOnFlagUntilTimeout+0xca>
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	43da      	mvns	r2, r3
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	bf0c      	ite	eq
 8001b60:	2301      	moveq	r3, #1
 8001b62:	2300      	movne	r3, #0
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	461a      	mov	r2, r3
 8001b68:	e00c      	b.n	8001b84 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	43da      	mvns	r2, r3
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	4013      	ands	r3, r2
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	bf0c      	ite	eq
 8001b7c:	2301      	moveq	r3, #1
 8001b7e:	2300      	movne	r3, #0
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	461a      	mov	r2, r3
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d093      	beq.n	8001ab2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
 8001ba0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ba2:	e071      	b.n	8001c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bb2:	d123      	bne.n	8001bfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bc2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001bcc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2220      	movs	r2, #32
 8001bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	f043 0204 	orr.w	r2, r3, #4
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e067      	b.n	8001ccc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c02:	d041      	beq.n	8001c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c04:	f7fe feac 	bl	8000960 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d302      	bcc.n	8001c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d136      	bne.n	8001c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	0c1b      	lsrs	r3, r3, #16
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d10c      	bne.n	8001c3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	43da      	mvns	r2, r3
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	bf14      	ite	ne
 8001c36:	2301      	movne	r3, #1
 8001c38:	2300      	moveq	r3, #0
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	e00b      	b.n	8001c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	43da      	mvns	r2, r3
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	bf14      	ite	ne
 8001c50:	2301      	movne	r3, #1
 8001c52:	2300      	moveq	r3, #0
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d016      	beq.n	8001c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2220      	movs	r2, #32
 8001c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c74:	f043 0220 	orr.w	r2, r3, #32
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e021      	b.n	8001ccc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	0c1b      	lsrs	r3, r3, #16
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d10c      	bne.n	8001cac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	695b      	ldr	r3, [r3, #20]
 8001c98:	43da      	mvns	r2, r3
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	bf14      	ite	ne
 8001ca4:	2301      	movne	r3, #1
 8001ca6:	2300      	moveq	r3, #0
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	e00b      	b.n	8001cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	43da      	mvns	r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	bf14      	ite	ne
 8001cbe:	2301      	movne	r3, #1
 8001cc0:	2300      	moveq	r3, #0
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f47f af6d 	bne.w	8001ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ce0:	e034      	b.n	8001d4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f000 f886 	bl	8001df4 <I2C_IsAcknowledgeFailed>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e034      	b.n	8001d5c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf8:	d028      	beq.n	8001d4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cfa:	f7fe fe31 	bl	8000960 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	68ba      	ldr	r2, [r7, #8]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d302      	bcc.n	8001d10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d11d      	bne.n	8001d4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d1a:	2b80      	cmp	r3, #128	; 0x80
 8001d1c:	d016      	beq.n	8001d4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2220      	movs	r2, #32
 8001d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d38:	f043 0220 	orr.w	r2, r3, #32
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e007      	b.n	8001d5c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d56:	2b80      	cmp	r3, #128	; 0x80
 8001d58:	d1c3      	bne.n	8001ce2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d70:	e034      	b.n	8001ddc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f000 f83e 	bl	8001df4 <I2C_IsAcknowledgeFailed>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e034      	b.n	8001dec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d88:	d028      	beq.n	8001ddc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d8a:	f7fe fde9 	bl	8000960 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	68ba      	ldr	r2, [r7, #8]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d302      	bcc.n	8001da0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d11d      	bne.n	8001ddc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	f003 0304 	and.w	r3, r3, #4
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	d016      	beq.n	8001ddc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2220      	movs	r2, #32
 8001db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	f043 0220 	orr.w	r2, r3, #32
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e007      	b.n	8001dec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	f003 0304 	and.w	r3, r3, #4
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	d1c3      	bne.n	8001d72 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e0a:	d11b      	bne.n	8001e44 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e14:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2220      	movs	r2, #32
 8001e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e30:	f043 0204 	orr.w	r2, r3, #4
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e000      	b.n	8001e46 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr

08001e50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e272      	b.n	8002348 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 8087 	beq.w	8001f7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e70:	4b92      	ldr	r3, [pc, #584]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 030c 	and.w	r3, r3, #12
 8001e78:	2b04      	cmp	r3, #4
 8001e7a:	d00c      	beq.n	8001e96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e7c:	4b8f      	ldr	r3, [pc, #572]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 030c 	and.w	r3, r3, #12
 8001e84:	2b08      	cmp	r3, #8
 8001e86:	d112      	bne.n	8001eae <HAL_RCC_OscConfig+0x5e>
 8001e88:	4b8c      	ldr	r3, [pc, #560]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e94:	d10b      	bne.n	8001eae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e96:	4b89      	ldr	r3, [pc, #548]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d06c      	beq.n	8001f7c <HAL_RCC_OscConfig+0x12c>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d168      	bne.n	8001f7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e24c      	b.n	8002348 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb6:	d106      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x76>
 8001eb8:	4b80      	ldr	r3, [pc, #512]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a7f      	ldr	r2, [pc, #508]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001ebe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	e02e      	b.n	8001f24 <HAL_RCC_OscConfig+0xd4>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10c      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x98>
 8001ece:	4b7b      	ldr	r3, [pc, #492]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a7a      	ldr	r2, [pc, #488]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	4b78      	ldr	r3, [pc, #480]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a77      	ldr	r2, [pc, #476]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	e01d      	b.n	8001f24 <HAL_RCC_OscConfig+0xd4>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ef0:	d10c      	bne.n	8001f0c <HAL_RCC_OscConfig+0xbc>
 8001ef2:	4b72      	ldr	r3, [pc, #456]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a71      	ldr	r2, [pc, #452]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	4b6f      	ldr	r3, [pc, #444]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a6e      	ldr	r2, [pc, #440]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	e00b      	b.n	8001f24 <HAL_RCC_OscConfig+0xd4>
 8001f0c:	4b6b      	ldr	r3, [pc, #428]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a6a      	ldr	r2, [pc, #424]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f16:	6013      	str	r3, [r2, #0]
 8001f18:	4b68      	ldr	r3, [pc, #416]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a67      	ldr	r2, [pc, #412]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d013      	beq.n	8001f54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2c:	f7fe fd18 	bl	8000960 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f34:	f7fe fd14 	bl	8000960 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b64      	cmp	r3, #100	; 0x64
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e200      	b.n	8002348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f46:	4b5d      	ldr	r3, [pc, #372]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f0      	beq.n	8001f34 <HAL_RCC_OscConfig+0xe4>
 8001f52:	e014      	b.n	8001f7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f54:	f7fe fd04 	bl	8000960 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f5c:	f7fe fd00 	bl	8000960 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b64      	cmp	r3, #100	; 0x64
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e1ec      	b.n	8002348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6e:	4b53      	ldr	r3, [pc, #332]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f0      	bne.n	8001f5c <HAL_RCC_OscConfig+0x10c>
 8001f7a:	e000      	b.n	8001f7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d063      	beq.n	8002052 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f8a:	4b4c      	ldr	r3, [pc, #304]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00b      	beq.n	8001fae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f96:	4b49      	ldr	r3, [pc, #292]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
 8001f9e:	2b08      	cmp	r3, #8
 8001fa0:	d11c      	bne.n	8001fdc <HAL_RCC_OscConfig+0x18c>
 8001fa2:	4b46      	ldr	r3, [pc, #280]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d116      	bne.n	8001fdc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fae:	4b43      	ldr	r3, [pc, #268]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d005      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x176>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d001      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e1c0      	b.n	8002348 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc6:	4b3d      	ldr	r3, [pc, #244]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	4939      	ldr	r1, [pc, #228]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fda:	e03a      	b.n	8002052 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d020      	beq.n	8002026 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fe4:	4b36      	ldr	r3, [pc, #216]	; (80020c0 <HAL_RCC_OscConfig+0x270>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fea:	f7fe fcb9 	bl	8000960 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ff2:	f7fe fcb5 	bl	8000960 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e1a1      	b.n	8002348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002004:	4b2d      	ldr	r3, [pc, #180]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0f0      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002010:	4b2a      	ldr	r3, [pc, #168]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	4927      	ldr	r1, [pc, #156]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8002020:	4313      	orrs	r3, r2
 8002022:	600b      	str	r3, [r1, #0]
 8002024:	e015      	b.n	8002052 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002026:	4b26      	ldr	r3, [pc, #152]	; (80020c0 <HAL_RCC_OscConfig+0x270>)
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202c:	f7fe fc98 	bl	8000960 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002034:	f7fe fc94 	bl	8000960 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e180      	b.n	8002348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002046:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f0      	bne.n	8002034 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b00      	cmp	r3, #0
 800205c:	d03a      	beq.n	80020d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d019      	beq.n	800209a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002066:	4b17      	ldr	r3, [pc, #92]	; (80020c4 <HAL_RCC_OscConfig+0x274>)
 8002068:	2201      	movs	r2, #1
 800206a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206c:	f7fe fc78 	bl	8000960 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002074:	f7fe fc74 	bl	8000960 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e160      	b.n	8002348 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002086:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0f0      	beq.n	8002074 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002092:	2001      	movs	r0, #1
 8002094:	f000 face 	bl	8002634 <RCC_Delay>
 8002098:	e01c      	b.n	80020d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800209a:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <HAL_RCC_OscConfig+0x274>)
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a0:	f7fe fc5e 	bl	8000960 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a6:	e00f      	b.n	80020c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020a8:	f7fe fc5a 	bl	8000960 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d908      	bls.n	80020c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e146      	b.n	8002348 <HAL_RCC_OscConfig+0x4f8>
 80020ba:	bf00      	nop
 80020bc:	40021000 	.word	0x40021000
 80020c0:	42420000 	.word	0x42420000
 80020c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c8:	4b92      	ldr	r3, [pc, #584]	; (8002314 <HAL_RCC_OscConfig+0x4c4>)
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1e9      	bne.n	80020a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f000 80a6 	beq.w	800222e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020e2:	2300      	movs	r3, #0
 80020e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020e6:	4b8b      	ldr	r3, [pc, #556]	; (8002314 <HAL_RCC_OscConfig+0x4c4>)
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10d      	bne.n	800210e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020f2:	4b88      	ldr	r3, [pc, #544]	; (8002314 <HAL_RCC_OscConfig+0x4c4>)
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	4a87      	ldr	r2, [pc, #540]	; (8002314 <HAL_RCC_OscConfig+0x4c4>)
 80020f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020fc:	61d3      	str	r3, [r2, #28]
 80020fe:	4b85      	ldr	r3, [pc, #532]	; (8002314 <HAL_RCC_OscConfig+0x4c4>)
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002106:	60bb      	str	r3, [r7, #8]
 8002108:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800210a:	2301      	movs	r3, #1
 800210c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210e:	4b82      	ldr	r3, [pc, #520]	; (8002318 <HAL_RCC_OscConfig+0x4c8>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002116:	2b00      	cmp	r3, #0
 8002118:	d118      	bne.n	800214c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800211a:	4b7f      	ldr	r3, [pc, #508]	; (8002318 <HAL_RCC_OscConfig+0x4c8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a7e      	ldr	r2, [pc, #504]	; (8002318 <HAL_RCC_OscConfig+0x4c8>)
 8002120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002124:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002126:	f7fe fc1b 	bl	8000960 <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800212e:	f7fe fc17 	bl	8000960 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b64      	cmp	r3, #100	; 0x64
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e103      	b.n	8002348 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002140:	4b75      	ldr	r3, [pc, #468]	; (8002318 <HAL_RCC_OscConfig+0x4c8>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0f0      	beq.n	800212e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d106      	bne.n	8002162 <HAL_RCC_OscConfig+0x312>
 8002154:	4b6f      	ldr	r3, [pc, #444]	; (8002314 <HAL_RCC_OscConfig+0x4c4>)
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	4a6e      	ldr	r2, [pc, #440]	; (8002314 <HAL_RCC_OscConfig+0x4c4>)
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	6213      	str	r3, [r2, #32]
 8002160:	e02d      	b.n	80021be <HAL_RCC_OscConfig+0x36e>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10c      	bne.n	8002184 <HAL_RCC_OscConfig+0x334>
 800216a:	4b6a      	ldr	r3, [pc, #424]	; (8002314 <HAL_RCC_OscConfig+0x4c4>)
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	4a69      	ldr	r2, [pc, #420]	; (8002314 <HAL_RCC_OscConfig+0x4c4>)
 8002170:	f023 0301 	bic.w	r3, r3, #1
 8002174:	6213      	str	r3, [r2, #32]
 8002176:	4b67      	ldr	r3, [pc, #412]	; (8002314 <HAL_RCC_OscConfig+0x4c4>)
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	4a66      	ldr	r2, [pc, #408]	; (8002314 <HAL_RCC_OscConfig+0x4c4>)
 800217c:	f023 0304 	bic.w	r3, r3, #4
 8002180:	6213      	str	r3, [r2, #32]
 8002182:	e01c      	b.n	80021be <HAL_RCC_OscConfig+0x36e>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	2b05      	cmp	r3, #5
 800218a:	d10c      	bne.n	80021a6 <HAL_RCC_OscConfig+0x356>
 800218c:	4b61      	ldr	r3, [pc, #388]	; (8002314 <HAL_RCC_OscConfig+0x4c4>)
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	4a60      	ldr	r2, [pc, #384]	; (8002314 <HAL_RCC_OscConfig+0x4c4>)
 8002192:	f043 0304 	orr.w	r3, r3, #4
 8002196:	6213      	str	r3, [r2, #32]
 8002198:	4b5e      	ldr	r3, [pc, #376]	; (8002314 <HAL_RCC_OscConfig+0x4c4>)
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	4a5d      	ldr	r2, [pc, #372]	; (8002314 <HAL_RCC_OscConfig+0x4c4>)
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	6213      	str	r3, [r2, #32]
 80021a4:	e00b      	b.n	80021be <HAL_RCC_OscConfig+0x36e>
 80021a6:	4b5b      	ldr	r3, [pc, #364]	; (8002314 <HAL_RCC_OscConfig+0x4c4>)
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	4a5a      	ldr	r2, [pc, #360]	; (8002314 <HAL_RCC_OscConfig+0x4c4>)
 80021ac:	f023 0301 	bic.w	r3, r3, #1
 80021b0:	6213      	str	r3, [r2, #32]
 80021b2:	4b58      	ldr	r3, [pc, #352]	; (8002314 <HAL_RCC_OscConfig+0x4c4>)
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	4a57      	ldr	r2, [pc, #348]	; (8002314 <HAL_RCC_OscConfig+0x4c4>)
 80021b8:	f023 0304 	bic.w	r3, r3, #4
 80021bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d015      	beq.n	80021f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c6:	f7fe fbcb 	bl	8000960 <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021cc:	e00a      	b.n	80021e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ce:	f7fe fbc7 	bl	8000960 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021dc:	4293      	cmp	r3, r2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e0b1      	b.n	8002348 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e4:	4b4b      	ldr	r3, [pc, #300]	; (8002314 <HAL_RCC_OscConfig+0x4c4>)
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0ee      	beq.n	80021ce <HAL_RCC_OscConfig+0x37e>
 80021f0:	e014      	b.n	800221c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f2:	f7fe fbb5 	bl	8000960 <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f8:	e00a      	b.n	8002210 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021fa:	f7fe fbb1 	bl	8000960 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	f241 3288 	movw	r2, #5000	; 0x1388
 8002208:	4293      	cmp	r3, r2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e09b      	b.n	8002348 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002210:	4b40      	ldr	r3, [pc, #256]	; (8002314 <HAL_RCC_OscConfig+0x4c4>)
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1ee      	bne.n	80021fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800221c:	7dfb      	ldrb	r3, [r7, #23]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d105      	bne.n	800222e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002222:	4b3c      	ldr	r3, [pc, #240]	; (8002314 <HAL_RCC_OscConfig+0x4c4>)
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	4a3b      	ldr	r2, [pc, #236]	; (8002314 <HAL_RCC_OscConfig+0x4c4>)
 8002228:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800222c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 8087 	beq.w	8002346 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002238:	4b36      	ldr	r3, [pc, #216]	; (8002314 <HAL_RCC_OscConfig+0x4c4>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 030c 	and.w	r3, r3, #12
 8002240:	2b08      	cmp	r3, #8
 8002242:	d061      	beq.n	8002308 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	2b02      	cmp	r3, #2
 800224a:	d146      	bne.n	80022da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800224c:	4b33      	ldr	r3, [pc, #204]	; (800231c <HAL_RCC_OscConfig+0x4cc>)
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002252:	f7fe fb85 	bl	8000960 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800225a:	f7fe fb81 	bl	8000960 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e06d      	b.n	8002348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800226c:	4b29      	ldr	r3, [pc, #164]	; (8002314 <HAL_RCC_OscConfig+0x4c4>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1f0      	bne.n	800225a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002280:	d108      	bne.n	8002294 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002282:	4b24      	ldr	r3, [pc, #144]	; (8002314 <HAL_RCC_OscConfig+0x4c4>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	4921      	ldr	r1, [pc, #132]	; (8002314 <HAL_RCC_OscConfig+0x4c4>)
 8002290:	4313      	orrs	r3, r2
 8002292:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002294:	4b1f      	ldr	r3, [pc, #124]	; (8002314 <HAL_RCC_OscConfig+0x4c4>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a19      	ldr	r1, [r3, #32]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a4:	430b      	orrs	r3, r1
 80022a6:	491b      	ldr	r1, [pc, #108]	; (8002314 <HAL_RCC_OscConfig+0x4c4>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022ac:	4b1b      	ldr	r3, [pc, #108]	; (800231c <HAL_RCC_OscConfig+0x4cc>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b2:	f7fe fb55 	bl	8000960 <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ba:	f7fe fb51 	bl	8000960 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e03d      	b.n	8002348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022cc:	4b11      	ldr	r3, [pc, #68]	; (8002314 <HAL_RCC_OscConfig+0x4c4>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d0f0      	beq.n	80022ba <HAL_RCC_OscConfig+0x46a>
 80022d8:	e035      	b.n	8002346 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022da:	4b10      	ldr	r3, [pc, #64]	; (800231c <HAL_RCC_OscConfig+0x4cc>)
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e0:	f7fe fb3e 	bl	8000960 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e8:	f7fe fb3a 	bl	8000960 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e026      	b.n	8002348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022fa:	4b06      	ldr	r3, [pc, #24]	; (8002314 <HAL_RCC_OscConfig+0x4c4>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f0      	bne.n	80022e8 <HAL_RCC_OscConfig+0x498>
 8002306:	e01e      	b.n	8002346 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d107      	bne.n	8002320 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e019      	b.n	8002348 <HAL_RCC_OscConfig+0x4f8>
 8002314:	40021000 	.word	0x40021000
 8002318:	40007000 	.word	0x40007000
 800231c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002320:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <HAL_RCC_OscConfig+0x500>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	429a      	cmp	r2, r3
 8002332:	d106      	bne.n	8002342 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800233e:	429a      	cmp	r2, r3
 8002340:	d001      	beq.n	8002346 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e000      	b.n	8002348 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3718      	adds	r7, #24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40021000 	.word	0x40021000

08002354 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e0d0      	b.n	800250a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002368:	4b6a      	ldr	r3, [pc, #424]	; (8002514 <HAL_RCC_ClockConfig+0x1c0>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	429a      	cmp	r2, r3
 8002374:	d910      	bls.n	8002398 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002376:	4b67      	ldr	r3, [pc, #412]	; (8002514 <HAL_RCC_ClockConfig+0x1c0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f023 0207 	bic.w	r2, r3, #7
 800237e:	4965      	ldr	r1, [pc, #404]	; (8002514 <HAL_RCC_ClockConfig+0x1c0>)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	4313      	orrs	r3, r2
 8002384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002386:	4b63      	ldr	r3, [pc, #396]	; (8002514 <HAL_RCC_ClockConfig+0x1c0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	429a      	cmp	r2, r3
 8002392:	d001      	beq.n	8002398 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e0b8      	b.n	800250a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d020      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d005      	beq.n	80023bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023b0:	4b59      	ldr	r3, [pc, #356]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	4a58      	ldr	r2, [pc, #352]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 80023b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d005      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023c8:	4b53      	ldr	r3, [pc, #332]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	4a52      	ldr	r2, [pc, #328]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 80023ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d4:	4b50      	ldr	r3, [pc, #320]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	494d      	ldr	r1, [pc, #308]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d040      	beq.n	8002474 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d107      	bne.n	800240a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fa:	4b47      	ldr	r3, [pc, #284]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d115      	bne.n	8002432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e07f      	b.n	800250a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b02      	cmp	r3, #2
 8002410:	d107      	bne.n	8002422 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002412:	4b41      	ldr	r3, [pc, #260]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d109      	bne.n	8002432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e073      	b.n	800250a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002422:	4b3d      	ldr	r3, [pc, #244]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e06b      	b.n	800250a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002432:	4b39      	ldr	r3, [pc, #228]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f023 0203 	bic.w	r2, r3, #3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	4936      	ldr	r1, [pc, #216]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 8002440:	4313      	orrs	r3, r2
 8002442:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002444:	f7fe fa8c 	bl	8000960 <HAL_GetTick>
 8002448:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244a:	e00a      	b.n	8002462 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800244c:	f7fe fa88 	bl	8000960 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	f241 3288 	movw	r2, #5000	; 0x1388
 800245a:	4293      	cmp	r3, r2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e053      	b.n	800250a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002462:	4b2d      	ldr	r3, [pc, #180]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 020c 	and.w	r2, r3, #12
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	429a      	cmp	r2, r3
 8002472:	d1eb      	bne.n	800244c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002474:	4b27      	ldr	r3, [pc, #156]	; (8002514 <HAL_RCC_ClockConfig+0x1c0>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	429a      	cmp	r2, r3
 8002480:	d210      	bcs.n	80024a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002482:	4b24      	ldr	r3, [pc, #144]	; (8002514 <HAL_RCC_ClockConfig+0x1c0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f023 0207 	bic.w	r2, r3, #7
 800248a:	4922      	ldr	r1, [pc, #136]	; (8002514 <HAL_RCC_ClockConfig+0x1c0>)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	4313      	orrs	r3, r2
 8002490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002492:	4b20      	ldr	r3, [pc, #128]	; (8002514 <HAL_RCC_ClockConfig+0x1c0>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	429a      	cmp	r2, r3
 800249e:	d001      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e032      	b.n	800250a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d008      	beq.n	80024c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024b0:	4b19      	ldr	r3, [pc, #100]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	4916      	ldr	r1, [pc, #88]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d009      	beq.n	80024e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024ce:	4b12      	ldr	r3, [pc, #72]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	490e      	ldr	r1, [pc, #56]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024e2:	f000 f821 	bl	8002528 <HAL_RCC_GetSysClockFreq>
 80024e6:	4602      	mov	r2, r0
 80024e8:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	091b      	lsrs	r3, r3, #4
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	490a      	ldr	r1, [pc, #40]	; (800251c <HAL_RCC_ClockConfig+0x1c8>)
 80024f4:	5ccb      	ldrb	r3, [r1, r3]
 80024f6:	fa22 f303 	lsr.w	r3, r2, r3
 80024fa:	4a09      	ldr	r2, [pc, #36]	; (8002520 <HAL_RCC_ClockConfig+0x1cc>)
 80024fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024fe:	4b09      	ldr	r3, [pc, #36]	; (8002524 <HAL_RCC_ClockConfig+0x1d0>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7fe f9ea 	bl	80008dc <HAL_InitTick>

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40022000 	.word	0x40022000
 8002518:	40021000 	.word	0x40021000
 800251c:	08002a10 	.word	0x08002a10
 8002520:	20000000 	.word	0x20000000
 8002524:	20000004 	.word	0x20000004

08002528 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002528:	b480      	push	{r7}
 800252a:	b087      	sub	sp, #28
 800252c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800252e:	2300      	movs	r3, #0
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	2300      	movs	r3, #0
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	2300      	movs	r3, #0
 8002538:	617b      	str	r3, [r7, #20]
 800253a:	2300      	movs	r3, #0
 800253c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800253e:	2300      	movs	r3, #0
 8002540:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002542:	4b1e      	ldr	r3, [pc, #120]	; (80025bc <HAL_RCC_GetSysClockFreq+0x94>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f003 030c 	and.w	r3, r3, #12
 800254e:	2b04      	cmp	r3, #4
 8002550:	d002      	beq.n	8002558 <HAL_RCC_GetSysClockFreq+0x30>
 8002552:	2b08      	cmp	r3, #8
 8002554:	d003      	beq.n	800255e <HAL_RCC_GetSysClockFreq+0x36>
 8002556:	e027      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002558:	4b19      	ldr	r3, [pc, #100]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800255a:	613b      	str	r3, [r7, #16]
      break;
 800255c:	e027      	b.n	80025ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	0c9b      	lsrs	r3, r3, #18
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	4a17      	ldr	r2, [pc, #92]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002568:	5cd3      	ldrb	r3, [r2, r3]
 800256a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d010      	beq.n	8002598 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002576:	4b11      	ldr	r3, [pc, #68]	; (80025bc <HAL_RCC_GetSysClockFreq+0x94>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	0c5b      	lsrs	r3, r3, #17
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	4a11      	ldr	r2, [pc, #68]	; (80025c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002582:	5cd3      	ldrb	r3, [r2, r3]
 8002584:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a0d      	ldr	r2, [pc, #52]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800258a:	fb03 f202 	mul.w	r2, r3, r2
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	fbb2 f3f3 	udiv	r3, r2, r3
 8002594:	617b      	str	r3, [r7, #20]
 8002596:	e004      	b.n	80025a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a0c      	ldr	r2, [pc, #48]	; (80025cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800259c:	fb02 f303 	mul.w	r3, r2, r3
 80025a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	613b      	str	r3, [r7, #16]
      break;
 80025a6:	e002      	b.n	80025ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025a8:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80025aa:	613b      	str	r3, [r7, #16]
      break;
 80025ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025ae:	693b      	ldr	r3, [r7, #16]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	371c      	adds	r7, #28
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	40021000 	.word	0x40021000
 80025c0:	007a1200 	.word	0x007a1200
 80025c4:	08002a28 	.word	0x08002a28
 80025c8:	08002a38 	.word	0x08002a38
 80025cc:	003d0900 	.word	0x003d0900

080025d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025d4:	4b02      	ldr	r3, [pc, #8]	; (80025e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80025d6:	681b      	ldr	r3, [r3, #0]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr
 80025e0:	20000000 	.word	0x20000000

080025e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025e8:	f7ff fff2 	bl	80025d0 <HAL_RCC_GetHCLKFreq>
 80025ec:	4602      	mov	r2, r0
 80025ee:	4b05      	ldr	r3, [pc, #20]	; (8002604 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	0a1b      	lsrs	r3, r3, #8
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	4903      	ldr	r1, [pc, #12]	; (8002608 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025fa:	5ccb      	ldrb	r3, [r1, r3]
 80025fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002600:	4618      	mov	r0, r3
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40021000 	.word	0x40021000
 8002608:	08002a20 	.word	0x08002a20

0800260c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002610:	f7ff ffde 	bl	80025d0 <HAL_RCC_GetHCLKFreq>
 8002614:	4602      	mov	r2, r0
 8002616:	4b05      	ldr	r3, [pc, #20]	; (800262c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	0adb      	lsrs	r3, r3, #11
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	4903      	ldr	r1, [pc, #12]	; (8002630 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002622:	5ccb      	ldrb	r3, [r1, r3]
 8002624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002628:	4618      	mov	r0, r3
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40021000 	.word	0x40021000
 8002630:	08002a20 	.word	0x08002a20

08002634 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800263c:	4b0a      	ldr	r3, [pc, #40]	; (8002668 <RCC_Delay+0x34>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a0a      	ldr	r2, [pc, #40]	; (800266c <RCC_Delay+0x38>)
 8002642:	fba2 2303 	umull	r2, r3, r2, r3
 8002646:	0a5b      	lsrs	r3, r3, #9
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	fb02 f303 	mul.w	r3, r2, r3
 800264e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002650:	bf00      	nop
  }
  while (Delay --);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	1e5a      	subs	r2, r3, #1
 8002656:	60fa      	str	r2, [r7, #12]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1f9      	bne.n	8002650 <RCC_Delay+0x1c>
}
 800265c:	bf00      	nop
 800265e:	bf00      	nop
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	bc80      	pop	{r7}
 8002666:	4770      	bx	lr
 8002668:	20000000 	.word	0x20000000
 800266c:	10624dd3 	.word	0x10624dd3

08002670 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002678:	2300      	movs	r3, #0
 800267a:	613b      	str	r3, [r7, #16]
 800267c:	2300      	movs	r3, #0
 800267e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b00      	cmp	r3, #0
 800268a:	d07d      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800268c:	2300      	movs	r3, #0
 800268e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002690:	4b4f      	ldr	r3, [pc, #316]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d10d      	bne.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800269c:	4b4c      	ldr	r3, [pc, #304]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	4a4b      	ldr	r2, [pc, #300]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a6:	61d3      	str	r3, [r2, #28]
 80026a8:	4b49      	ldr	r3, [pc, #292]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b0:	60bb      	str	r3, [r7, #8]
 80026b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026b4:	2301      	movs	r3, #1
 80026b6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b8:	4b46      	ldr	r3, [pc, #280]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d118      	bne.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026c4:	4b43      	ldr	r3, [pc, #268]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a42      	ldr	r2, [pc, #264]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026d0:	f7fe f946 	bl	8000960 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d6:	e008      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d8:	f7fe f942 	bl	8000960 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b64      	cmp	r3, #100	; 0x64
 80026e4:	d901      	bls.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e06d      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ea:	4b3a      	ldr	r3, [pc, #232]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0f0      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026f6:	4b36      	ldr	r3, [pc, #216]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026fe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d02e      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	429a      	cmp	r2, r3
 8002712:	d027      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002714:	4b2e      	ldr	r3, [pc, #184]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800271c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800271e:	4b2e      	ldr	r3, [pc, #184]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002720:	2201      	movs	r2, #1
 8002722:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002724:	4b2c      	ldr	r3, [pc, #176]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800272a:	4a29      	ldr	r2, [pc, #164]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	d014      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273a:	f7fe f911 	bl	8000960 <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002740:	e00a      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002742:	f7fe f90d 	bl	8000960 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002750:	4293      	cmp	r3, r2
 8002752:	d901      	bls.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e036      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002758:	4b1d      	ldr	r3, [pc, #116]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0ee      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002764:	4b1a      	ldr	r3, [pc, #104]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	4917      	ldr	r1, [pc, #92]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002772:	4313      	orrs	r3, r2
 8002774:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002776:	7dfb      	ldrb	r3, [r7, #23]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d105      	bne.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800277c:	4b14      	ldr	r3, [pc, #80]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800277e:	69db      	ldr	r3, [r3, #28]
 8002780:	4a13      	ldr	r2, [pc, #76]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002786:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d008      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002794:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	490b      	ldr	r1, [pc, #44]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0310 	and.w	r3, r3, #16
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d008      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027b2:	4b07      	ldr	r3, [pc, #28]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	4904      	ldr	r1, [pc, #16]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40021000 	.word	0x40021000
 80027d4:	40007000 	.word	0x40007000
 80027d8:	42420440 	.word	0x42420440

080027dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e042      	b.n	8002874 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d106      	bne.n	8002808 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7fd ffb0 	bl	8000768 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2224      	movs	r2, #36	; 0x24
 800280c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800281e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 f82b 	bl	800287c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	691a      	ldr	r2, [r3, #16]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002834:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	695a      	ldr	r2, [r3, #20]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002844:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002854:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2220      	movs	r2, #32
 8002860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2220      	movs	r2, #32
 8002868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68da      	ldr	r2, [r3, #12]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689a      	ldr	r2, [r3, #8]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80028b6:	f023 030c 	bic.w	r3, r3, #12
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6812      	ldr	r2, [r2, #0]
 80028be:	68b9      	ldr	r1, [r7, #8]
 80028c0:	430b      	orrs	r3, r1
 80028c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699a      	ldr	r2, [r3, #24]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	430a      	orrs	r2, r1
 80028d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a2c      	ldr	r2, [pc, #176]	; (8002990 <UART_SetConfig+0x114>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d103      	bne.n	80028ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80028e4:	f7ff fe92 	bl	800260c <HAL_RCC_GetPCLK2Freq>
 80028e8:	60f8      	str	r0, [r7, #12]
 80028ea:	e002      	b.n	80028f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80028ec:	f7ff fe7a 	bl	80025e4 <HAL_RCC_GetPCLK1Freq>
 80028f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	4613      	mov	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4413      	add	r3, r2
 80028fa:	009a      	lsls	r2, r3, #2
 80028fc:	441a      	add	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	fbb2 f3f3 	udiv	r3, r2, r3
 8002908:	4a22      	ldr	r2, [pc, #136]	; (8002994 <UART_SetConfig+0x118>)
 800290a:	fba2 2303 	umull	r2, r3, r2, r3
 800290e:	095b      	lsrs	r3, r3, #5
 8002910:	0119      	lsls	r1, r3, #4
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	4613      	mov	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	009a      	lsls	r2, r3, #2
 800291c:	441a      	add	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	fbb2 f2f3 	udiv	r2, r2, r3
 8002928:	4b1a      	ldr	r3, [pc, #104]	; (8002994 <UART_SetConfig+0x118>)
 800292a:	fba3 0302 	umull	r0, r3, r3, r2
 800292e:	095b      	lsrs	r3, r3, #5
 8002930:	2064      	movs	r0, #100	; 0x64
 8002932:	fb00 f303 	mul.w	r3, r0, r3
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	3332      	adds	r3, #50	; 0x32
 800293c:	4a15      	ldr	r2, [pc, #84]	; (8002994 <UART_SetConfig+0x118>)
 800293e:	fba2 2303 	umull	r2, r3, r2, r3
 8002942:	095b      	lsrs	r3, r3, #5
 8002944:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002948:	4419      	add	r1, r3
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	4613      	mov	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	009a      	lsls	r2, r3, #2
 8002954:	441a      	add	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002960:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <UART_SetConfig+0x118>)
 8002962:	fba3 0302 	umull	r0, r3, r3, r2
 8002966:	095b      	lsrs	r3, r3, #5
 8002968:	2064      	movs	r0, #100	; 0x64
 800296a:	fb00 f303 	mul.w	r3, r0, r3
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	011b      	lsls	r3, r3, #4
 8002972:	3332      	adds	r3, #50	; 0x32
 8002974:	4a07      	ldr	r2, [pc, #28]	; (8002994 <UART_SetConfig+0x118>)
 8002976:	fba2 2303 	umull	r2, r3, r2, r3
 800297a:	095b      	lsrs	r3, r3, #5
 800297c:	f003 020f 	and.w	r2, r3, #15
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	440a      	add	r2, r1
 8002986:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002988:	bf00      	nop
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40013800 	.word	0x40013800
 8002994:	51eb851f 	.word	0x51eb851f

08002998 <__libc_init_array>:
 8002998:	b570      	push	{r4, r5, r6, lr}
 800299a:	2600      	movs	r6, #0
 800299c:	4d0c      	ldr	r5, [pc, #48]	; (80029d0 <__libc_init_array+0x38>)
 800299e:	4c0d      	ldr	r4, [pc, #52]	; (80029d4 <__libc_init_array+0x3c>)
 80029a0:	1b64      	subs	r4, r4, r5
 80029a2:	10a4      	asrs	r4, r4, #2
 80029a4:	42a6      	cmp	r6, r4
 80029a6:	d109      	bne.n	80029bc <__libc_init_array+0x24>
 80029a8:	f000 f822 	bl	80029f0 <_init>
 80029ac:	2600      	movs	r6, #0
 80029ae:	4d0a      	ldr	r5, [pc, #40]	; (80029d8 <__libc_init_array+0x40>)
 80029b0:	4c0a      	ldr	r4, [pc, #40]	; (80029dc <__libc_init_array+0x44>)
 80029b2:	1b64      	subs	r4, r4, r5
 80029b4:	10a4      	asrs	r4, r4, #2
 80029b6:	42a6      	cmp	r6, r4
 80029b8:	d105      	bne.n	80029c6 <__libc_init_array+0x2e>
 80029ba:	bd70      	pop	{r4, r5, r6, pc}
 80029bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80029c0:	4798      	blx	r3
 80029c2:	3601      	adds	r6, #1
 80029c4:	e7ee      	b.n	80029a4 <__libc_init_array+0xc>
 80029c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80029ca:	4798      	blx	r3
 80029cc:	3601      	adds	r6, #1
 80029ce:	e7f2      	b.n	80029b6 <__libc_init_array+0x1e>
 80029d0:	08002a3c 	.word	0x08002a3c
 80029d4:	08002a3c 	.word	0x08002a3c
 80029d8:	08002a3c 	.word	0x08002a3c
 80029dc:	08002a40 	.word	0x08002a40

080029e0 <memset>:
 80029e0:	4603      	mov	r3, r0
 80029e2:	4402      	add	r2, r0
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d100      	bne.n	80029ea <memset+0xa>
 80029e8:	4770      	bx	lr
 80029ea:	f803 1b01 	strb.w	r1, [r3], #1
 80029ee:	e7f9      	b.n	80029e4 <memset+0x4>

080029f0 <_init>:
 80029f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029f2:	bf00      	nop
 80029f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029f6:	bc08      	pop	{r3}
 80029f8:	469e      	mov	lr, r3
 80029fa:	4770      	bx	lr

080029fc <_fini>:
 80029fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029fe:	bf00      	nop
 8002a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a02:	bc08      	pop	{r3}
 8002a04:	469e      	mov	lr, r3
 8002a06:	4770      	bx	lr
