#include "stm32f1xx_hal.h"
#include "i2c-lcd.h"

// Assuming I2C1 is used for communication and the HAL is initialized properly
extern I2C_HandleTypeDef hi2c1;

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);

int main(void)
{
    // HAL initialization
    HAL_Init();

    // Initialize the I2C and GPIO
    MX_GPIO_Init();
    MX_I2C1_Init();

    // Initialize the LCD
    lcd_init();

    // Display text on the LCD
    lcd_clear_display();
    lcd_goto_XY(1, 0);  // Move to row 1, column 0
    lcd_send_string("Hello, STM32!");
    HAL_Delay(2000); // Delay for 2 seconds

    lcd_goto_XY(2, 0);  // Move to row 2, column 0
    lcd_send_string("LCD Working!");
    HAL_Delay(2000); // Delay for 2 seconds

    while (1)
    {
        // Main loop code - you can add more logic here
    }
}

// I2C1 Initialization Function
static void MX_I2C1_Init(void)
{
    hi2c1.Instance = I2C1;
    hi2c1.Init.ClockSpeed = 100000;  // 100kHz
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
    hi2c1.Init.OwnAddress1 = 0;
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
    hi2c1.Init.OwnAddress2 = 0;
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;

}

// GPIO Initialization Function
static void MX_GPIO_Init(void)
{
    __HAL_RCC_GPIOB_CLK_ENABLE();  // Enable GPIOB clock (for I2C SDA and SCL pins)
    __HAL_RCC_GPIOB_CLK_ENABLE();  // Enable GPIOA clock (for I2C SDA and SCL pins if needed)

    // Configure I2C pins (SDA and SCL) if needed (depends on your STM32)
    GPIO_InitTypeDef GPIO_InitStruct = {0};

    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;  // Adjust these pins based on your I2C setup
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}

// Error handler function
void Error_Handler(void)
{
    // You can use this to troubleshoot errors
    __disable_irq();
    while (1)
    {
        // Stay in this loop in case of an error
    }
}
